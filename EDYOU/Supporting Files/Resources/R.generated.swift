//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import IQKeyboardManagerSwift
import RswiftResources
import UIKit

private class BundleFinder {}
let R = _R(bundle: Bundle(for: BundleFinder.self))

struct _R {
  let bundle: Foundation.Bundle

  let entitlements = entitlements()
  let segue = segue()
  let id = id()
  let reuseIdentifier = reuseIdentifier()

  var string: string { .init(bundle: bundle, preferredLanguages: nil, locale: nil) }
  var color: color { .init(bundle: bundle) }
  var image: image { .init(bundle: bundle) }
  var info: info { .init(bundle: bundle) }
  var font: font { .init(bundle: bundle) }
  var file: file { .init(bundle: bundle) }
  var nib: nib { .init(bundle: bundle) }
  var storyboard: storyboard { .init(bundle: bundle) }

  func string(bundle: Foundation.Bundle) -> string {
    .init(bundle: bundle, preferredLanguages: nil, locale: nil)
  }
  func string(locale: Foundation.Locale) -> string {
    .init(bundle: bundle, preferredLanguages: nil, locale: locale)
  }
  func string(preferredLanguages: [String], locale: Locale? = nil) -> string {
    .init(bundle: bundle, preferredLanguages: preferredLanguages, locale: locale)
  }
  func color(bundle: Foundation.Bundle) -> color {
    .init(bundle: bundle)
  }
  func image(bundle: Foundation.Bundle) -> image {
    .init(bundle: bundle)
  }
  func info(bundle: Foundation.Bundle) -> info {
    .init(bundle: bundle)
  }
  func font(bundle: Foundation.Bundle) -> font {
    .init(bundle: bundle)
  }
  func file(bundle: Foundation.Bundle) -> file {
    .init(bundle: bundle)
  }
  func nib(bundle: Foundation.Bundle) -> nib {
    .init(bundle: bundle)
  }
  func storyboard(bundle: Foundation.Bundle) -> storyboard {
    .init(bundle: bundle)
  }
  func validate() throws {
    try self.font.validate()
    try self.nib.validate()
    try self.storyboard.validate()
  }

  struct project {
    let developmentRegion = "en"
  }

  /// This `_R.string` struct is generated, and contains static references to 2 localization tables.
  struct string {
    let bundle: Foundation.Bundle
    let preferredLanguages: [String]?
    let locale: Locale?
    var localizable: localizable { .init(source: .init(bundle: bundle, tableName: "Localizable", preferredLanguages: preferredLanguages, locale: locale)) }
    var ypImagePickerLocalizable: ypImagePickerLocalizable { .init(source: .init(bundle: bundle, tableName: "YPImagePickerLocalizable", preferredLanguages: preferredLanguages, locale: locale)) }

    func localizable(preferredLanguages: [String]) -> localizable {
      .init(source: .init(bundle: bundle, tableName: "Localizable", preferredLanguages: preferredLanguages, locale: locale))
    }
    func ypImagePickerLocalizable(preferredLanguages: [String]) -> ypImagePickerLocalizable {
      .init(source: .init(bundle: bundle, tableName: "YPImagePickerLocalizable", preferredLanguages: preferredLanguages, locale: locale))
    }


    /// This `_R.string.localizable` struct is generated, and contains static references to 23 localization keys.
    struct localizable {
      let source: RswiftResources.StringResource.Source

      /// en translation: ACTIVITIES
      ///
      /// Key: activities
      ///
      /// Locales: en
      var activities: RswiftResources.StringResource { .init(key: "activities", tableName: "Localizable", source: source, developmentValue: "ACTIVITIES", comment: nil) }

      /// en translation: ANIMALS & NATURE
      ///
      /// Key: animals_nature
      ///
      /// Locales: en
      var animals_nature: RswiftResources.StringResource { .init(key: "animals_nature", tableName: "Localizable", source: source, developmentValue: "ANIMALS & NATURE", comment: nil) }

      /// en translation: Page %@ of %@%@
      ///
      /// Key: ax_collection_view_scroll_status
      ///
      /// Locales: en
      var ax_collection_view_scroll_status: RswiftResources.StringResource3<String, String, String> { .init(key: "ax_collection_view_scroll_status", tableName: "Localizable", source: source, developmentValue: "Page %@ of %@%@", comment: nil) }

      /// en translation: Search Emoji
      ///
      /// Key: ax_searchbar_label
      ///
      /// Locales: en
      var ax_searchbar_label: RswiftResources.StringResource { .init(key: "ax_searchbar_label", tableName: "Localizable", source: source, developmentValue: "Search Emoji", comment: nil) }

      /// en translation: Activity category
      ///
      /// Key: ax_segmented_control_activities
      ///
      /// Locales: en
      var ax_segmented_control_activities: RswiftResources.StringResource { .init(key: "ax_segmented_control_activities", tableName: "Localizable", source: source, developmentValue: "Activity category", comment: nil) }

      /// en translation: Animals & Nature category
      ///
      /// Key: ax_segmented_control_animals_nature
      ///
      /// Locales: en
      var ax_segmented_control_animals_nature: RswiftResources.StringResource { .init(key: "ax_segmented_control_animals_nature", tableName: "Localizable", source: source, developmentValue: "Animals & Nature category", comment: nil) }

      /// en translation: Flags category
      ///
      /// Key: ax_segmented_control_flags
      ///
      /// Locales: en
      var ax_segmented_control_flags: RswiftResources.StringResource { .init(key: "ax_segmented_control_flags", tableName: "Localizable", source: source, developmentValue: "Flags category", comment: nil) }

      /// en translation: Food & Drink category
      ///
      /// Key: ax_segmented_control_food_drink
      ///
      /// Locales: en
      var ax_segmented_control_food_drink: RswiftResources.StringResource { .init(key: "ax_segmented_control_food_drink", tableName: "Localizable", source: source, developmentValue: "Food & Drink category", comment: nil) }

      /// en translation: Frequently Used category
      ///
      /// Key: ax_segmented_control_frequently_used
      ///
      /// Locales: en
      var ax_segmented_control_frequently_used: RswiftResources.StringResource { .init(key: "ax_segmented_control_frequently_used", tableName: "Localizable", source: source, developmentValue: "Frequently Used category", comment: nil) }

      /// en translation: Objects category
      ///
      /// Key: ax_segmented_control_objects
      ///
      /// Locales: en
      var ax_segmented_control_objects: RswiftResources.StringResource { .init(key: "ax_segmented_control_objects", tableName: "Localizable", source: source, developmentValue: "Objects category", comment: nil) }

      /// en translation: Smileys & People category
      ///
      /// Key: ax_segmented_control_smileys_people
      ///
      /// Locales: en
      var ax_segmented_control_smileys_people: RswiftResources.StringResource { .init(key: "ax_segmented_control_smileys_people", tableName: "Localizable", source: source, developmentValue: "Smileys & People category", comment: nil) }

      /// en translation: Symbols category
      ///
      /// Key: ax_segmented_control_symbols
      ///
      /// Locales: en
      var ax_segmented_control_symbols: RswiftResources.StringResource { .init(key: "ax_segmented_control_symbols", tableName: "Localizable", source: source, developmentValue: "Symbols category", comment: nil) }

      /// en translation: Travel & Places category
      ///
      /// Key: ax_segmented_control_travel_places
      ///
      /// Locales: en
      var ax_segmented_control_travel_places: RswiftResources.StringResource { .init(key: "ax_segmented_control_travel_places", tableName: "Localizable", source: source, developmentValue: "Travel & Places category", comment: nil) }

      /// en translation: FLAGS
      ///
      /// Key: flags
      ///
      /// Locales: en
      var flags: RswiftResources.StringResource { .init(key: "flags", tableName: "Localizable", source: source, developmentValue: "FLAGS", comment: nil) }

      /// en translation: FOOD & DRINK
      ///
      /// Key: food_drink
      ///
      /// Locales: en
      var food_drink: RswiftResources.StringResource { .init(key: "food_drink", tableName: "Localizable", source: source, developmentValue: "FOOD & DRINK", comment: nil) }

      /// en translation: No Results
      ///
      /// Key: no_results
      ///
      /// Locales: en
      var no_results: RswiftResources.StringResource { .init(key: "no_results", tableName: "Localizable", source: source, developmentValue: "No Results", comment: nil) }

      /// en translation: OBJECTS
      ///
      /// Key: objects
      ///
      /// Locales: en
      var objects: RswiftResources.StringResource { .init(key: "objects", tableName: "Localizable", source: source, developmentValue: "OBJECTS", comment: nil) }

      /// en translation: RECENTLY USED
      ///
      /// Key: recently_used
      ///
      /// Locales: en
      var recently_used: RswiftResources.StringResource { .init(key: "recently_used", tableName: "Localizable", source: source, developmentValue: "RECENTLY USED", comment: nil) }

      /// en translation: Search Emoji
      ///
      /// Key: search_emoji
      ///
      /// Locales: en
      var search_emoji: RswiftResources.StringResource { .init(key: "search_emoji", tableName: "Localizable", source: source, developmentValue: "Search Emoji", comment: nil) }

      /// en translation: RESULTS
      ///
      /// Key: search_result
      ///
      /// Locales: en
      var search_result: RswiftResources.StringResource { .init(key: "search_result", tableName: "Localizable", source: source, developmentValue: "RESULTS", comment: nil) }

      /// en translation: SMILEYS & PEOPLE
      ///
      /// Key: smileys_people
      ///
      /// Locales: en
      var smileys_people: RswiftResources.StringResource { .init(key: "smileys_people", tableName: "Localizable", source: source, developmentValue: "SMILEYS & PEOPLE", comment: nil) }

      /// en translation: SYMBOLS
      ///
      /// Key: symbols
      ///
      /// Locales: en
      var symbols: RswiftResources.StringResource { .init(key: "symbols", tableName: "Localizable", source: source, developmentValue: "SYMBOLS", comment: nil) }

      /// en translation: TRAVEL & PLACES
      ///
      /// Key: travel_places
      ///
      /// Locales: en
      var travel_places: RswiftResources.StringResource { .init(key: "travel_places", tableName: "Localizable", source: source, developmentValue: "TRAVEL & PLACES", comment: nil) }
    }

    /// This `_R.string.ypImagePickerLocalizable` struct is generated, and contains static references to 22 localization keys.
    struct ypImagePickerLocalizable {
      let source: RswiftResources.StringResource.Source

      /// en translation: Albums
      ///
      /// Key: YPImagePickerAlbums
      ///
      /// Locales: en
      var ypImagePickerAlbums: RswiftResources.StringResource { .init(key: "YPImagePickerAlbums", tableName: "YPImagePickerLocalizable", source: source, developmentValue: "Albums", comment: nil) }

      /// en translation: Cancel
      ///
      /// Key: YPImagePickerCancel
      ///
      /// Locales: en
      var ypImagePickerCancel: RswiftResources.StringResource { .init(key: "YPImagePickerCancel", tableName: "YPImagePickerLocalizable", source: source, developmentValue: "Cancel", comment: nil) }

      /// en translation: Cover
      ///
      /// Key: YPImagePickerCover
      ///
      /// Locales: en
      var ypImagePickerCover: RswiftResources.StringResource { .init(key: "YPImagePickerCover", tableName: "YPImagePickerLocalizable", source: source, developmentValue: "Cover", comment: nil) }

      /// en translation: Crop
      ///
      /// Key: YPImagePickerCrop
      ///
      /// Locales: en
      var ypImagePickerCrop: RswiftResources.StringResource { .init(key: "YPImagePickerCrop", tableName: "YPImagePickerLocalizable", source: source, developmentValue: "Crop", comment: nil) }

      /// en translation: Done
      ///
      /// Key: YPImagePickerDone
      ///
      /// Locales: en
      var ypImagePickerDone: RswiftResources.StringResource { .init(key: "YPImagePickerDone", tableName: "YPImagePickerLocalizable", source: source, developmentValue: "Done", comment: nil) }

      /// en translation: Filter
      ///
      /// Key: YPImagePickerFilter
      ///
      /// Locales: en
      var ypImagePickerFilter: RswiftResources.StringResource { .init(key: "YPImagePickerFilter", tableName: "YPImagePickerLocalizable", source: source, developmentValue: "Filter", comment: nil) }

      /// en translation: Library
      ///
      /// Key: YPImagePickerLibrary
      ///
      /// Locales: en
      var ypImagePickerLibrary: RswiftResources.StringResource { .init(key: "YPImagePickerLibrary", tableName: "YPImagePickerLocalizable", source: source, developmentValue: "Library", comment: nil) }

      /// en translation: Next
      ///
      /// Key: YPImagePickerNext
      ///
      /// Locales: en
      var ypImagePickerNext: RswiftResources.StringResource { .init(key: "YPImagePickerNext", tableName: "YPImagePickerLocalizable", source: source, developmentValue: "Next", comment: nil) }

      /// en translation: Ok
      ///
      /// Key: YPImagePickerOk
      ///
      /// Locales: en
      var ypImagePickerOk: RswiftResources.StringResource { .init(key: "YPImagePickerOk", tableName: "YPImagePickerLocalizable", source: source, developmentValue: "Ok", comment: nil) }

      /// en translation: Cancel
      ///
      /// Key: YPImagePickerPermissionDeniedPopupCancel
      ///
      /// Locales: en
      var ypImagePickerPermissionDeniedPopupCancel: RswiftResources.StringResource { .init(key: "YPImagePickerPermissionDeniedPopupCancel", tableName: "YPImagePickerLocalizable", source: source, developmentValue: "Cancel", comment: nil) }

      /// en translation: Grant Permission
      ///
      /// Key: YPImagePickerPermissionDeniedPopupGrantPermission
      ///
      /// Locales: en
      var ypImagePickerPermissionDeniedPopupGrantPermission: RswiftResources.StringResource { .init(key: "YPImagePickerPermissionDeniedPopupGrantPermission", tableName: "YPImagePickerLocalizable", source: source, developmentValue: "Grant Permission", comment: nil) }

      /// en translation: Please allow access
      ///
      /// Key: YPImagePickerPermissionDeniedPopupMessage
      ///
      /// Locales: en
      var ypImagePickerPermissionDeniedPopupMessage: RswiftResources.StringResource { .init(key: "YPImagePickerPermissionDeniedPopupMessage", tableName: "YPImagePickerLocalizable", source: source, developmentValue: "Please allow access", comment: nil) }

      /// en translation: Permission denied
      ///
      /// Key: YPImagePickerPermissionDeniedPopupTitle
      ///
      /// Locales: en
      var ypImagePickerPermissionDeniedPopupTitle: RswiftResources.StringResource { .init(key: "YPImagePickerPermissionDeniedPopupTitle", tableName: "YPImagePickerLocalizable", source: source, developmentValue: "Permission denied", comment: nil) }

      /// en translation: Photo
      ///
      /// Key: YPImagePickerPhoto
      ///
      /// Locales: en
      var ypImagePickerPhoto: RswiftResources.StringResource { .init(key: "YPImagePickerPhoto", tableName: "YPImagePickerLocalizable", source: source, developmentValue: "Photo", comment: nil) }

      /// en translation: Processing..
      ///
      /// Key: YPImagePickerProcessing
      ///
      /// Locales: en
      var ypImagePickerProcessing: RswiftResources.StringResource { .init(key: "YPImagePickerProcessing", tableName: "YPImagePickerLocalizable", source: source, developmentValue: "Processing..", comment: nil) }

      /// en translation: Save
      ///
      /// Key: YPImagePickerSave
      ///
      /// Locales: en
      var ypImagePickerSave: RswiftResources.StringResource { .init(key: "YPImagePickerSave", tableName: "YPImagePickerLocalizable", source: source, developmentValue: "Save", comment: nil) }

      /// en translation: Trim
      ///
      /// Key: YPImagePickerTrim
      ///
      /// Locales: en
      var ypImagePickerTrim: RswiftResources.StringResource { .init(key: "YPImagePickerTrim", tableName: "YPImagePickerLocalizable", source: source, developmentValue: "Trim", comment: nil) }

      /// en translation: Video
      ///
      /// Key: YPImagePickerVideo
      ///
      /// Locales: en
      var ypImagePickerVideo: RswiftResources.StringResource { .init(key: "YPImagePickerVideo", tableName: "YPImagePickerLocalizable", source: source, developmentValue: "Video", comment: nil) }

      /// en translation: Video duration
      ///
      /// Key: YPImagePickerVideoDurationTitle
      ///
      /// Locales: en
      var ypImagePickerVideoDurationTitle: RswiftResources.StringResource { .init(key: "YPImagePickerVideoDurationTitle", tableName: "YPImagePickerLocalizable", source: source, developmentValue: "Video duration", comment: nil) }

      /// en translation: Pick a video less than %@ seconds long
      ///
      /// Key: YPImagePickerVideoTooLong
      ///
      /// Locales: en
      var ypImagePickerVideoTooLong: RswiftResources.StringResource1<String> { .init(key: "YPImagePickerVideoTooLong", tableName: "YPImagePickerLocalizable", source: source, developmentValue: "Pick a video less than %@ seconds long", comment: nil) }

      /// en translation: The video must be at least %@ seconds
      ///
      /// Key: YPImagePickerVideoTooShort
      ///
      /// Locales: en
      var ypImagePickerVideoTooShort: RswiftResources.StringResource1<String> { .init(key: "YPImagePickerVideoTooShort", tableName: "YPImagePickerLocalizable", source: source, developmentValue: "The video must be at least %@ seconds", comment: nil) }

      /// en translation: The limit is %d photos or videos
      ///
      /// Key: YPImagePickerWarningItemsLimit
      ///
      /// Locales: en
      var ypImagePickerWarningItemsLimit: RswiftResources.StringResource1<Int> { .init(key: "YPImagePickerWarningItemsLimit", tableName: "YPImagePickerLocalizable", source: source, developmentValue: "The limit is %d photos or videos", comment: nil) }
    }
  }

  /// This `_R.color` struct is generated, and contains static references to 33 colors.
  struct color {
    let bundle: Foundation.Bundle

    /// Color `AccentColor`.
    var accentColor: RswiftResources.ColorResource { .init(name: "AccentColor", path: [], bundle: bundle) }

    /// Color `CharcoalGrey`.
    var charcoalGrey: RswiftResources.ColorResource { .init(name: "CharcoalGrey", path: [], bundle: bundle) }

    /// Color `EdYouGreen`.
    var edYouGreen: RswiftResources.ColorResource { .init(name: "EdYouGreen", path: [], bundle: bundle) }

    /// Color `EdYouLightGreen`.
    var edYouLightGreen: RswiftResources.ColorResource { .init(name: "EdYouLightGreen", path: [], bundle: bundle) }

    /// Color `NavigationColor`.
    var navigationColor: RswiftResources.ColorResource { .init(name: "NavigationColor", path: [], bundle: bundle) }

    /// Color `Onboarding_0`.
    var onboarding_0: RswiftResources.ColorResource { .init(name: "Onboarding_0", path: [], bundle: bundle) }

    /// Color `Onboarding_1`.
    var onboarding_1: RswiftResources.ColorResource { .init(name: "Onboarding_1", path: [], bundle: bundle) }

    /// Color `Onboarding_2`.
    var onboarding_2: RswiftResources.ColorResource { .init(name: "Onboarding_2", path: [], bundle: bundle) }

    /// Color `Onboarding_3`.
    var onboarding_3: RswiftResources.ColorResource { .init(name: "Onboarding_3", path: [], bundle: bundle) }

    /// Color `background`.
    var background: RswiftResources.ColorResource { .init(name: "background", path: [], bundle: bundle) }

    /// Color `background_dark`.
    var background_dark: RswiftResources.ColorResource { .init(name: "background_dark", path: [], bundle: bundle) }

    /// Color `background_light`.
    var background_light: RswiftResources.ColorResource { .init(name: "background_light", path: [], bundle: bundle) }

    /// Color `border`.
    var border: RswiftResources.ColorResource { .init(name: "border", path: [], bundle: bundle) }

    /// Color `borderColor`.
    var borderColor: RswiftResources.ColorResource { .init(name: "borderColor", path: [], bundle: bundle) }

    /// Color `buttons_bg_gray`.
    var buttons_bg_gray: RswiftResources.ColorResource { .init(name: "buttons_bg_gray", path: [], bundle: bundle) }

    /// Color `buttons_blue`.
    var buttons_blue: RswiftResources.ColorResource { .init(name: "buttons_blue", path: [], bundle: bundle) }

    /// Color `buttons_green`.
    var buttons_green: RswiftResources.ColorResource { .init(name: "buttons_green", path: [], bundle: bundle) }

    /// Color `dark_gray_text`.
    var dark_gray_text: RswiftResources.ColorResource { .init(name: "dark_gray_text", path: [], bundle: bundle) }

    /// Color `home_end`.
    var home_end: RswiftResources.ColorResource { .init(name: "home_end", path: [], bundle: bundle) }

    /// Color `home_start`.
    var home_start: RswiftResources.ColorResource { .init(name: "home_start", path: [], bundle: bundle) }

    /// Color `image_placeholder`.
    var image_placeholder: RswiftResources.ColorResource { .init(name: "image_placeholder", path: [], bundle: bundle) }

    /// Color `lightPlaceHolder`.
    var lightPlaceHolder: RswiftResources.ColorResource { .init(name: "lightPlaceHolder", path: [], bundle: bundle) }

    /// Color `like_disable`.
    var like_disable: RswiftResources.ColorResource { .init(name: "like_disable", path: [], bundle: bundle) }

    /// Color `like_enable`.
    var like_enable: RswiftResources.ColorResource { .init(name: "like_enable", path: [], bundle: bundle) }

    /// Color `messageBG`.
    var messageBG: RswiftResources.ColorResource { .init(name: "messageBG", path: [], bundle: bundle) }

    /// Color `qrCodeBackground`.
    var qrCodeBackground: RswiftResources.ColorResource { .init(name: "qrCodeBackground", path: [], bundle: bundle) }

    /// Color `qrCodeForeground`.
    var qrCodeForeground: RswiftResources.ColorResource { .init(name: "qrCodeForeground", path: [], bundle: bundle) }

    /// Color `reaction_background`.
    var reaction_background: RswiftResources.ColorResource { .init(name: "reaction_background", path: [], bundle: bundle) }

    /// Color `separator`.
    var separator: RswiftResources.ColorResource { .init(name: "separator", path: [], bundle: bundle) }

    /// Color `sub_title`.
    var sub_title: RswiftResources.ColorResource { .init(name: "sub_title", path: [], bundle: bundle) }

    /// Color `text_color`.
    var text_color: RswiftResources.ColorResource { .init(name: "text_color", path: [], bundle: bundle) }

    /// Color `title`.
    var title: RswiftResources.ColorResource { .init(name: "title", path: [], bundle: bundle) }

    /// Color `unReadMessages`.
    var unReadMessages: RswiftResources.ColorResource { .init(name: "unReadMessages", path: [], bundle: bundle) }
  }

  /// This `_R.image` struct is generated, and contains static references to 467 images.
  struct image {
    let bundle: Foundation.Bundle

    /// Image `About`.
    var about: RswiftResources.ImageResource { .init(name: "About", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Add`.
    var add: RswiftResources.ImageResource { .init(name: "Add", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Add Emoji`.
    var addEmoji: RswiftResources.ImageResource { .init(name: "Add Emoji", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Arrow-Gray`.
    var arrowGray: RswiftResources.ImageResource { .init(name: "Arrow-Gray", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Bin_Icon`.
    var bin_Icon: RswiftResources.ImageResource { .init(name: "Bin_Icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `BottomTransparentView`.
    var bottomTransparentView: RswiftResources.ImageResource { .init(name: "BottomTransparentView", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `CallButton`.
    var callButton: RswiftResources.ImageResource { .init(name: "CallButton", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `CallChatIcon`.
    var callChatIcon: RswiftResources.ImageResource { .init(name: "CallChatIcon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `CallMicMuteIcon`.
    var callMicMuteIcon: RswiftResources.ImageResource { .init(name: "CallMicMuteIcon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `CallMicUnMuteIcon`.
    var callMicUnMuteIcon: RswiftResources.ImageResource { .init(name: "CallMicUnMuteIcon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `CallMinimizeIcon`.
    var callMinimizeIcon: RswiftResources.ImageResource { .init(name: "CallMinimizeIcon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `CallSpeakerIcon`.
    var callSpeakerIcon: RswiftResources.ImageResource { .init(name: "CallSpeakerIcon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Categories`.
    var categories: RswiftResources.ImageResource { .init(name: "Categories", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Classes`.
    var classes: RswiftResources.ImageResource { .init(name: "Classes", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Cover`.
    var cover: RswiftResources.ImageResource { .init(name: "Cover", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Crown`.
    var crown: RswiftResources.ImageResource { .init(name: "Crown", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Crown1`.
    var crown1: RswiftResources.ImageResource { .init(name: "Crown1", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Crown2`.
    var crown2: RswiftResources.ImageResource { .init(name: "Crown2", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Crown3`.
    var crown3: RswiftResources.ImageResource { .init(name: "Crown3", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `CrownEmpty`.
    var crownEmpty: RswiftResources.ImageResource { .init(name: "CrownEmpty", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `CrownEmpty1`.
    var crownEmpty1: RswiftResources.ImageResource { .init(name: "CrownEmpty1", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `DELETE`.
    var deletE: RswiftResources.ImageResource { .init(name: "DELETE", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Dates`.
    var dates: RswiftResources.ImageResource { .init(name: "Dates", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `DocumentRectangle`.
    var documentRectangle: RswiftResources.ImageResource { .init(name: "DocumentRectangle", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Down`.
    var down: RswiftResources.ImageResource { .init(name: "Down", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Education`.
    var education: RswiftResources.ImageResource { .init(name: "Education", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Emoji`.
    var emoji: RswiftResources.ImageResource { .init(name: "Emoji", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `EmptyEvent`.
    var emptyEvent: RswiftResources.ImageResource { .init(name: "EmptyEvent", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `EmptyGroup`.
    var emptyGroup: RswiftResources.ImageResource { .init(name: "EmptyGroup", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `EmptyPhoto`.
    var emptyPhoto: RswiftResources.ImageResource { .init(name: "EmptyPhoto", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `EmptyPosts`.
    var emptyPosts: RswiftResources.ImageResource { .init(name: "EmptyPosts", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `EventUser1`.
    var eventUser1: RswiftResources.ImageResource { .init(name: "EventUser1", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `EventUser2`.
    var eventUser2: RswiftResources.ImageResource { .init(name: "EventUser2", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `EventUser3`.
    var eventUser3: RswiftResources.ImageResource { .init(name: "EventUser3", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Event_placeholder_Rectangle`.
    var event_placeholder_Rectangle: RswiftResources.ImageResource { .init(name: "Event_placeholder_Rectangle", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Friends-green`.
    var friendsGreen: RswiftResources.ImageResource { .init(name: "Friends-green", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Gold`.
    var gold: RswiftResources.ImageResource { .init(name: "Gold", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Gold1`.
    var gold1: RswiftResources.ImageResource { .init(name: "Gold1", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `GroupSelected`.
    var groupSelected: RswiftResources.ImageResource { .init(name: "GroupSelected", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `GroupUnSelected`.
    var groupUnSelected: RswiftResources.ImageResource { .init(name: "GroupUnSelected", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Invite-bro 1`.
    var inviteBro1: RswiftResources.ImageResource { .init(name: "Invite-bro 1", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Invite-cuate 1`.
    var inviteCuate1: RswiftResources.ImageResource { .init(name: "Invite-cuate 1", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Invite-cuate 2`.
    var inviteCuate2: RswiftResources.ImageResource { .init(name: "Invite-cuate 2", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Invite-cuate 3`.
    var inviteCuate3: RswiftResources.ImageResource { .init(name: "Invite-cuate 3", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Invite-cuate 4`.
    var inviteCuate4: RswiftResources.ImageResource { .init(name: "Invite-cuate 4", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `MessageButton`.
    var messageButton: RswiftResources.ImageResource { .init(name: "MessageButton", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Mobile logo Style`.
    var mobileLogoStyle: RswiftResources.ImageResource { .init(name: "Mobile logo Style", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `My-groups`.
    var myGroups: RswiftResources.ImageResource { .init(name: "My-groups", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Mythic`.
    var mythic: RswiftResources.ImageResource { .init(name: "Mythic", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `NavigationBack`.
    var navigationBack: RswiftResources.ImageResource { .init(name: "NavigationBack", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Online`.
    var online: RswiftResources.ImageResource { .init(name: "Online", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `PDF`.
    var pdF: RswiftResources.ImageResource { .init(name: "PDF", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `PaidEvents`.
    var paidEvents: RswiftResources.ImageResource { .init(name: "PaidEvents", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Photos`.
    var photos: RswiftResources.ImageResource { .init(name: "Photos", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Public-Groups`.
    var publicGroups: RswiftResources.ImageResource { .init(name: "Public-Groups", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `RankBG`.
    var rankBG: RswiftResources.ImageResource { .init(name: "RankBG", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `RankBG1`.
    var rankBG1: RswiftResources.ImageResource { .init(name: "RankBG1", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `RankTop`.
    var rankTop: RswiftResources.ImageResource { .init(name: "RankTop", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Recent-Posts`.
    var recentPosts: RswiftResources.ImageResource { .init(name: "Recent-Posts", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Rectangle`.
    var rectangle: RswiftResources.ImageResource { .init(name: "Rectangle", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `RoundCheck`.
    var roundCheck: RswiftResources.ImageResource { .init(name: "RoundCheck", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `RoundUNCheck`.
    var roundUNCheck: RswiftResources.ImageResource { .init(name: "RoundUNCheck", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Round_Back `.
    var round_Back: RswiftResources.ImageResource { .init(name: "Round_Back ", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Search`.
    var search: RswiftResources.ImageResource { .init(name: "Search", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Send`.
    var send: RswiftResources.ImageResource { .init(name: "Send", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Send-white`.
    var sendWhite: RswiftResources.ImageResource { .init(name: "Send-white", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Test1`.
    var test1: RswiftResources.ImageResource { .init(name: "Test1", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Text_img`.
    var text_img: RswiftResources.ImageResource { .init(name: "Text_img", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Uncheck_Image`.
    var uncheck_Image: RswiftResources.ImageResource { .init(name: "Uncheck_Image", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `University-Green`.
    var universityGreen: RswiftResources.ImageResource { .init(name: "University-Green", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `UploadDocument`.
    var uploadDocument: RswiftResources.ImageResource { .init(name: "UploadDocument", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `WELCOME ILLUSTRATION`.
    var welcomeillustratioN: RswiftResources.ImageResource { .init(name: "WELCOME ILLUSTRATION", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `White_Crop`.
    var white_Crop: RswiftResources.ImageResource { .init(name: "White_Crop", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `White_Pencil`.
    var white_Pencil: RswiftResources.ImageResource { .init(name: "White_Pencil", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `White_filter`.
    var white_filter: RswiftResources.ImageResource { .init(name: "White_filter", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Work-Green`.
    var workGreen: RswiftResources.ImageResource { .init(name: "Work-Green", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `acceptCallIcon`.
    var acceptCallIcon: RswiftResources.ImageResource { .init(name: "acceptCallIcon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `addIcon`.
    var addIcon: RswiftResources.ImageResource { .init(name: "addIcon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `addMemberGroupCall`.
    var addMemberGroupCall: RswiftResources.ImageResource { .init(name: "addMemberGroupCall", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `add_attachment_icon`.
    var add_attachment_icon: RswiftResources.ImageResource { .init(name: "add_attachment_icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `add_emoji_template`.
    var add_emoji_template: RswiftResources.ImageResource { .init(name: "add_emoji_template", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `add_icon`.
    var add_icon: RswiftResources.ImageResource { .init(name: "add_icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `add_new_story`.
    var add_new_story: RswiftResources.ImageResource { .init(name: "add_new_story", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `add_picture_icon`.
    var add_picture_icon: RswiftResources.ImageResource { .init(name: "add_picture_icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `add_reaction_icon`.
    var add_reaction_icon: RswiftResources.ImageResource { .init(name: "add_reaction_icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `add_story_icon`.
    var add_story_icon: RswiftResources.ImageResource { .init(name: "add_story_icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `alert-circle`.
    var alertCircle: RswiftResources.ImageResource { .init(name: "alert-circle", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `arrow-right`.
    var arrowRight: RswiftResources.ImageResource { .init(name: "arrow-right", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `at-sign`.
    var atSign: RswiftResources.ImageResource { .init(name: "at-sign", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `attach_file_icon`.
    var attach_file_icon: RswiftResources.ImageResource { .init(name: "attach_file_icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `attach_image_icon`.
    var attach_image_icon: RswiftResources.ImageResource { .init(name: "attach_image_icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `attach_image_template`.
    var attach_image_template: RswiftResources.ImageResource { .init(name: "attach_image_template", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `attach_photo_icon`.
    var attach_photo_icon: RswiftResources.ImageResource { .init(name: "attach_photo_icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `attach_video_icon`.
    var attach_video_icon: RswiftResources.ImageResource { .init(name: "attach_video_icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `attachment`.
    var attachment: RswiftResources.ImageResource { .init(name: "attachment", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `audioCall`.
    var audioCall: RswiftResources.ImageResource { .init(name: "audioCall", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `audioCallIcon`.
    var audioCallIcon: RswiftResources.ImageResource { .init(name: "audioCallIcon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `backButtonCall`.
    var backButtonCall: RswiftResources.ImageResource { .init(name: "backButtonCall", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `back_arrow_icon`.
    var back_arrow_icon: RswiftResources.ImageResource { .init(name: "back_arrow_icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `back_dark_icon`.
    var back_dark_icon: RswiftResources.ImageResource { .init(name: "back_dark_icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `backgroundAudioCallButton`.
    var backgroundAudioCallButton: RswiftResources.ImageResource { .init(name: "backgroundAudioCallButton", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `birth_day_icon`.
    var birth_day_icon: RswiftResources.ImageResource { .init(name: "birth_day_icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `black_image`.
    var black_image: RswiftResources.ImageResource { .init(name: "black_image", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `block_icon`.
    var block_icon: RswiftResources.ImageResource { .init(name: "block_icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `block_user`.
    var block_user: RswiftResources.ImageResource { .init(name: "block_user", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `blurBg`.
    var blurBg: RswiftResources.ImageResource { .init(name: "blurBg", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `calendar_icon`.
    var calendar_icon: RswiftResources.ImageResource { .init(name: "calendar_icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `calendar_icon_templateable`.
    var calendar_icon_templateable: RswiftResources.ImageResource { .init(name: "calendar_icon_templateable", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `cameraIcon`.
    var cameraIcon: RswiftResources.ImageResource { .init(name: "cameraIcon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `cameraIconGreen`.
    var cameraIconGreen: RswiftResources.ImageResource { .init(name: "cameraIconGreen", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `category_icon`.
    var category_icon: RswiftResources.ImageResource { .init(name: "category_icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `certificate`.
    var certificate: RswiftResources.ImageResource { .init(name: "certificate", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `chat_mute_icon`.
    var chat_mute_icon: RswiftResources.ImageResource { .init(name: "chat_mute_icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `chat_star_icon`.
    var chat_star_icon: RswiftResources.ImageResource { .init(name: "chat_star_icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `chat_white_icon_with_no_bg`.
    var chat_white_icon_with_no_bg: RswiftResources.ImageResource { .init(name: "chat_white_icon_with_no_bg", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `check_circle_outline`.
    var check_circle_outline: RswiftResources.ImageResource { .init(name: "check_circle_outline", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `clip_Icon`.
    var clip_Icon: RswiftResources.ImageResource { .init(name: "clip_Icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `clock-red-icon`.
    var clockRedIcon: RswiftResources.ImageResource { .init(name: "clock-red-icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `close_black`.
    var close_black: RswiftResources.ImageResource { .init(name: "close_black", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `close_grey`.
    var close_grey: RswiftResources.ImageResource { .init(name: "close_grey", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `comment`.
    var comment: RswiftResources.ImageResource { .init(name: "comment", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `comment1`.
    var comment1: RswiftResources.ImageResource { .init(name: "comment1", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `comment_icon_white`.
    var comment_icon_white: RswiftResources.ImageResource { .init(name: "comment_icon_white", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `copy_icon`.
    var copy_icon: RswiftResources.ImageResource { .init(name: "copy_icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `cornell_university_logo`.
    var cornell_university_logo: RswiftResources.ImageResource { .init(name: "cornell_university_logo", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `create_clip_black_Icon`.
    var create_clip_black_Icon: RswiftResources.ImageResource { .init(name: "create_clip_black_Icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `create_new_chat`.
    var create_new_chat: RswiftResources.ImageResource { .init(name: "create_new_chat", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `create_post_Icon`.
    var create_post_Icon: RswiftResources.ImageResource { .init(name: "create_post_Icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `create_post_icon`.
    var create_post_icon: RswiftResources.ImageResource { .init(name: "create_post_icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `cross_icon`.
    var cross_icon: RswiftResources.ImageResource { .init(name: "cross_icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `crownBackground`.
    var crownBackground: RswiftResources.ImageResource { .init(name: "crownBackground", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `deal_sms_icon`.
    var deal_sms_icon: RswiftResources.ImageResource { .init(name: "deal_sms_icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `defaultAvatar`.
    var defaultAvatar: RswiftResources.ImageResource { .init(name: "defaultAvatar", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `defaultGroupchatAvatar`.
    var defaultGroupchatAvatar: RswiftResources.ImageResource { .init(name: "defaultGroupchatAvatar", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `degree_icon`.
    var degree_icon: RswiftResources.ImageResource { .init(name: "degree_icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `delete icon`.
    var deleteIcon: RswiftResources.ImageResource { .init(name: "delete icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `delete-group-icon`.
    var deleteGroupIcon: RswiftResources.ImageResource { .init(name: "delete-group-icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `delete_chat_icon`.
    var delete_chat_icon: RswiftResources.ImageResource { .init(name: "delete_chat_icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `deliveredTicks`.
    var deliveredTicks: RswiftResources.ImageResource { .init(name: "deliveredTicks", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `disabledVideoIcon`.
    var disabledVideoIcon: RswiftResources.ImageResource { .init(name: "disabledVideoIcon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `dm_profile_holder`.
    var dm_profile_holder: RswiftResources.ImageResource { .init(name: "dm_profile_holder", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `documentIcon`.
    var documentIcon: RswiftResources.ImageResource { .init(name: "documentIcon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `dots_icon`.
    var dots_icon: RswiftResources.ImageResource { .init(name: "dots_icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `downloadIcon`.
    var downloadIcon: RswiftResources.ImageResource { .init(name: "downloadIcon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `drop_down_template`.
    var drop_down_template: RswiftResources.ImageResource { .init(name: "drop_down_template", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `edit-group`.
    var editGroup: RswiftResources.ImageResource { .init(name: "edit-group", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `editPencil`.
    var editPencil: RswiftResources.ImageResource { .init(name: "editPencil", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `editProfilePhotoIcon`.
    var editProfilePhotoIcon: RswiftResources.ImageResource { .init(name: "editProfilePhotoIcon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `edit_image`.
    var edit_image: RswiftResources.ImageResource { .init(name: "edit_image", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `edyou_logo_2`.
    var edyou_logo_2: RswiftResources.ImageResource { .init(name: "edyou_logo_2", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `edyou_logo_21`.
    var edyou_logo_21: RswiftResources.ImageResource { .init(name: "edyou_logo_21", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `edyou_logo_21 1`.
    var edyou_logo_211: RswiftResources.ImageResource { .init(name: "edyou_logo_21 1", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `edyou_text_logo`.
    var edyou_text_logo: RswiftResources.ImageResource { .init(name: "edyou_text_logo", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `emailwhiteIcon`.
    var emailwhiteIcon: RswiftResources.ImageResource { .init(name: "emailwhiteIcon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `empty_cirle`.
    var empty_cirle: RswiftResources.ImageResource { .init(name: "empty_cirle", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `empty_notification`.
    var empty_notification: RswiftResources.ImageResource { .init(name: "empty_notification", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `enabledVideoIcon`.
    var enabledVideoIcon: RswiftResources.ImageResource { .init(name: "enabledVideoIcon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `encryptionEnable`.
    var encryptionEnable: RswiftResources.ImageResource { .init(name: "encryptionEnable", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `endCall`.
    var endCall: RswiftResources.ImageResource { .init(name: "endCall", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `event_add_to_calender`.
    var event_add_to_calender: RswiftResources.ImageResource { .init(name: "event_add_to_calender", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `event_placeholder_square`.
    var event_placeholder_square: RswiftResources.ImageResource { .init(name: "event_placeholder_square", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `event_select`.
    var event_select: RswiftResources.ImageResource { .init(name: "event_select", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `event_share_icon`.
    var event_share_icon: RswiftResources.ImageResource { .init(name: "event_share_icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `event_unselect`.
    var event_unselect: RswiftResources.ImageResource { .init(name: "event_unselect", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `events`.
    var events: RswiftResources.ImageResource { .init(name: "events", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `events_icon`.
    var events_icon: RswiftResources.ImageResource { .init(name: "events_icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `events_tab_icon`.
    var events_tab_icon: RswiftResources.ImageResource { .init(name: "events_tab_icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `eye1`.
    var eye1: RswiftResources.ImageResource { .init(name: "eye1", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `fIlter_Icon`.
    var fIlter_Icon: RswiftResources.ImageResource { .init(name: "fIlter_Icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `facebook`.
    var facebook: RswiftResources.ImageResource { .init(name: "facebook", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `facebook_icon`.
    var facebook_icon: RswiftResources.ImageResource { .init(name: "facebook_icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `favourite_event`.
    var favourite_event: RswiftResources.ImageResource { .init(name: "favourite_event", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `favourite_event_filled`.
    var favourite_event_filled: RswiftResources.ImageResource { .init(name: "favourite_event_filled", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `feed_select`.
    var feed_select: RswiftResources.ImageResource { .init(name: "feed_select", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `feed_unselect`.
    var feed_unselect: RswiftResources.ImageResource { .init(name: "feed_unselect", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `field_of_study`.
    var field_of_study: RswiftResources.ImageResource { .init(name: "field_of_study", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `file_icon`.
    var file_icon: RswiftResources.ImageResource { .init(name: "file_icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `fill_circle`.
    var fill_circle: RswiftResources.ImageResource { .init(name: "fill_circle", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `filter_icon`.
    var filter_icon: RswiftResources.ImageResource { .init(name: "filter_icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `first`.
    var first: RswiftResources.ImageResource { .init(name: "first", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `football`.
    var football: RswiftResources.ImageResource { .init(name: "football", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `friends_grey_icon`.
    var friends_grey_icon: RswiftResources.ImageResource { .init(name: "friends_grey_icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `friends_tab_icon`.
    var friends_tab_icon: RswiftResources.ImageResource { .init(name: "friends_tab_icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `fullScreenIcon`.
    var fullScreenIcon: RswiftResources.ImageResource { .init(name: "fullScreenIcon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `gender_icon`.
    var gender_icon: RswiftResources.ImageResource { .init(name: "gender_icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `gmail_icon`.
    var gmail_icon: RswiftResources.ImageResource { .init(name: "gmail_icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `gray_add_picture_icon`.
    var gray_add_picture_icon: RswiftResources.ImageResource { .init(name: "gray_add_picture_icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `groupChatAddIcon`.
    var groupChatAddIcon: RswiftResources.ImageResource { .init(name: "groupChatAddIcon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `group_cover_placeholder`.
    var group_cover_placeholder: RswiftResources.ImageResource { .init(name: "group_cover_placeholder", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `group_image_placeholder`.
    var group_image_placeholder: RswiftResources.ImageResource { .init(name: "group_image_placeholder", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `group_placeHolder`.
    var group_placeHolder: RswiftResources.ImageResource { .init(name: "group_placeHolder", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `group_select`.
    var group_select: RswiftResources.ImageResource { .init(name: "group_select", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `group_unselect`.
    var group_unselect: RswiftResources.ImageResource { .init(name: "group_unselect", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `groups_icon`.
    var groups_icon: RswiftResources.ImageResource { .init(name: "groups_icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `groups_tab_icon`.
    var groups_tab_icon: RswiftResources.ImageResource { .init(name: "groups_tab_icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `gry_more_option 64`.
    var gry_more_option64: RswiftResources.ImageResource { .init(name: "gry_more_option 64", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `heart`.
    var heart: RswiftResources.ImageResource { .init(name: "heart", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `heart11`.
    var heart11: RswiftResources.ImageResource { .init(name: "heart11", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `heartEmpty`.
    var heartEmpty: RswiftResources.ImageResource { .init(name: "heartEmpty", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `heartFill`.
    var heartFill: RswiftResources.ImageResource { .init(name: "heartFill", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `heartFill11`.
    var heartFill11: RswiftResources.ImageResource { .init(name: "heartFill11", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `heart_selected`.
    var heart_selected: RswiftResources.ImageResource { .init(name: "heart_selected", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `heart_unselected`.
    var heart_unselected: RswiftResources.ImageResource { .init(name: "heart_unselected", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `hidepost`.
    var hidepost: RswiftResources.ImageResource { .init(name: "hidepost", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `home_favourite_icon`.
    var home_favourite_icon: RswiftResources.ImageResource { .init(name: "home_favourite_icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `home_fire_icon`.
    var home_fire_icon: RswiftResources.ImageResource { .init(name: "home_fire_icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `home_friends_icon`.
    var home_friends_icon: RswiftResources.ImageResource { .init(name: "home_friends_icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `home_group_icon`.
    var home_group_icon: RswiftResources.ImageResource { .init(name: "home_group_icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_add_reels`.
    var ic_add_reels: RswiftResources.ImageResource { .init(name: "ic_add_reels", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_calender`.
    var ic_calender: RswiftResources.ImageResource { .init(name: "ic_calender", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_category_close`.
    var ic_category_close: RswiftResources.ImageResource { .init(name: "ic_category_close", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_clock`.
    var ic_clock: RswiftResources.ImageResource { .init(name: "ic_clock", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_cover_photo_placeholder`.
    var ic_cover_photo_placeholder: RswiftResources.ImageResource { .init(name: "ic_cover_photo_placeholder", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_create_reels`.
    var ic_create_reels: RswiftResources.ImageResource { .init(name: "ic_create_reels", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_cross`.
    var ic_cross: RswiftResources.ImageResource { .init(name: "ic_cross", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_cross_rounded_filled`.
    var ic_cross_rounded_filled: RswiftResources.ImageResource { .init(name: "ic_cross_rounded_filled", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_cross_tinted`.
    var ic_cross_tinted: RswiftResources.ImageResource { .init(name: "ic_cross_tinted", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_down`.
    var ic_down: RswiftResources.ImageResource { .init(name: "ic_down", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_down_white`.
    var ic_down_white: RswiftResources.ImageResource { .init(name: "ic_down_white", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_emoji_count`.
    var ic_emoji_count: RswiftResources.ImageResource { .init(name: "ic_emoji_count", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_heart_add`.
    var ic_heart_add: RswiftResources.ImageResource { .init(name: "ic_heart_add", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_like_me`.
    var ic_like_me: RswiftResources.ImageResource { .init(name: "ic_like_me", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_location_marker`.
    var ic_location_marker: RswiftResources.ImageResource { .init(name: "ic_location_marker", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_lock_guest`.
    var ic_lock_guest: RswiftResources.ImageResource { .init(name: "ic_lock_guest", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_music`.
    var ic_music: RswiftResources.ImageResource { .init(name: "ic_music", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_pencil`.
    var ic_pencil: RswiftResources.ImageResource { .init(name: "ic_pencil", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_preview_play`.
    var ic_preview_play: RswiftResources.ImageResource { .init(name: "ic_preview_play", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_reel_video_bg`.
    var ic_reel_video_bg: RswiftResources.ImageResource { .init(name: "ic_reel_video_bg", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_reels_bottom`.
    var ic_reels_bottom: RswiftResources.ImageResource { .init(name: "ic_reels_bottom", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_send_reel`.
    var ic_send_reel: RswiftResources.ImageResource { .init(name: "ic_send_reel", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_tick`.
    var ic_tick: RswiftResources.ImageResource { .init(name: "ic_tick", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `icon-corner-up-right`.
    var iconCornerUpRight: RswiftResources.ImageResource { .init(name: "icon-corner-up-right", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `icon-leave`.
    var iconLeave: RswiftResources.ImageResource { .init(name: "icon-leave", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `icon-map-pin`.
    var iconMapPin: RswiftResources.ImageResource { .init(name: "icon-map-pin", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `icon-settings`.
    var iconSettings: RswiftResources.ImageResource { .init(name: "icon-settings", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `icon_calendar`.
    var icon_calendar: RswiftResources.ImageResource { .init(name: "icon_calendar", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `icon_fashion`.
    var icon_fashion: RswiftResources.ImageResource { .init(name: "icon_fashion", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `icon_video`.
    var icon_video: RswiftResources.ImageResource { .init(name: "icon_video", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `imagePlaceholder`.
    var imagePlaceholder: RswiftResources.ImageResource { .init(name: "imagePlaceholder", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `insta`.
    var insta: RswiftResources.ImageResource { .init(name: "insta", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `invite`.
    var invite: RswiftResources.ImageResource { .init(name: "invite", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `invite-billustration`.
    var inviteBillustration: RswiftResources.ImageResource { .init(name: "invite-billustration", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `invite-people-icon`.
    var invitePeopleIcon: RswiftResources.ImageResource { .init(name: "invite-people-icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `language_icon`.
    var language_icon: RswiftResources.ImageResource { .init(name: "language_icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `leaderboard`.
    var leaderboard: RswiftResources.ImageResource { .init(name: "leaderboard", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `link`.
    var link: RswiftResources.ImageResource { .init(name: "link", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `linkedin`.
    var linkedin: RswiftResources.ImageResource { .init(name: "linkedin", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `location_icon`.
    var location_icon: RswiftResources.ImageResource { .init(name: "location_icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `location_picker_pin`.
    var location_picker_pin: RswiftResources.ImageResource { .init(name: "location_picker_pin", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `location_picker_search`.
    var location_picker_search: RswiftResources.ImageResource { .init(name: "location_picker_search", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `lockProfile`.
    var lockProfile: RswiftResources.ImageResource { .init(name: "lockProfile", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `mailIcon`.
    var mailIcon: RswiftResources.ImageResource { .init(name: "mailIcon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `map-pin`.
    var mapPin: RswiftResources.ImageResource { .init(name: "map-pin", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `map-pin-icon`.
    var mapPinIcon: RswiftResources.ImageResource { .init(name: "map-pin-icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `member-request-icon`.
    var memberRequestIcon: RswiftResources.ImageResource { .init(name: "member-request-icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `menu1`.
    var menu1: RswiftResources.ImageResource { .init(name: "menu1", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `menu_calendar_icon`.
    var menu_calendar_icon: RswiftResources.ImageResource { .init(name: "menu_calendar_icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `menu_classes_icon`.
    var menu_classes_icon: RswiftResources.ImageResource { .init(name: "menu_classes_icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `menu_contact_us_icon`.
    var menu_contact_us_icon: RswiftResources.ImageResource { .init(name: "menu_contact_us_icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `menu_contactus`.
    var menu_contactus: RswiftResources.ImageResource { .init(name: "menu_contactus", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `menu_contactus1`.
    var menu_contactus1: RswiftResources.ImageResource { .init(name: "menu_contactus1", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `menu_deals_icon`.
    var menu_deals_icon: RswiftResources.ImageResource { .init(name: "menu_deals_icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `menu_edyou_store_icon`.
    var menu_edyou_store_icon: RswiftResources.ImageResource { .init(name: "menu_edyou_store_icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `menu_events`.
    var menu_events: RswiftResources.ImageResource { .init(name: "menu_events", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `menu_events_icon`.
    var menu_events_icon: RswiftResources.ImageResource { .init(name: "menu_events_icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `menu_favorites_icon`.
    var menu_favorites_icon: RswiftResources.ImageResource { .init(name: "menu_favorites_icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `menu_favourite`.
    var menu_favourite: RswiftResources.ImageResource { .init(name: "menu_favourite", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `menu_friends`.
    var menu_friends: RswiftResources.ImageResource { .init(name: "menu_friends", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `menu_friends_icon`.
    var menu_friends_icon: RswiftResources.ImageResource { .init(name: "menu_friends_icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `menu_groups`.
    var menu_groups: RswiftResources.ImageResource { .init(name: "menu_groups", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `menu_groups_icon`.
    var menu_groups_icon: RswiftResources.ImageResource { .init(name: "menu_groups_icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `menu_invite`.
    var menu_invite: RswiftResources.ImageResource { .init(name: "menu_invite", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `menu_leaderboard`.
    var menu_leaderboard: RswiftResources.ImageResource { .init(name: "menu_leaderboard", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `menu_leaderboard1`.
    var menu_leaderboard1: RswiftResources.ImageResource { .init(name: "menu_leaderboard1", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `menu_logout_icon`.
    var menu_logout_icon: RswiftResources.ImageResource { .init(name: "menu_logout_icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `menu_marketplace_icon`.
    var menu_marketplace_icon: RswiftResources.ImageResource { .init(name: "menu_marketplace_icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `menu_profile_icon`.
    var menu_profile_icon: RswiftResources.ImageResource { .init(name: "menu_profile_icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `menu_settings`.
    var menu_settings: RswiftResources.ImageResource { .init(name: "menu_settings", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `menu_settings1`.
    var menu_settings1: RswiftResources.ImageResource { .init(name: "menu_settings1", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `menu_settings_icon`.
    var menu_settings_icon: RswiftResources.ImageResource { .init(name: "menu_settings_icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `message.fill`.
    var messageFill: RswiftResources.ImageResource { .init(name: "message.fill", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `messageArchiving`.
    var messageArchiving: RswiftResources.ImageResource { .init(name: "messageArchiving", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `micIcon`.
    var micIcon: RswiftResources.ImageResource { .init(name: "micIcon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `more_icon`.
    var more_icon: RswiftResources.ImageResource { .init(name: "more_icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `more_option`.
    var more_option: RswiftResources.ImageResource { .init(name: "more_option", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `mute`.
    var mute: RswiftResources.ImageResource { .init(name: "mute", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `new_password_logo`.
    var new_password_logo: RswiftResources.ImageResource { .init(name: "new_password_logo", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `next_icon`.
    var next_icon: RswiftResources.ImageResource { .init(name: "next_icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `no_post_icon`.
    var no_post_icon: RswiftResources.ImageResource { .init(name: "no_post_icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `notificationImg`.
    var notificationImg: RswiftResources.ImageResource { .init(name: "notificationImg", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `notification_bell_icon`.
    var notification_bell_icon: RswiftResources.ImageResource { .init(name: "notification_bell_icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `onboarding_0`.
    var onboarding_0: RswiftResources.ImageResource { .init(name: "onboarding_0", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `onboarding_1`.
    var onboarding_1: RswiftResources.ImageResource { .init(name: "onboarding_1", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `onboarding_2`.
    var onboarding_2: RswiftResources.ImageResource { .init(name: "onboarding_2", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `onboarding_3`.
    var onboarding_3: RswiftResources.ImageResource { .init(name: "onboarding_3", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `participants`.
    var participants: RswiftResources.ImageResource { .init(name: "participants", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `passwordIcon`.
    var passwordIcon: RswiftResources.ImageResource { .init(name: "passwordIcon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `pause`.
    var pause: RswiftResources.ImageResource { .init(name: "pause", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `pdf_icon`.
    var pdf_icon: RswiftResources.ImageResource { .init(name: "pdf_icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `pending-post-icon`.
    var pendingPostIcon: RswiftResources.ImageResource { .init(name: "pending-post-icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `pending_posts`.
    var pending_posts: RswiftResources.ImageResource { .init(name: "pending_posts", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `people`.
    var people: RswiftResources.ImageResource { .init(name: "people", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `person.crop.circle.fill`.
    var personCropCircleFill: RswiftResources.ImageResource { .init(name: "person.crop.circle.fill", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `phone`.
    var phone: RswiftResources.ImageResource { .init(name: "phone", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `phone1`.
    var phone1: RswiftResources.ImageResource { .init(name: "phone1", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `photo_placeholder`.
    var photo_placeholder: RswiftResources.ImageResource { .init(name: "photo_placeholder", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `photo_select`.
    var photo_select: RswiftResources.ImageResource { .init(name: "photo_select", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `photo_unselect`.
    var photo_unselect: RswiftResources.ImageResource { .init(name: "photo_unselect", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `placeholder`.
    var placeholder: RswiftResources.ImageResource { .init(name: "placeholder", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `play_icon`.
    var play_icon: RswiftResources.ImageResource { .init(name: "play_icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `plus_icon_white`.
    var plus_icon_white: RswiftResources.ImageResource { .init(name: "plus_icon_white", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `post`.
    var post: RswiftResources.ImageResource { .init(name: "post", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `post_background_colors_Icon`.
    var post_background_colors_Icon: RswiftResources.ImageResource { .init(name: "post_background_colors_Icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `post_close_friends_Icon`.
    var post_close_friends_Icon: RswiftResources.ImageResource { .init(name: "post_close_friends_Icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `post_emoji_Icon_template`.
    var post_emoji_Icon_template: RswiftResources.ImageResource { .init(name: "post_emoji_Icon_template", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `post_files_Icon`.
    var post_files_Icon: RswiftResources.ImageResource { .init(name: "post_files_Icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `post_files_Icon_template`.
    var post_files_Icon_template: RswiftResources.ImageResource { .init(name: "post_files_Icon_template", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `post_friends_Icon`.
    var post_friends_Icon: RswiftResources.ImageResource { .init(name: "post_friends_Icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `post_friends_privacy_Icon`.
    var post_friends_privacy_Icon: RswiftResources.ImageResource { .init(name: "post_friends_privacy_Icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `post_group_Icon`.
    var post_group_Icon: RswiftResources.ImageResource { .init(name: "post_group_Icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `post_hidden`.
    var post_hidden: RswiftResources.ImageResource { .init(name: "post_hidden", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `post_image_dummy`.
    var post_image_dummy: RswiftResources.ImageResource { .init(name: "post_image_dummy", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `post_location_Icon`.
    var post_location_Icon: RswiftResources.ImageResource { .init(name: "post_location_Icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `post_more_options_Icon`.
    var post_more_options_Icon: RswiftResources.ImageResource { .init(name: "post_more_options_Icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `post_public_Icon`.
    var post_public_Icon: RswiftResources.ImageResource { .init(name: "post_public_Icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `post_school_only_Icon`.
    var post_school_only_Icon: RswiftResources.ImageResource { .init(name: "post_school_only_Icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `post_videos_Icon`.
    var post_videos_Icon: RswiftResources.ImageResource { .init(name: "post_videos_Icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `post_videos_Icon_template`.
    var post_videos_Icon_template: RswiftResources.ImageResource { .init(name: "post_videos_Icon_template", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `posts`.
    var posts: RswiftResources.ImageResource { .init(name: "posts", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `posts_tab_icon`.
    var posts_tab_icon: RswiftResources.ImageResource { .init(name: "posts_tab_icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `private_group_icon`.
    var private_group_icon: RswiftResources.ImageResource { .init(name: "private_group_icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `private_lock_icon`.
    var private_lock_icon: RswiftResources.ImageResource { .init(name: "private_lock_icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `profileImagePlaceHolder`.
    var profileImagePlaceHolder: RswiftResources.ImageResource { .init(name: "profileImagePlaceHolder", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `profile_image_dummy`.
    var profile_image_dummy: RswiftResources.ImageResource { .init(name: "profile_image_dummy", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `profile_select`.
    var profile_select: RswiftResources.ImageResource { .init(name: "profile_select", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `profile_unselect`.
    var profile_unselect: RswiftResources.ImageResource { .init(name: "profile_unselect", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `public_group_icon`.
    var public_group_icon: RswiftResources.ImageResource { .init(name: "public_group_icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `pushNotifications`.
    var pushNotifications: RswiftResources.ImageResource { .init(name: "pushNotifications", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `push_ico`.
    var push_ico: RswiftResources.ImageResource { .init(name: "push_ico", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `r1`.
    var r1: RswiftResources.ImageResource { .init(name: "r1", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `r2`.
    var r2: RswiftResources.ImageResource { .init(name: "r2", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `r3`.
    var r3: RswiftResources.ImageResource { .init(name: "r3", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `r4`.
    var r4: RswiftResources.ImageResource { .init(name: "r4", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `r5`.
    var r5: RswiftResources.ImageResource { .init(name: "r5", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `reaction`.
    var reaction: RswiftResources.ImageResource { .init(name: "reaction", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `reaction1`.
    var reaction1: RswiftResources.ImageResource { .init(name: "reaction1", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `read`.
    var read: RswiftResources.ImageResource { .init(name: "read", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `recordIcon`.
    var recordIcon: RswiftResources.ImageResource { .init(name: "recordIcon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `reelIcon`.
    var reelIcon: RswiftResources.ImageResource { .init(name: "reelIcon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `rejectCallIcon`.
    var rejectCallIcon: RswiftResources.ImageResource { .init(name: "rejectCallIcon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `replyIcon`.
    var replyIcon: RswiftResources.ImageResource { .init(name: "replyIcon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `reply_icon`.
    var reply_icon: RswiftResources.ImageResource { .init(name: "reply_icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `report`.
    var report: RswiftResources.ImageResource { .init(name: "report", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `save`.
    var save: RswiftResources.ImageResource { .init(name: "save", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `saved_chat_icon`.
    var saved_chat_icon: RswiftResources.ImageResource { .init(name: "saved_chat_icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `school_icon`.
    var school_icon: RswiftResources.ImageResource { .init(name: "school_icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `searchChatRoom`.
    var searchChatRoom: RswiftResources.ImageResource { .init(name: "searchChatRoom", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `searchNextIcon`.
    var searchNextIcon: RswiftResources.ImageResource { .init(name: "searchNextIcon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `search_icon`.
    var search_icon: RswiftResources.ImageResource { .init(name: "search_icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `second`.
    var second: RswiftResources.ImageResource { .init(name: "second", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `seenTick`.
    var seenTick: RswiftResources.ImageResource { .init(name: "seenTick", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `selectedCheck`.
    var selectedCheck: RswiftResources.ImageResource { .init(name: "selectedCheck", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `sendIcon`.
    var sendIcon: RswiftResources.ImageResource { .init(name: "sendIcon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `sendingStamp`.
    var sendingStamp: RswiftResources.ImageResource { .init(name: "sendingStamp", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `sentTicks`.
    var sentTicks: RswiftResources.ImageResource { .init(name: "sentTicks", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `setting_ico_birthdays`.
    var setting_ico_birthdays: RswiftResources.ImageResource { .init(name: "setting_ico_birthdays", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `setting_ico_comments`.
    var setting_ico_comments: RswiftResources.ImageResource { .init(name: "setting_ico_comments", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `setting_ico_events`.
    var setting_ico_events: RswiftResources.ImageResource { .init(name: "setting_ico_events", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `setting_ico_friends`.
    var setting_ico_friends: RswiftResources.ImageResource { .init(name: "setting_ico_friends", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `setting_ico_groups`.
    var setting_ico_groups: RswiftResources.ImageResource { .init(name: "setting_ico_groups", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `setting_ico_market`.
    var setting_ico_market: RswiftResources.ImageResource { .init(name: "setting_ico_market", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `setting_ico_others`.
    var setting_ico_others: RswiftResources.ImageResource { .init(name: "setting_ico_others", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `setting_ico_requests`.
    var setting_ico_requests: RswiftResources.ImageResource { .init(name: "setting_ico_requests", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `setting_ico_tag`.
    var setting_ico_tag: RswiftResources.ImageResource { .init(name: "setting_ico_tag", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `setting_icon_delete`.
    var setting_icon_delete: RswiftResources.ImageResource { .init(name: "setting_icon_delete", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `settings_block_icon`.
    var settings_block_icon: RswiftResources.ImageResource { .init(name: "settings_block_icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `settings_help_icon`.
    var settings_help_icon: RswiftResources.ImageResource { .init(name: "settings_help_icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `settings_location_icon`.
    var settings_location_icon: RswiftResources.ImageResource { .init(name: "settings_location_icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `settings_notification_icon`.
    var settings_notification_icon: RswiftResources.ImageResource { .init(name: "settings_notification_icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `settings_password_icon`.
    var settings_password_icon: RswiftResources.ImageResource { .init(name: "settings_password_icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `settings_post_icon`.
    var settings_post_icon: RswiftResources.ImageResource { .init(name: "settings_post_icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `settings_privacy_icon`.
    var settings_privacy_icon: RswiftResources.ImageResource { .init(name: "settings_privacy_icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `settings_share_icon`.
    var settings_share_icon: RswiftResources.ImageResource { .init(name: "settings_share_icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `settings_theme_icon`.
    var settings_theme_icon: RswiftResources.ImageResource { .init(name: "settings_theme_icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `settings_university_icon`.
    var settings_university_icon: RswiftResources.ImageResource { .init(name: "settings_university_icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `share`.
    var share: RswiftResources.ImageResource { .init(name: "share", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `share_icon`.
    var share_icon: RswiftResources.ImageResource { .init(name: "share_icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `sharelink`.
    var sharelink: RswiftResources.ImageResource { .init(name: "sharelink", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `showPasswordOff`.
    var showPasswordOff: RswiftResources.ImageResource { .init(name: "showPasswordOff", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `slideBackIcon`.
    var slideBackIcon: RswiftResources.ImageResource { .init(name: "slideBackIcon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `sms_icon`.
    var sms_icon: RswiftResources.ImageResource { .init(name: "sms_icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `speakerButtonIcon`.
    var speakerButtonIcon: RswiftResources.ImageResource { .init(name: "speakerButtonIcon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `speakerOnIcon`.
    var speakerOnIcon: RswiftResources.ImageResource { .init(name: "speakerOnIcon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `splash_bg`.
    var splash_bg: RswiftResources.ImageResource { .init(name: "splash_bg", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `splash_logo`.
    var splash_logo: RswiftResources.ImageResource { .init(name: "splash_logo", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `splash_pattern`.
    var splash_pattern: RswiftResources.ImageResource { .init(name: "splash_pattern", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `star`.
    var star: RswiftResources.ImageResource { .init(name: "star", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `story_Icon`.
    var story_Icon: RswiftResources.ImageResource { .init(name: "story_Icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `story_camera_icon`.
    var story_camera_icon: RswiftResources.ImageResource { .init(name: "story_camera_icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `story_image_icon`.
    var story_image_icon: RswiftResources.ImageResource { .init(name: "story_image_icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `story_text_icon`.
    var story_text_icon: RswiftResources.ImageResource { .init(name: "story_text_icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `story_video_icon`.
    var story_video_icon: RswiftResources.ImageResource { .init(name: "story_video_icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `switchCamera`.
    var switchCamera: RswiftResources.ImageResource { .init(name: "switchCamera", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `switchCameraCall`.
    var switchCameraCall: RswiftResources.ImageResource { .init(name: "switchCameraCall", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `tab_chat_icon`.
    var tab_chat_icon: RswiftResources.ImageResource { .init(name: "tab_chat_icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `tab_chat_selected_icon`.
    var tab_chat_selected_icon: RswiftResources.ImageResource { .init(name: "tab_chat_selected_icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `tab_edyou_icon`.
    var tab_edyou_icon: RswiftResources.ImageResource { .init(name: "tab_edyou_icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `tab_home_icon`.
    var tab_home_icon: RswiftResources.ImageResource { .init(name: "tab_home_icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `tab_home_selected_icon`.
    var tab_home_selected_icon: RswiftResources.ImageResource { .init(name: "tab_home_selected_icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `tab_menu_icon`.
    var tab_menu_icon: RswiftResources.ImageResource { .init(name: "tab_menu_icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `tab_menu_selected_icon`.
    var tab_menu_selected_icon: RswiftResources.ImageResource { .init(name: "tab_menu_selected_icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `tab_search_icon`.
    var tab_search_icon: RswiftResources.ImageResource { .init(name: "tab_search_icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `tab_search_selected_icon`.
    var tab_search_selected_icon: RswiftResources.ImageResource { .init(name: "tab_search_selected_icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `telephone`.
    var telephone: RswiftResources.ImageResource { .init(name: "telephone", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `tick_icon_white`.
    var tick_icon_white: RswiftResources.ImageResource { .init(name: "tick_icon_white", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `tigaseLogo`.
    var tigaseLogo: RswiftResources.ImageResource { .init(name: "tigaseLogo", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `tiktok`.
    var tiktok: RswiftResources.ImageResource { .init(name: "tiktok", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `tiktok1`.
    var tiktok1: RswiftResources.ImageResource { .init(name: "tiktok1", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `trash`.
    var trash: RswiftResources.ImageResource { .init(name: "trash", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `trash-icon`.
    var trashIcon: RswiftResources.ImageResource { .init(name: "trash-icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `trending`.
    var trending: RswiftResources.ImageResource { .init(name: "trending", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `twitter`.
    var twitter: RswiftResources.ImageResource { .init(name: "twitter", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `twitter_icon`.
    var twitter_icon: RswiftResources.ImageResource { .init(name: "twitter_icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `u communities`.
    var uCommunities: RswiftResources.ImageResource { .init(name: "u communities", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `unMuteGroupCall`.
    var unMuteGroupCall: RswiftResources.ImageResource { .init(name: "unMuteGroupCall", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `undo`.
    var undo: RswiftResources.ImageResource { .init(name: "undo", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `unfollow`.
    var unfollow: RswiftResources.ImageResource { .init(name: "unfollow", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `unfollow_user`.
    var unfollow_user: RswiftResources.ImageResource { .init(name: "unfollow_user", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `universityIcon`.
    var universityIcon: RswiftResources.ImageResource { .init(name: "universityIcon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `unselectedCheck`.
    var unselectedCheck: RswiftResources.ImageResource { .init(name: "unselectedCheck", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `user-invite`.
    var userInvite: RswiftResources.ImageResource { .init(name: "user-invite", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `user-plus`.
    var userPlus: RswiftResources.ImageResource { .init(name: "user-plus", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `userName`.
    var userName: RswiftResources.ImageResource { .init(name: "userName", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `users_green_icon`.
    var users_green_icon: RswiftResources.ImageResource { .init(name: "users_green_icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `users_icon`.
    var users_icon: RswiftResources.ImageResource { .init(name: "users_icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `verified`.
    var verified: RswiftResources.ImageResource { .init(name: "verified", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `verifyPassword`.
    var verifyPassword: RswiftResources.ImageResource { .init(name: "verifyPassword", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `video`.
    var video: RswiftResources.ImageResource { .init(name: "video", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `videoCall`.
    var videoCall: RswiftResources.ImageResource { .init(name: "videoCall", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `videoCallIcon`.
    var videoCallIcon: RswiftResources.ImageResource { .init(name: "videoCallIcon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `video_placeholder_icon`.
    var video_placeholder_icon: RswiftResources.ImageResource { .init(name: "video_placeholder_icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `view-profile`.
    var viewProfile: RswiftResources.ImageResource { .init(name: "view-profile", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `voiceNotePauseIcon`.
    var voiceNotePauseIcon: RswiftResources.ImageResource { .init(name: "voiceNotePauseIcon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `voiceNotePauseIconWhite`.
    var voiceNotePauseIconWhite: RswiftResources.ImageResource { .init(name: "voiceNotePauseIconWhite", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `voiceNotePlayIcon`.
    var voiceNotePlayIcon: RswiftResources.ImageResource { .init(name: "voiceNotePlayIcon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `voiceNotePlayIconWhite`.
    var voiceNotePlayIconWhite: RswiftResources.ImageResource { .init(name: "voiceNotePlayIconWhite", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `welcomeBg`.
    var welcomeBg: RswiftResources.ImageResource { .init(name: "welcomeBg", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `welcomeImg`.
    var welcomeImg: RswiftResources.ImageResource { .init(name: "welcomeImg", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `welcomeLogo`.
    var welcomeLogo: RswiftResources.ImageResource { .init(name: "welcomeLogo", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `whatsapp_icon`.
    var whatsapp_icon: RswiftResources.ImageResource { .init(name: "whatsapp_icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `work`.
    var work: RswiftResources.ImageResource { .init(name: "work", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `x-circle`.
    var xCircle: RswiftResources.ImageResource { .init(name: "x-circle", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `youtube`.
    var youtube: RswiftResources.ImageResource { .init(name: "youtube", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `yp_arrow_down`.
    var yp_arrow_down: RswiftResources.ImageResource { .init(name: "yp_arrow_down", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `yp_arrow_left`.
    var yp_arrow_left: RswiftResources.ImageResource { .init(name: "yp_arrow_left", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `yp_iconCapture`.
    var yp_iconCapture: RswiftResources.ImageResource { .init(name: "yp_iconCapture", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `yp_iconCrop`.
    var yp_iconCrop: RswiftResources.ImageResource { .init(name: "yp_iconCrop", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `yp_iconFlash_auto`.
    var yp_iconFlash_auto: RswiftResources.ImageResource { .init(name: "yp_iconFlash_auto", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `yp_iconFlash_off`.
    var yp_iconFlash_off: RswiftResources.ImageResource { .init(name: "yp_iconFlash_off", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `yp_iconFlash_on`.
    var yp_iconFlash_on: RswiftResources.ImageResource { .init(name: "yp_iconFlash_on", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `yp_iconLoop`.
    var yp_iconLoop: RswiftResources.ImageResource { .init(name: "yp_iconLoop", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `yp_iconVideoCapture`.
    var yp_iconVideoCapture: RswiftResources.ImageResource { .init(name: "yp_iconVideoCapture", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `yp_iconVideoCaptureRecording`.
    var yp_iconVideoCaptureRecording: RswiftResources.ImageResource { .init(name: "yp_iconVideoCaptureRecording", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `yp_multiple`.
    var yp_multiple: RswiftResources.ImageResource { .init(name: "yp_multiple", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `yp_multiple_colored`.
    var yp_multiple_colored: RswiftResources.ImageResource { .init(name: "yp_multiple_colored", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `yp_play`.
    var yp_play: RswiftResources.ImageResource { .init(name: "yp_play", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `yp_remove`.
    var yp_remove: RswiftResources.ImageResource { .init(name: "yp_remove", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }
  }

  /// This `_R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    let bundle: Foundation.Bundle
    var nsUserActivityTypes: nsUserActivityTypes { .init(bundle: bundle) }

    func nsUserActivityTypes(bundle: Foundation.Bundle) -> nsUserActivityTypes {
      .init(bundle: bundle)
    }

    struct nsUserActivityTypes {
      let bundle: Foundation.Bundle
      var inSendMessageIntent: String { bundle.infoDictionaryString(path: ["NSUserActivityTypes"], key: "INSendMessageIntent") ?? "INSendMessageIntent" }
      var inStartCallIntent: String { bundle.infoDictionaryString(path: ["NSUserActivityTypes"], key: "INStartCallIntent") ?? "INStartCallIntent" }
    }
  }

  /// This `_R.entitlements` struct is generated, and contains static references to 3 properties.
  struct entitlements {
    let apsEnvironment: String = "development"
    let comAppleDeveloperAssociatedDomains = comAppleDeveloperAssociatedDomains()
    let comAppleDeveloperUsernotificationsCommunication: Bool = true
    let comAppleSecurityApplicationGroups = comAppleSecurityApplicationGroups()
    let keychainAccessGroups = keychainAccessGroups()
    struct comAppleDeveloperAssociatedDomains {
      let applinksEdyouappCom: String = "applinks:edyouapp.com"
    }
    struct comAppleSecurityApplicationGroups {
      let groupEdyouMessengerShare: String = "group.edyouMessenger.share"
      let groupEdyouNotifications: String = "group.edyou.notifications"
      let groupEdyouShared: String = "group.edyou.shared"
    }
    struct keychainAccessGroups {
      let appIdentifierPrefixOrgEdyouMessengerMobile: String = "$(AppIdentifierPrefix)org.edyou.messenger.mobile"
    }
  }

  /// This `_R.font` struct is generated, and contains static references to 1 fonts.
  struct font: Sequence {
    let bundle: Foundation.Bundle

    /// Font `SFProDisplay-Semibold`.
    var sfProDisplaySemibold: RswiftResources.FontResource { .init(name: "SFProDisplay-Semibold", bundle: bundle, filename: "SFProDisplaySemibold.ttf") }

    func makeIterator() -> IndexingIterator<[RswiftResources.FontResource]> {
      [sfProDisplaySemibold].makeIterator()
    }
    func validate() throws {
      for font in self {
        if !font.canBeLoaded() { throw RswiftResources.ValidationError("[R.swift] Font '\(font.name)' could not be loaded, is '\(font.filename)' added to the UIAppFonts array in this targets Info.plist?") }
      }
    }
  }

  /// This `_R.file` struct is generated, and contains static references to 320 resource files.
  struct file {
    let bundle: Foundation.Bundle

    /// Resource file `GoogleService-Info.plist`.
    var googleServiceInfoPlist: RswiftResources.FileResource { .init(name: "GoogleService-Info", pathExtension: "plist", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `HXPHPicker.bundle`.
    var hxphPickerBundle: RswiftResources.FileResource { .init(name: "HXPHPicker", pathExtension: "bundle", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `SFPRODISPLAYBLACKITALIC.OTF`.
    var sfprodisplayblackitalicotF: RswiftResources.FileResource { .init(name: "SFPRODISPLAYBLACKITALIC", pathExtension: "OTF", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `SFPRODISPLAYBOLD.OTF`.
    var sfprodisplayboldotF: RswiftResources.FileResource { .init(name: "SFPRODISPLAYBOLD", pathExtension: "OTF", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `SFPRODISPLAYHEAVYITALIC.OTF`.
    var sfprodisplayheavyitalicotF: RswiftResources.FileResource { .init(name: "SFPRODISPLAYHEAVYITALIC", pathExtension: "OTF", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `SFPRODISPLAYLIGHTITALIC.OTF`.
    var sfprodisplaylightitalicotF: RswiftResources.FileResource { .init(name: "SFPRODISPLAYLIGHTITALIC", pathExtension: "OTF", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `SFPRODISPLAYMEDIUM.OTF`.
    var sfprodisplaymediumotF: RswiftResources.FileResource { .init(name: "SFPRODISPLAYMEDIUM", pathExtension: "OTF", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `SFPRODISPLAYREGULAR.OTF`.
    var sfprodisplayregularotF: RswiftResources.FileResource { .init(name: "SFPRODISPLAYREGULAR", pathExtension: "OTF", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `SFPRODISPLAYSEMIBOLDITALIC.OTF`.
    var sfprodisplaysemibolditalicotF: RswiftResources.FileResource { .init(name: "SFPRODISPLAYSEMIBOLDITALIC", pathExtension: "OTF", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `SFPRODISPLAYTHINITALIC.OTF`.
    var sfprodisplaythinitalicotF: RswiftResources.FileResource { .init(name: "SFPRODISPLAYTHINITALIC", pathExtension: "OTF", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `SFProDisplaySemibold.ttf`.
    var sfProDisplaySemiboldTtf: RswiftResources.FileResource { .init(name: "SFProDisplaySemibold", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `af.xml`.
    var afXml: RswiftResources.FileResource { .init(name: "af", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `af_derived.xml`.
    var af_derivedXml: RswiftResources.FileResource { .init(name: "af_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `am.xml`.
    var amXml: RswiftResources.FileResource { .init(name: "am", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `am_derived.xml`.
    var am_derivedXml: RswiftResources.FileResource { .init(name: "am_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `angryAnim.json`.
    var angryAnimJson: RswiftResources.FileResource { .init(name: "angryAnim", pathExtension: "json", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `ar.xml`.
    var arXml: RswiftResources.FileResource { .init(name: "ar", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `ar_SA.xml`.
    var ar_SAXml: RswiftResources.FileResource { .init(name: "ar_SA", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `ar_SA_derived.xml`.
    var ar_SA_derivedXml: RswiftResources.FileResource { .init(name: "ar_SA_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `ar_derived.xml`.
    var ar_derivedXml: RswiftResources.FileResource { .init(name: "ar_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `as.xml`.
    var asXml: RswiftResources.FileResource { .init(name: "as", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `as_derived.xml`.
    var as_derivedXml: RswiftResources.FileResource { .init(name: "as_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `ast.xml`.
    var astXml: RswiftResources.FileResource { .init(name: "ast", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `ast_derived.xml`.
    var ast_derivedXml: RswiftResources.FileResource { .init(name: "ast_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `az.xml`.
    var azXml: RswiftResources.FileResource { .init(name: "az", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `az_derived.xml`.
    var az_derivedXml: RswiftResources.FileResource { .init(name: "az_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `be.xml`.
    var beXml: RswiftResources.FileResource { .init(name: "be", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `be_derived.xml`.
    var be_derivedXml: RswiftResources.FileResource { .init(name: "be_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `bg.xml`.
    var bgXml: RswiftResources.FileResource { .init(name: "bg", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `bg_derived.xml`.
    var bg_derivedXml: RswiftResources.FileResource { .init(name: "bg_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `bn.xml`.
    var bnXml: RswiftResources.FileResource { .init(name: "bn", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `bn_derived.xml`.
    var bn_derivedXml: RswiftResources.FileResource { .init(name: "bn_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `br.xml`.
    var brXml: RswiftResources.FileResource { .init(name: "br", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `br_derived.xml`.
    var br_derivedXml: RswiftResources.FileResource { .init(name: "br_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `bs.xml`.
    var bsXml: RswiftResources.FileResource { .init(name: "bs", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `bs_derived.xml`.
    var bs_derivedXml: RswiftResources.FileResource { .init(name: "bs_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `busyTune.mp3`.
    var busyTuneMp3: RswiftResources.FileResource { .init(name: "busyTune", pathExtension: "mp3", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `ca.xml`.
    var caXml: RswiftResources.FileResource { .init(name: "ca", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `ca_derived.xml`.
    var ca_derivedXml: RswiftResources.FileResource { .init(name: "ca_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `ccp.xml`.
    var ccpXml: RswiftResources.FileResource { .init(name: "ccp", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `ccp_derived.xml`.
    var ccp_derivedXml: RswiftResources.FileResource { .init(name: "ccp_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `ceb.xml`.
    var cebXml: RswiftResources.FileResource { .init(name: "ceb", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `ceb_derived.xml`.
    var ceb_derivedXml: RswiftResources.FileResource { .init(name: "ceb_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `chr.xml`.
    var chrXml: RswiftResources.FileResource { .init(name: "chr", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `chr_derived.xml`.
    var chr_derivedXml: RswiftResources.FileResource { .init(name: "chr_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `ckb.xml`.
    var ckbXml: RswiftResources.FileResource { .init(name: "ckb", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `ckb_derived.xml`.
    var ckb_derivedXml: RswiftResources.FileResource { .init(name: "ckb_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `cs.xml`.
    var csXml: RswiftResources.FileResource { .init(name: "cs", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `cs_derived.xml`.
    var cs_derivedXml: RswiftResources.FileResource { .init(name: "cs_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `cy.xml`.
    var cyXml: RswiftResources.FileResource { .init(name: "cy", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `cy_derived.xml`.
    var cy_derivedXml: RswiftResources.FileResource { .init(name: "cy_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `da.xml`.
    var daXml: RswiftResources.FileResource { .init(name: "da", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `da_derived.xml`.
    var da_derivedXml: RswiftResources.FileResource { .init(name: "da_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `db-schema-1.sql`.
    var dbSchema1Sql: RswiftResources.FileResource { .init(name: "db-schema-1", pathExtension: "sql", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `db-schema-10.sql`.
    var dbSchema10Sql: RswiftResources.FileResource { .init(name: "db-schema-10", pathExtension: "sql", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `db-schema-11.sql`.
    var dbSchema11Sql: RswiftResources.FileResource { .init(name: "db-schema-11", pathExtension: "sql", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `db-schema-12.sql`.
    var dbSchema12Sql: RswiftResources.FileResource { .init(name: "db-schema-12", pathExtension: "sql", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `db-schema-13.sql`.
    var dbSchema13Sql: RswiftResources.FileResource { .init(name: "db-schema-13", pathExtension: "sql", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `db-schema-14.sql`.
    var dbSchema14Sql: RswiftResources.FileResource { .init(name: "db-schema-14", pathExtension: "sql", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `db-schema-2.sql`.
    var dbSchema2Sql: RswiftResources.FileResource { .init(name: "db-schema-2", pathExtension: "sql", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `db-schema-3.sql`.
    var dbSchema3Sql: RswiftResources.FileResource { .init(name: "db-schema-3", pathExtension: "sql", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `db-schema-4.sql`.
    var dbSchema4Sql: RswiftResources.FileResource { .init(name: "db-schema-4", pathExtension: "sql", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `db-schema-5.sql`.
    var dbSchema5Sql: RswiftResources.FileResource { .init(name: "db-schema-5", pathExtension: "sql", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `db-schema-6.sql`.
    var dbSchema6Sql: RswiftResources.FileResource { .init(name: "db-schema-6", pathExtension: "sql", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `db-schema-7.sql`.
    var dbSchema7Sql: RswiftResources.FileResource { .init(name: "db-schema-7", pathExtension: "sql", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `db-schema-8.sql`.
    var dbSchema8Sql: RswiftResources.FileResource { .init(name: "db-schema-8", pathExtension: "sql", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `db-schema-9.sql`.
    var dbSchema9Sql: RswiftResources.FileResource { .init(name: "db-schema-9", pathExtension: "sql", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `de.xml`.
    var deXml: RswiftResources.FileResource { .init(name: "de", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `de_CH.xml`.
    var de_CHXml: RswiftResources.FileResource { .init(name: "de_CH", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `de_CH_derived.xml`.
    var de_CH_derivedXml: RswiftResources.FileResource { .init(name: "de_CH_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `de_derived.xml`.
    var de_derivedXml: RswiftResources.FileResource { .init(name: "de_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `dialTune.mp3`.
    var dialTuneMp3: RswiftResources.FileResource { .init(name: "dialTune", pathExtension: "mp3", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `doi.xml`.
    var doiXml: RswiftResources.FileResource { .init(name: "doi", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `doi_derived.xml`.
    var doi_derivedXml: RswiftResources.FileResource { .init(name: "doi_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `dsb.xml`.
    var dsbXml: RswiftResources.FileResource { .init(name: "dsb", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `dsb_derived.xml`.
    var dsb_derivedXml: RswiftResources.FileResource { .init(name: "dsb_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `el.xml`.
    var elXml: RswiftResources.FileResource { .init(name: "el", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `el_derived.xml`.
    var el_derivedXml: RswiftResources.FileResource { .init(name: "el_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `emoji-test.txt`.
    var emojiTestTxt: RswiftResources.FileResource { .init(name: "emoji-test", pathExtension: "txt", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `en.xml`.
    var enXml: RswiftResources.FileResource { .init(name: "en", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `en_001.xml`.
    var en_001Xml: RswiftResources.FileResource { .init(name: "en_001", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `en_001_derived.xml`.
    var en_001_derivedXml: RswiftResources.FileResource { .init(name: "en_001_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `en_AU.xml`.
    var en_AUXml: RswiftResources.FileResource { .init(name: "en_AU", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `en_AU_derived.xml`.
    var en_AU_derivedXml: RswiftResources.FileResource { .init(name: "en_AU_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `en_CA.xml`.
    var en_CAXml: RswiftResources.FileResource { .init(name: "en_CA", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `en_CA_derived.xml`.
    var en_CA_derivedXml: RswiftResources.FileResource { .init(name: "en_CA_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `en_GB.xml`.
    var en_GBXml: RswiftResources.FileResource { .init(name: "en_GB", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `en_GB_derived.xml`.
    var en_GB_derivedXml: RswiftResources.FileResource { .init(name: "en_GB_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `en_IN.xml`.
    var en_INXml: RswiftResources.FileResource { .init(name: "en_IN", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `en_IN_derived.xml`.
    var en_IN_derivedXml: RswiftResources.FileResource { .init(name: "en_IN_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `en_derived.xml`.
    var en_derivedXml: RswiftResources.FileResource { .init(name: "en_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `es.xml`.
    var esXml: RswiftResources.FileResource { .init(name: "es", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `es_419.xml`.
    var es_419Xml: RswiftResources.FileResource { .init(name: "es_419", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `es_419_derived.xml`.
    var es_419_derivedXml: RswiftResources.FileResource { .init(name: "es_419_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `es_MX.xml`.
    var es_MXXml: RswiftResources.FileResource { .init(name: "es_MX", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `es_MX_derived.xml`.
    var es_MX_derivedXml: RswiftResources.FileResource { .init(name: "es_MX_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `es_US.xml`.
    var es_USXml: RswiftResources.FileResource { .init(name: "es_US", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `es_US_derived.xml`.
    var es_US_derivedXml: RswiftResources.FileResource { .init(name: "es_US_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `es_derived.xml`.
    var es_derivedXml: RswiftResources.FileResource { .init(name: "es_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `et.xml`.
    var etXml: RswiftResources.FileResource { .init(name: "et", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `et_derived.xml`.
    var et_derivedXml: RswiftResources.FileResource { .init(name: "et_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `eu.xml`.
    var euXml: RswiftResources.FileResource { .init(name: "eu", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `eu_derived.xml`.
    var eu_derivedXml: RswiftResources.FileResource { .init(name: "eu_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `fa.xml`.
    var faXml: RswiftResources.FileResource { .init(name: "fa", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `fa_derived.xml`.
    var fa_derivedXml: RswiftResources.FileResource { .init(name: "fa_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `fi.xml`.
    var fiXml: RswiftResources.FileResource { .init(name: "fi", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `fi_derived.xml`.
    var fi_derivedXml: RswiftResources.FileResource { .init(name: "fi_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `fil.xml`.
    var filXml: RswiftResources.FileResource { .init(name: "fil", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `fil_derived.xml`.
    var fil_derivedXml: RswiftResources.FileResource { .init(name: "fil_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `fo.xml`.
    var foXml: RswiftResources.FileResource { .init(name: "fo", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `fo_derived.xml`.
    var fo_derivedXml: RswiftResources.FileResource { .init(name: "fo_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `fr.xml`.
    var frXml: RswiftResources.FileResource { .init(name: "fr", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `fr_CA.xml`.
    var fr_CAXml: RswiftResources.FileResource { .init(name: "fr_CA", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `fr_CA_derived.xml`.
    var fr_CA_derivedXml: RswiftResources.FileResource { .init(name: "fr_CA_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `fr_derived.xml`.
    var fr_derivedXml: RswiftResources.FileResource { .init(name: "fr_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `ga.xml`.
    var gaXml: RswiftResources.FileResource { .init(name: "ga", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `ga_derived.xml`.
    var ga_derivedXml: RswiftResources.FileResource { .init(name: "ga_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `gd.xml`.
    var gdXml: RswiftResources.FileResource { .init(name: "gd", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `gd_derived.xml`.
    var gd_derivedXml: RswiftResources.FileResource { .init(name: "gd_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `gl.xml`.
    var glXml: RswiftResources.FileResource { .init(name: "gl", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `gl_derived.xml`.
    var gl_derivedXml: RswiftResources.FileResource { .init(name: "gl_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `gu.xml`.
    var guXml: RswiftResources.FileResource { .init(name: "gu", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `gu_derived.xml`.
    var gu_derivedXml: RswiftResources.FileResource { .init(name: "gu_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `ha.xml`.
    var haXml: RswiftResources.FileResource { .init(name: "ha", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `ha_NE.xml`.
    var ha_NEXml: RswiftResources.FileResource { .init(name: "ha_NE", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `ha_derived.xml`.
    var ha_derivedXml: RswiftResources.FileResource { .init(name: "ha_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `he.xml`.
    var heXml: RswiftResources.FileResource { .init(name: "he", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `he_derived.xml`.
    var he_derivedXml: RswiftResources.FileResource { .init(name: "he_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `heart1.json`.
    var heart1Json: RswiftResources.FileResource { .init(name: "heart1", pathExtension: "json", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `hi.xml`.
    var hiXml: RswiftResources.FileResource { .init(name: "hi", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `hi_derived.xml`.
    var hi_derivedXml: RswiftResources.FileResource { .init(name: "hi_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `hr.xml`.
    var hrXml: RswiftResources.FileResource { .init(name: "hr", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `hr_derived.xml`.
    var hr_derivedXml: RswiftResources.FileResource { .init(name: "hr_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `hsb.xml`.
    var hsbXml: RswiftResources.FileResource { .init(name: "hsb", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `hsb_derived.xml`.
    var hsb_derivedXml: RswiftResources.FileResource { .init(name: "hsb_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `hu.xml`.
    var huXml: RswiftResources.FileResource { .init(name: "hu", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `hu_derived.xml`.
    var hu_derivedXml: RswiftResources.FileResource { .init(name: "hu_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `hy.xml`.
    var hyXml: RswiftResources.FileResource { .init(name: "hy", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `hy_derived.xml`.
    var hy_derivedXml: RswiftResources.FileResource { .init(name: "hy_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `ia.xml`.
    var iaXml: RswiftResources.FileResource { .init(name: "ia", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `ia_derived.xml`.
    var ia_derivedXml: RswiftResources.FileResource { .init(name: "ia_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `id.xml`.
    var idXml: RswiftResources.FileResource { .init(name: "id", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `id_derived.xml`.
    var id_derivedXml: RswiftResources.FileResource { .init(name: "id_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `ig.xml`.
    var igXml: RswiftResources.FileResource { .init(name: "ig", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `ig_derived.xml`.
    var ig_derivedXml: RswiftResources.FileResource { .init(name: "ig_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `is.xml`.
    var isXml: RswiftResources.FileResource { .init(name: "is", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `is_derived.xml`.
    var is_derivedXml: RswiftResources.FileResource { .init(name: "is_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `it.xml`.
    var itXml: RswiftResources.FileResource { .init(name: "it", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `it_derived.xml`.
    var it_derivedXml: RswiftResources.FileResource { .init(name: "it_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `ja.xml`.
    var jaXml: RswiftResources.FileResource { .init(name: "ja", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `ja_derived.xml`.
    var ja_derivedXml: RswiftResources.FileResource { .init(name: "ja_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `jv.xml`.
    var jvXml: RswiftResources.FileResource { .init(name: "jv", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `jv_derived.xml`.
    var jv_derivedXml: RswiftResources.FileResource { .init(name: "jv_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `ka.xml`.
    var kaXml: RswiftResources.FileResource { .init(name: "ka", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `ka_derived.xml`.
    var ka_derivedXml: RswiftResources.FileResource { .init(name: "ka_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `kab.xml`.
    var kabXml: RswiftResources.FileResource { .init(name: "kab", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `kab_derived.xml`.
    var kab_derivedXml: RswiftResources.FileResource { .init(name: "kab_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `kk.xml`.
    var kkXml: RswiftResources.FileResource { .init(name: "kk", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `kk_derived.xml`.
    var kk_derivedXml: RswiftResources.FileResource { .init(name: "kk_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `kl.xml`.
    var klXml: RswiftResources.FileResource { .init(name: "kl", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `km.xml`.
    var kmXml: RswiftResources.FileResource { .init(name: "km", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `km_derived.xml`.
    var km_derivedXml: RswiftResources.FileResource { .init(name: "km_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `kn.xml`.
    var knXml: RswiftResources.FileResource { .init(name: "kn", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `kn_derived.xml`.
    var kn_derivedXml: RswiftResources.FileResource { .init(name: "kn_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `ko.xml`.
    var koXml: RswiftResources.FileResource { .init(name: "ko", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `ko_derived.xml`.
    var ko_derivedXml: RswiftResources.FileResource { .init(name: "ko_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `kok.xml`.
    var kokXml: RswiftResources.FileResource { .init(name: "kok", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `kok_derived.xml`.
    var kok_derivedXml: RswiftResources.FileResource { .init(name: "kok_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `ku.xml`.
    var kuXml: RswiftResources.FileResource { .init(name: "ku", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `ky.xml`.
    var kyXml: RswiftResources.FileResource { .init(name: "ky", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `ky_derived.xml`.
    var ky_derivedXml: RswiftResources.FileResource { .init(name: "ky_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `lb.xml`.
    var lbXml: RswiftResources.FileResource { .init(name: "lb", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `lb_derived.xml`.
    var lb_derivedXml: RswiftResources.FileResource { .init(name: "lb_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `like.json`.
    var likeJson: RswiftResources.FileResource { .init(name: "like", pathExtension: "json", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `lo.xml`.
    var loXml: RswiftResources.FileResource { .init(name: "lo", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `lo_derived.xml`.
    var lo_derivedXml: RswiftResources.FileResource { .init(name: "lo_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `lt.xml`.
    var ltXml: RswiftResources.FileResource { .init(name: "lt", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `lt_derived.xml`.
    var lt_derivedXml: RswiftResources.FileResource { .init(name: "lt_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `lv.xml`.
    var lvXml: RswiftResources.FileResource { .init(name: "lv", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `lv_derived.xml`.
    var lv_derivedXml: RswiftResources.FileResource { .init(name: "lv_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `mai.xml`.
    var maiXml: RswiftResources.FileResource { .init(name: "mai", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `mai_derived.xml`.
    var mai_derivedXml: RswiftResources.FileResource { .init(name: "mai_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `mi.xml`.
    var miXml: RswiftResources.FileResource { .init(name: "mi", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `mi_derived.xml`.
    var mi_derivedXml: RswiftResources.FileResource { .init(name: "mi_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `mk.xml`.
    var mkXml: RswiftResources.FileResource { .init(name: "mk", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `mk_derived.xml`.
    var mk_derivedXml: RswiftResources.FileResource { .init(name: "mk_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `ml.xml`.
    var mlXml: RswiftResources.FileResource { .init(name: "ml", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `ml_derived.xml`.
    var ml_derivedXml: RswiftResources.FileResource { .init(name: "ml_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `mn.xml`.
    var mnXml: RswiftResources.FileResource { .init(name: "mn", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `mn_derived.xml`.
    var mn_derivedXml: RswiftResources.FileResource { .init(name: "mn_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `mni.xml`.
    var mniXml: RswiftResources.FileResource { .init(name: "mni", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `mni_derived.xml`.
    var mni_derivedXml: RswiftResources.FileResource { .init(name: "mni_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `money.json`.
    var moneyJson: RswiftResources.FileResource { .init(name: "money", pathExtension: "json", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `mr.xml`.
    var mrXml: RswiftResources.FileResource { .init(name: "mr", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `mr_derived.xml`.
    var mr_derivedXml: RswiftResources.FileResource { .init(name: "mr_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `ms.xml`.
    var msXml: RswiftResources.FileResource { .init(name: "ms", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `ms_derived.xml`.
    var ms_derivedXml: RswiftResources.FileResource { .init(name: "ms_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `mt.xml`.
    var mtXml: RswiftResources.FileResource { .init(name: "mt", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `mt_derived.xml`.
    var mt_derivedXml: RswiftResources.FileResource { .init(name: "mt_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `my.xml`.
    var myXml: RswiftResources.FileResource { .init(name: "my", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `my_derived.xml`.
    var my_derivedXml: RswiftResources.FileResource { .init(name: "my_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `ne.xml`.
    var neXml: RswiftResources.FileResource { .init(name: "ne", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `ne_derived.xml`.
    var ne_derivedXml: RswiftResources.FileResource { .init(name: "ne_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `nl.xml`.
    var nlXml: RswiftResources.FileResource { .init(name: "nl", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `nl_derived.xml`.
    var nl_derivedXml: RswiftResources.FileResource { .init(name: "nl_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `nn.xml`.
    var nnXml: RswiftResources.FileResource { .init(name: "nn", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `nn_derived.xml`.
    var nn_derivedXml: RswiftResources.FileResource { .init(name: "nn_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `no.xml`.
    var noXml: RswiftResources.FileResource { .init(name: "no", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `no_derived.xml`.
    var no_derivedXml: RswiftResources.FileResource { .init(name: "no_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `or.xml`.
    var orXml: RswiftResources.FileResource { .init(name: "or", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `or_derived.xml`.
    var or_derivedXml: RswiftResources.FileResource { .init(name: "or_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `pa.xml`.
    var paXml: RswiftResources.FileResource { .init(name: "pa", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `pa_Arab.xml`.
    var pa_ArabXml: RswiftResources.FileResource { .init(name: "pa_Arab", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `pa_derived.xml`.
    var pa_derivedXml: RswiftResources.FileResource { .init(name: "pa_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `pcm.xml`.
    var pcmXml: RswiftResources.FileResource { .init(name: "pcm", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `pcm_derived.xml`.
    var pcm_derivedXml: RswiftResources.FileResource { .init(name: "pcm_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `pl.xml`.
    var plXml: RswiftResources.FileResource { .init(name: "pl", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `pl_derived.xml`.
    var pl_derivedXml: RswiftResources.FileResource { .init(name: "pl_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `ps.xml`.
    var psXml: RswiftResources.FileResource { .init(name: "ps", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `ps_derived.xml`.
    var ps_derivedXml: RswiftResources.FileResource { .init(name: "ps_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `pt.xml`.
    var ptXml: RswiftResources.FileResource { .init(name: "pt", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `pt_PT.xml`.
    var pt_PTXml: RswiftResources.FileResource { .init(name: "pt_PT", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `pt_PT_derived.xml`.
    var pt_PT_derivedXml: RswiftResources.FileResource { .init(name: "pt_PT_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `pt_derived.xml`.
    var pt_derivedXml: RswiftResources.FileResource { .init(name: "pt_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `qu.xml`.
    var quXml: RswiftResources.FileResource { .init(name: "qu", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `qu_derived.xml`.
    var qu_derivedXml: RswiftResources.FileResource { .init(name: "qu_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `rm.xml`.
    var rmXml: RswiftResources.FileResource { .init(name: "rm", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `rm_derived.xml`.
    var rm_derivedXml: RswiftResources.FileResource { .init(name: "rm_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `ro.xml`.
    var roXml: RswiftResources.FileResource { .init(name: "ro", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `ro_derived.xml`.
    var ro_derivedXml: RswiftResources.FileResource { .init(name: "ro_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `root.xml`.
    var rootXml: RswiftResources.FileResource { .init(name: "root", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `root_derived.xml`.
    var root_derivedXml: RswiftResources.FileResource { .init(name: "root_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `ru.xml`.
    var ruXml: RswiftResources.FileResource { .init(name: "ru", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `ru_derived.xml`.
    var ru_derivedXml: RswiftResources.FileResource { .init(name: "ru_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `rw.xml`.
    var rwXml: RswiftResources.FileResource { .init(name: "rw", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `sa.xml`.
    var saXml: RswiftResources.FileResource { .init(name: "sa", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `sa_derived.xml`.
    var sa_derivedXml: RswiftResources.FileResource { .init(name: "sa_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `sat.xml`.
    var satXml: RswiftResources.FileResource { .init(name: "sat", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `sat_derived.xml`.
    var sat_derivedXml: RswiftResources.FileResource { .init(name: "sat_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `sc.xml`.
    var scXml: RswiftResources.FileResource { .init(name: "sc", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `sc_derived.xml`.
    var sc_derivedXml: RswiftResources.FileResource { .init(name: "sc_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `sd.xml`.
    var sdXml: RswiftResources.FileResource { .init(name: "sd", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `sd_derived.xml`.
    var sd_derivedXml: RswiftResources.FileResource { .init(name: "sd_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `server_features_list.xml`.
    var server_features_listXml: RswiftResources.FileResource { .init(name: "server_features_list", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `si.xml`.
    var siXml: RswiftResources.FileResource { .init(name: "si", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `si_derived.xml`.
    var si_derivedXml: RswiftResources.FileResource { .init(name: "si_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `sk.xml`.
    var skXml: RswiftResources.FileResource { .init(name: "sk", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `sk_derived.xml`.
    var sk_derivedXml: RswiftResources.FileResource { .init(name: "sk_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `sl.xml`.
    var slXml: RswiftResources.FileResource { .init(name: "sl", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `sl_derived.xml`.
    var sl_derivedXml: RswiftResources.FileResource { .init(name: "sl_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `smile.json`.
    var smileJson: RswiftResources.FileResource { .init(name: "smile", pathExtension: "json", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `so.xml`.
    var soXml: RswiftResources.FileResource { .init(name: "so", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `so_derived.xml`.
    var so_derivedXml: RswiftResources.FileResource { .init(name: "so_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `sq.xml`.
    var sqXml: RswiftResources.FileResource { .init(name: "sq", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `sq_derived.xml`.
    var sq_derivedXml: RswiftResources.FileResource { .init(name: "sq_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `sr.xml`.
    var srXml: RswiftResources.FileResource { .init(name: "sr", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `sr_Cyrl.xml`.
    var sr_CyrlXml: RswiftResources.FileResource { .init(name: "sr_Cyrl", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `sr_Cyrl_BA.xml`.
    var sr_Cyrl_BAXml: RswiftResources.FileResource { .init(name: "sr_Cyrl_BA", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `sr_Cyrl_BA_derived.xml`.
    var sr_Cyrl_BA_derivedXml: RswiftResources.FileResource { .init(name: "sr_Cyrl_BA_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `sr_Cyrl_derived.xml`.
    var sr_Cyrl_derivedXml: RswiftResources.FileResource { .init(name: "sr_Cyrl_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `sr_Latn.xml`.
    var sr_LatnXml: RswiftResources.FileResource { .init(name: "sr_Latn", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `sr_Latn_BA.xml`.
    var sr_Latn_BAXml: RswiftResources.FileResource { .init(name: "sr_Latn_BA", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `sr_Latn_BA_derived.xml`.
    var sr_Latn_BA_derivedXml: RswiftResources.FileResource { .init(name: "sr_Latn_BA_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `sr_Latn_derived.xml`.
    var sr_Latn_derivedXml: RswiftResources.FileResource { .init(name: "sr_Latn_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `sr_derived.xml`.
    var sr_derivedXml: RswiftResources.FileResource { .init(name: "sr_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `su.xml`.
    var suXml: RswiftResources.FileResource { .init(name: "su", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `su_derived.xml`.
    var su_derivedXml: RswiftResources.FileResource { .init(name: "su_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `sv.xml`.
    var svXml: RswiftResources.FileResource { .init(name: "sv", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `sv_derived.xml`.
    var sv_derivedXml: RswiftResources.FileResource { .init(name: "sv_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `sw.xml`.
    var swXml: RswiftResources.FileResource { .init(name: "sw", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `sw_KE.xml`.
    var sw_KEXml: RswiftResources.FileResource { .init(name: "sw_KE", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `sw_KE_derived.xml`.
    var sw_KE_derivedXml: RswiftResources.FileResource { .init(name: "sw_KE_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `sw_derived.xml`.
    var sw_derivedXml: RswiftResources.FileResource { .init(name: "sw_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `ta.xml`.
    var taXml: RswiftResources.FileResource { .init(name: "ta", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `ta_derived.xml`.
    var ta_derivedXml: RswiftResources.FileResource { .init(name: "ta_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `te.xml`.
    var teXml: RswiftResources.FileResource { .init(name: "te", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `te_derived.xml`.
    var te_derivedXml: RswiftResources.FileResource { .init(name: "te_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `tg.xml`.
    var tgXml: RswiftResources.FileResource { .init(name: "tg", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `tg_derived.xml`.
    var tg_derivedXml: RswiftResources.FileResource { .init(name: "tg_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `th.xml`.
    var thXml: RswiftResources.FileResource { .init(name: "th", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `th_derived.xml`.
    var th_derivedXml: RswiftResources.FileResource { .init(name: "th_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `ti.xml`.
    var tiXml: RswiftResources.FileResource { .init(name: "ti", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `ti_derived.xml`.
    var ti_derivedXml: RswiftResources.FileResource { .init(name: "ti_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `tk.xml`.
    var tkXml: RswiftResources.FileResource { .init(name: "tk", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `tk_derived.xml`.
    var tk_derivedXml: RswiftResources.FileResource { .init(name: "tk_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `to.xml`.
    var toXml: RswiftResources.FileResource { .init(name: "to", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `to_derived.xml`.
    var to_derivedXml: RswiftResources.FileResource { .init(name: "to_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `tr.xml`.
    var trXml: RswiftResources.FileResource { .init(name: "tr", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `tr_derived.xml`.
    var tr_derivedXml: RswiftResources.FileResource { .init(name: "tr_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `tt.xml`.
    var ttXml: RswiftResources.FileResource { .init(name: "tt", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `tt_derived.xml`.
    var tt_derivedXml: RswiftResources.FileResource { .init(name: "tt_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `ug.xml`.
    var ugXml: RswiftResources.FileResource { .init(name: "ug", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `ug_derived.xml`.
    var ug_derivedXml: RswiftResources.FileResource { .init(name: "ug_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `uk.xml`.
    var ukXml: RswiftResources.FileResource { .init(name: "uk", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `uk_derived.xml`.
    var uk_derivedXml: RswiftResources.FileResource { .init(name: "uk_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `ur.xml`.
    var urXml: RswiftResources.FileResource { .init(name: "ur", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `ur_derived.xml`.
    var ur_derivedXml: RswiftResources.FileResource { .init(name: "ur_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `uz.xml`.
    var uzXml: RswiftResources.FileResource { .init(name: "uz", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `uz_derived.xml`.
    var uz_derivedXml: RswiftResources.FileResource { .init(name: "uz_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `vi.xml`.
    var viXml: RswiftResources.FileResource { .init(name: "vi", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `vi_derived.xml`.
    var vi_derivedXml: RswiftResources.FileResource { .init(name: "vi_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `wo.xml`.
    var woXml: RswiftResources.FileResource { .init(name: "wo", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `wo_derived.xml`.
    var wo_derivedXml: RswiftResources.FileResource { .init(name: "wo_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `xh.xml`.
    var xhXml: RswiftResources.FileResource { .init(name: "xh", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `yo.xml`.
    var yoXml: RswiftResources.FileResource { .init(name: "yo", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `yo_BJ.xml`.
    var yo_BJXml: RswiftResources.FileResource { .init(name: "yo_BJ", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `yo_BJ_derived.xml`.
    var yo_BJ_derivedXml: RswiftResources.FileResource { .init(name: "yo_BJ_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `yo_derived.xml`.
    var yo_derivedXml: RswiftResources.FileResource { .init(name: "yo_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `yue.xml`.
    var yueXml: RswiftResources.FileResource { .init(name: "yue", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `yue_Hans.xml`.
    var yue_HansXml: RswiftResources.FileResource { .init(name: "yue_Hans", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `yue_Hans_derived.xml`.
    var yue_Hans_derivedXml: RswiftResources.FileResource { .init(name: "yue_Hans_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `yue_derived.xml`.
    var yue_derivedXml: RswiftResources.FileResource { .init(name: "yue_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `zh.xml`.
    var zhXml: RswiftResources.FileResource { .init(name: "zh", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `zh_Hant.xml`.
    var zh_HantXml: RswiftResources.FileResource { .init(name: "zh_Hant", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `zh_Hant_HK.xml`.
    var zh_Hant_HKXml: RswiftResources.FileResource { .init(name: "zh_Hant_HK", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `zh_Hant_HK_derived.xml`.
    var zh_Hant_HK_derivedXml: RswiftResources.FileResource { .init(name: "zh_Hant_HK_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `zh_Hant_derived.xml`.
    var zh_Hant_derivedXml: RswiftResources.FileResource { .init(name: "zh_Hant_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `zh_derived.xml`.
    var zh_derivedXml: RswiftResources.FileResource { .init(name: "zh_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `zu.xml`.
    var zuXml: RswiftResources.FileResource { .init(name: "zu", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `zu_derived.xml`.
    var zu_derivedXml: RswiftResources.FileResource { .init(name: "zu_derived", pathExtension: "xml", bundle: bundle, locale: LocaleReference.none) }
  }

  /// This `_R.segue` struct is generated, and contains static references to 8 view controllers.
  struct segue {
    let accountSettingsViewController = accountSettingsViewController()
    let channelParticipantsController = channelParticipantsController()
    let channelSelectToJoinViewController = channelSelectToJoinViewController()
    let channelSettingsViewController = channelSettingsViewController()
    let channelViewController = channelViewController()
    let contactViewController = contactViewController()
    let mucChatSettingsViewController = mucChatSettingsViewController()
    let mucChatViewController = mucChatViewController()

    /// This struct is generated for `AccountSettingsViewController`, and contains static references to 3 segues.
    struct accountSettingsViewController {

      /// Segue identifier `AccountQRCodeController`.
      var accountQRCodeController: RswiftResources.SegueIdentifier<UIKit.UIStoryboardSegue, AccountSettingsViewController, AccountQRCodeController> { .init(identifier: "AccountQRCodeController") }

      /// Segue identifier `EditAccountVCardSegue`.
      var editAccountVCardSegue: RswiftResources.SegueIdentifier<UIKit.UIStoryboardSegue, AccountSettingsViewController, VCardEditViewController> { .init(identifier: "EditAccountVCardSegue") }

      /// Segue identifier `ManageOMEMOFingerprints`.
      var manageOMEMOFingerprints: RswiftResources.SegueIdentifier<UIKit.UIStoryboardSegue, AccountSettingsViewController, OMEMOFingerprintsController> { .init(identifier: "ManageOMEMOFingerprints") }
    }

    /// This struct is generated for `ChannelParticipantsController`, and contains static references to 2 segues.
    struct channelParticipantsController {

      /// Segue identifier `showChannelBlocked`.
      var showChannelBlocked: RswiftResources.SegueIdentifier<UIKit.UIStoryboardSegue, ChannelParticipantsController, ChannelBlockedUsersController> { .init(identifier: "showChannelBlocked") }

      /// Segue identifier `showChannelInviteController`.
      var showChannelInviteController: RswiftResources.SegueIdentifier<UIKit.UIStoryboardSegue, ChannelParticipantsController, ChannelInviteController> { .init(identifier: "showChannelInviteController") }
    }

    /// This struct is generated for `ChannelSelectToJoinViewController`, and contains static references to 1 segues.
    struct channelSelectToJoinViewController {

      /// Segue identifier `ChannelSelectAccountAndComponentSegue`.
      var channelSelectAccountAndComponentSegue: RswiftResources.SegueIdentifier<UIKit.UIStoryboardSegue, ChannelSelectToJoinViewController, ChannelJoinViewController> { .init(identifier: "ChannelSelectAccountAndComponentSegue") }
    }

    /// This struct is generated for `ChannelSettingsViewController`, and contains static references to 2 segues.
    struct channelSettingsViewController {

      /// Segue identifier `chatShowAttachments`.
      var chatShowAttachments: RswiftResources.SegueIdentifier<UIKit.UIStoryboardSegue, ChannelSettingsViewController, ChatAttachmentsController> { .init(identifier: "chatShowAttachments") }

      /// Segue identifier `editChannelInfo`.
      var editChannelInfo: RswiftResources.SegueIdentifier<UIKit.UIStoryboardSegue, ChannelSettingsViewController, ChannelEditInfoController> { .init(identifier: "editChannelInfo") }
    }

    /// This struct is generated for `ChannelViewController`, and contains static references to 1 segues.
    struct channelViewController {

      /// Segue identifier `ChannelSettingsShow`.
      var channelSettingsShow: RswiftResources.SegueIdentifier<UIKit.UIStoryboardSegue, ChannelViewController, UIKit.UINavigationController> { .init(identifier: "ChannelSettingsShow") }
    }

    /// This struct is generated for `ContactViewController`, and contains static references to 1 segues.
    struct contactViewController {

      /// Segue identifier `chatShowAttachments`.
      var chatShowAttachments: RswiftResources.SegueIdentifier<UIKit.UIStoryboardSegue, ContactViewController, ChatAttachmentsController> { .init(identifier: "chatShowAttachments") }
    }

    /// This struct is generated for `MucChatSettingsViewController`, and contains static references to 1 segues.
    struct mucChatSettingsViewController {

      /// Segue identifier `chatShowAttachments`.
      var chatShowAttachments: RswiftResources.SegueIdentifier<UIKit.UIStoryboardSegue, MucChatSettingsViewController, ChatAttachmentsController> { .init(identifier: "chatShowAttachments") }
    }

    /// This struct is generated for `MucChatViewController`, and contains static references to 1 segues.
    struct mucChatViewController {

      /// Segue identifier `showOccupants`.
      var showOccupants: RswiftResources.SegueIdentifier<UIKit.UIStoryboardSegue, MucChatViewController, MucChatOccupantsTableViewController> { .init(identifier: "showOccupants") }
    }
  }

  /// This `_R.id` struct is generated, and contains static references to 2 accessibility identifiers.
  struct id {
    let conversation = conversation()
    let settings = settings()

    /// This `_R.id.conversation` struct is generated, and contains static references to 1 accessibility identifiers.
    struct conversation {

      /// Accessibility identifier `#bc-ignore!`.
      let bcIgnore = "#bc-ignore!"
    }

    /// This `_R.id.settings` struct is generated, and contains static references to 26 accessibility identifiers.
    struct settings {

      /// Accessibility identifier `MessageEncryptionTableViewCell`.
      let messageEncryptionTableViewCell = "MessageEncryptionTableViewCell"

      /// Accessibility identifier `StatusTableViewCell`.
      let statusTableViewCell = "StatusTableViewCell"

      /// Accessibility identifier `aboutSettingsViewCall`.
      let aboutSettingsViewCall = "aboutSettingsViewCall"

      /// Accessibility identifier `accountAvatar`.
      let accountAvatar = "accountAvatar"

      /// Accessibility identifier `accountCell`.
      let accountCell = "accountCell"

      /// Accessibility identifier `accountName`.
      let accountName = "accountName"

      /// Accessibility identifier `appIconViewCell`.
      let appIconViewCell = "appIconViewCell"

      /// Accessibility identifier `appearanceViewCell`.
      let appearanceViewCell = "appearanceViewCell"

      /// Accessibility identifier `autoSubscribeOnAcceptedSubscriptionRequestTableViewCell`.
      let autoSubscribeOnAcceptedSubscriptionRequestTableViewCell = "autoSubscribeOnAcceptedSubscriptionRequestTableViewCell"

      /// Accessibility identifier `clearImagePreviewTableViewCell`.
      let clearImagePreviewTableViewCell = "clearImagePreviewTableViewCell"

      /// Accessibility identifier `clearMetadataStoreTableViewCell`.
      let clearMetadataStoreTableViewCell = "clearMetadataStoreTableViewCell"

      /// Accessibility identifier `contactsSettingsViewCell`.
      let contactsSettingsViewCell = "contactsSettingsViewCell"

      /// Accessibility identifier `enableMessageCarbonsTableViewCell`.
      let enableMessageCarbonsTableViewCell = "enableMessageCarbonsTableViewCell"

      /// Accessibility identifier `experimentalSettingsViewCall`.
      let experimentalSettingsViewCall = "experimentalSettingsViewCall"

      /// Accessibility identifier `getInTouchSettingsViewCell`.
      let getInTouchSettingsViewCell = "getInTouchSettingsViewCell"

      /// Accessibility identifier `maxImagePreviewSizeTableViewCell`.
      let maxImagePreviewSizeTableViewCell = "maxImagePreviewSizeTableViewCell"

      /// Accessibility identifier `messageDeliveryReceiptsTableViewCell`.
      let messageDeliveryReceiptsTableViewCell = "messageDeliveryReceiptsTableViewCell"

      /// Accessibility identifier `notificationSettingsViewCell`.
      let notificationSettingsViewCell = "notificationSettingsViewCell"

      /// Accessibility identifier `notificationsFromUnknownTableViewCell`.
      let notificationsFromUnknownTableViewCell = "notificationsFromUnknownTableViewCell"

      /// Accessibility identifier `recentsMessageLinesNoTableViewCell`.
      let recentsMessageLinesNoTableViewCell = "recentsMessageLinesNoTableViewCell"

      /// Accessibility identifier `recentsSortTypeTableViewCell`.
      let recentsSortTypeTableViewCell = "recentsSortTypeTableViewCell"

      /// Accessibility identifier `sendMessageOnReturnTableViewCell`.
      let sendMessageOnReturnTableViewCell = "sendMessageOnReturnTableViewCell"

      /// Accessibility identifier `settingsViewCell`.
      let settingsViewCell = "settingsViewCell"

      /// Accessibility identifier `sharingViaHttpUploadTableViewCell`.
      let sharingViaHttpUploadTableViewCell = "sharingViaHttpUploadTableViewCell"

      /// Accessibility identifier `simplifiedLinkToFileTableViewCell`.
      let simplifiedLinkToFileTableViewCell = "simplifiedLinkToFileTableViewCell"

      /// Accessibility identifier `statusTypeSettingsViewCell`.
      let statusTypeSettingsViewCell = "statusTypeSettingsViewCell"
    }
  }

  /// This `_R.nib` struct is generated, and contains static references to 241 nibs.
  struct nib {
    let bundle: Foundation.Bundle

    /// Nib `AboutTableCell`.
    var aboutTableCell: RswiftResources.NibReference<AboutTableCell> { .init(name: "AboutTableCell", bundle: bundle) }

    /// Nib `AddEmailController`.
    var addEmailController: RswiftResources.NibReference<IQKeyboardManagerSwift.IQPreviousNextView> { .init(name: "AddEmailController", bundle: bundle) }

    /// Nib `AddFriendTableViewCell`.
    var addFriendTableViewCell: RswiftResources.NibReference<AddFriendTableViewCell> { .init(name: "AddFriendTableViewCell", bundle: bundle) }

    /// Nib `AddMajorViewController`.
    var addMajorViewController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "AddMajorViewController", bundle: bundle) }

    /// Nib `AddNameController`.
    var addNameController: RswiftResources.NibReference<IQKeyboardManagerSwift.IQPreviousNextView> { .init(name: "AddNameController", bundle: bundle) }

    /// Nib `AddStoryController`.
    var addStoryController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "AddStoryController", bundle: bundle) }

    /// Nib `AddTextController`.
    var addTextController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "AddTextController", bundle: bundle) }

    /// Nib `AllChatReactionsController`.
    var allChatReactionsController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "AllChatReactionsController", bundle: bundle) }

    /// Nib `AttachetImageCell`.
    var attachetImageCell: RswiftResources.NibReference<AttachetImageCell> { .init(name: "AttachetImageCell", bundle: bundle) }

    /// Nib `BirthInfoController`.
    var birthInfoController: RswiftResources.NibReference<IQKeyboardManagerSwift.IQPreviousNextView> { .init(name: "BirthInfoController", bundle: bundle) }

    /// Nib `BlockListController`.
    var blockListController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "BlockListController", bundle: bundle) }

    /// Nib `BorderedTextField`.
    var borderedTextField: RswiftResources.NibReference<UIKit.UIView> { .init(name: "BorderedTextField", bundle: bundle) }

    /// Nib `CalendarController`.
    var calendarController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "CalendarController", bundle: bundle) }

    /// Nib `CalendarEventCell`.
    var calendarEventCell: RswiftResources.NibReference<CalendarEventCell> { .init(name: "CalendarEventCell", bundle: bundle) }

    /// Nib `CallPopUP`.
    var callPopUP: RswiftResources.NibReference<CallPopup> { .init(name: "CallPopUP", bundle: bundle) }

    /// Nib `CertificateController`.
    var certificateController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "CertificateController", bundle: bundle) }

    /// Nib `CertificationTableCell`.
    var certificationTableCell: RswiftResources.NibReference<CertificationTableCell> { .init(name: "CertificationTableCell", bundle: bundle) }

    /// Nib `ChangePasswordController`.
    var changePasswordController: RswiftResources.NibReference<IQKeyboardManagerSwift.IQPreviousNextView> { .init(name: "ChangePasswordController", bundle: bundle) }

    /// Nib `ChatAddParticipantsController`.
    var chatAddParticipantsController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "ChatAddParticipantsController", bundle: bundle) }

    /// Nib `ChatReactionEmojiCell`.
    var chatReactionEmojiCell: RswiftResources.NibReference<ChatReactionEmojiCell> { .init(name: "ChatReactionEmojiCell", bundle: bundle) }

    /// Nib `ChatReactionUserCell`.
    var chatReactionUserCell: RswiftResources.NibReference<ChatReactionUserCell> { .init(name: "ChatReactionUserCell", bundle: bundle) }

    /// Nib `ColorBgCell`.
    var colorBgCell: RswiftResources.NibReference<ColorBgCell> { .init(name: "ColorBgCell", bundle: bundle) }

    /// Nib `ColorBgCellHX`.
    var colorBgCellHX: RswiftResources.NibReference<ColorBgCellHX> { .init(name: "ColorBgCellHX", bundle: bundle) }

    /// Nib `CommentCell`.
    var commentCell: RswiftResources.NibReference<CommentCell> { .init(name: "CommentCell", bundle: bundle) }

    /// Nib `CommentsHeaderTableViewCell`.
    var commentsHeaderTableViewCell: RswiftResources.NibReference<CommentsHeaderTableViewCell> { .init(name: "CommentsHeaderTableViewCell", bundle: bundle) }

    /// Nib `ContactCell`.
    var contactCell: RswiftResources.NibReference<ContactCell> { .init(name: "ContactCell", bundle: bundle) }

    /// Nib `ContactUsController`.
    var contactUsController: RswiftResources.NibReference<IQKeyboardManagerSwift.IQPreviousNextView> { .init(name: "ContactUsController", bundle: bundle) }

    /// Nib `CreateChatGroupController`.
    var createChatGroupController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "CreateChatGroupController", bundle: bundle) }

    /// Nib `CreateEventController`.
    var createEventController: RswiftResources.NibReference<IQKeyboardManagerSwift.IQPreviousNextView> { .init(name: "CreateEventController", bundle: bundle) }

    /// Nib `CreateGroupController`.
    var createGroupController: RswiftResources.NibReference<IQKeyboardManagerSwift.IQPreviousNextView> { .init(name: "CreateGroupController", bundle: bundle) }

    /// Nib `CreateNewController`.
    var createNewController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "CreateNewController", bundle: bundle) }

    /// Nib `CreatePostCell`.
    var createPostCell: RswiftResources.NibReference<CreatePostCell> { .init(name: "CreatePostCell", bundle: bundle) }

    /// Nib `CustomAlertView`.
    var customAlertView: RswiftResources.NibReference<CustomAlertView> { .init(name: "CustomAlertView", bundle: bundle) }

    /// Nib `DataPickerCell`.
    var dataPickerCell: RswiftResources.NibReference<DataPickerCell> { .init(name: "DataPickerCell", bundle: bundle) }

    /// Nib `DataPickerController`.
    var dataPickerController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "DataPickerController", bundle: bundle) }

    /// Nib `DatePickerViewController`.
    var datePickerViewController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "DatePickerViewController", bundle: bundle) }

    /// Nib `DealItemCell`.
    var dealItemCell: RswiftResources.NibReference<DealItemCell> { .init(name: "DealItemCell", bundle: bundle) }

    /// Nib `DealItemDetailsController`.
    var dealItemDetailsController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "DealItemDetailsController", bundle: bundle) }

    /// Nib `DealsController`.
    var dealsController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "DealsController", bundle: bundle) }

    /// Nib `DocumentController`.
    var documentController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "DocumentController", bundle: bundle) }

    /// Nib `DocumentView`.
    var documentView: RswiftResources.NibReference<DocumentView> { .init(name: "DocumentView", bundle: bundle) }

    /// Nib `DocumentViewerController`.
    var documentViewerController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "DocumentViewerController", bundle: bundle) }

    /// Nib `DocumentsTableCell`.
    var documentsTableCell: RswiftResources.NibReference<DocumentsTableCell> { .init(name: "DocumentsTableCell", bundle: bundle) }

    /// Nib `EditGroupController`.
    var editGroupController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "EditGroupController", bundle: bundle) }

    /// Nib `EditProfileAbout`.
    var editProfileAbout: RswiftResources.NibReference<UIKit.UIView> { .init(name: "EditProfileAbout", bundle: bundle) }

    /// Nib `EditProfileCoverPhotoCell`.
    var editProfileCoverPhotoCell: RswiftResources.NibReference<EditProfileCoverPhotoCell> { .init(name: "EditProfileCoverPhotoCell", bundle: bundle) }

    /// Nib `EditProfileImageCell`.
    var editProfileImageCell: RswiftResources.NibReference<EditProfileImageCell> { .init(name: "EditProfileImageCell", bundle: bundle) }

    /// Nib `EditProfilePhoto`.
    var editProfilePhoto: RswiftResources.NibReference<UIKit.UIView> { .init(name: "EditProfilePhoto", bundle: bundle) }

    /// Nib `EditProfileViewController`.
    var editProfileViewController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "EditProfileViewController", bundle: bundle) }

    /// Nib `EditSkillTableViewCell`.
    var editSkillTableViewCell: RswiftResources.NibReference<EditSkillTableViewCell> { .init(name: "EditSkillTableViewCell", bundle: bundle) }

    /// Nib `EducationController`.
    var educationController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "EducationController", bundle: bundle) }

    /// Nib `EducationTableCell`.
    var educationTableCell: RswiftResources.NibReference<EducationTableCell> { .init(name: "EducationTableCell", bundle: bundle) }

    /// Nib `EducationalInfoController`.
    var educationalInfoController: RswiftResources.NibReference<IQKeyboardManagerSwift.IQPreviousNextView> { .init(name: "EducationalInfoController", bundle: bundle) }

    /// Nib `EmailCell`.
    var emailCell: RswiftResources.NibReference<EmailCell> { .init(name: "EmailCell", bundle: bundle) }

    /// Nib `EmojiCell`.
    var emojiCell: RswiftResources.NibReference<EmojiCell> { .init(name: "EmojiCell", bundle: bundle) }

    /// Nib `EmojisController`.
    var emojisController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "EmojisController", bundle: bundle) }

    /// Nib `EmptyTableCell`.
    var emptyTableCell: RswiftResources.NibReference<EmptyTableCell> { .init(name: "EmptyTableCell", bundle: bundle) }

    /// Nib `EventCell`.
    var eventCell: RswiftResources.NibReference<EventCell> { .init(name: "EventCell", bundle: bundle) }

    /// Nib `EventDetailsController`.
    var eventDetailsController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "EventDetailsController", bundle: bundle) }

    /// Nib `EventGuestListController`.
    var eventGuestListController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "EventGuestListController", bundle: bundle) }

    /// Nib `EventInviteController`.
    var eventInviteController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "EventInviteController", bundle: bundle) }

    /// Nib `EventTableCell`.
    var eventTableCell: RswiftResources.NibReference<EventTableCell> { .init(name: "EventTableCell", bundle: bundle) }

    /// Nib `EventUsersController`.
    var eventUsersController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "EventUsersController", bundle: bundle) }

    /// Nib `EventsController`.
    var eventsController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "EventsController", bundle: bundle) }

    /// Nib `EventsFilterViewController`.
    var eventsFilterViewController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "EventsFilterViewController", bundle: bundle) }

    /// Nib `EventsListController`.
    var eventsListController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "EventsListController", bundle: bundle) }

    /// Nib `EventsSubNavBarCellItem`.
    var eventsSubNavBarCellItem: RswiftResources.NibReference<EventsSubNavBarCellItem> { .init(name: "EventsSubNavBarCellItem", bundle: bundle) }

    /// Nib `EventsTimeFilterViewController`.
    var eventsTimeFilterViewController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "EventsTimeFilterViewController", bundle: bundle) }

    /// Nib `ExperienceController`.
    var experienceController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "ExperienceController", bundle: bundle) }

    /// Nib `ExperienceDetailCell`.
    var experienceDetailCell: RswiftResources.NibReference<ExperienceDetailCell> { .init(name: "ExperienceDetailCell", bundle: bundle) }

    /// Nib `ExperienceTableCell`.
    var experienceTableCell: RswiftResources.NibReference<ExperienceTableCell> { .init(name: "ExperienceTableCell", bundle: bundle) }

    /// Nib `ExperienceTypeTableViewCell`.
    var experienceTypeTableViewCell: RswiftResources.NibReference<ExperienceTypeTableViewCell> { .init(name: "ExperienceTypeTableViewCell", bundle: bundle) }

    /// Nib `ExperienceTypeViewController`.
    var experienceTypeViewController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "ExperienceTypeViewController", bundle: bundle) }

    /// Nib `FavEventsController`.
    var favEventsController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "FavEventsController", bundle: bundle) }

    /// Nib `FavFriendsController`.
    var favFriendsController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "FavFriendsController", bundle: bundle) }

    /// Nib `FavGroupsController`.
    var favGroupsController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "FavGroupsController", bundle: bundle) }

    /// Nib `FavPostsController`.
    var favPostsController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "FavPostsController", bundle: bundle) }

    /// Nib `FavoriteViewController`.
    var favoriteViewController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "FavoriteViewController", bundle: bundle) }

    /// Nib `FilterReusableShowResultsTableViewCell`.
    var filterReusableShowResultsTableViewCell: RswiftResources.NibReferenceReuseIdentifier<FilterReusableShowResultsTableViewCell, FilterReusableShowResultsTableViewCell> { .init(name: "FilterReusableShowResultsTableViewCell", bundle: bundle, identifier: "kFilterReusableShowResultsTableViewCell") }

    /// Nib `FilterReusableTableViewCell`.
    var filterReusableTableViewCell: RswiftResources.NibReferenceReuseIdentifier<FilterReusableTableViewCell, FilterReusableTableViewCell> { .init(name: "FilterReusableTableViewCell", bundle: bundle, identifier: "kFilterReusableTableViewCell") }

    /// Nib `ForgotPasswordController`.
    var forgotPasswordController: RswiftResources.NibReference<IQKeyboardManagerSwift.IQPreviousNextView> { .init(name: "ForgotPasswordController", bundle: bundle) }

    /// Nib `FriendCell`.
    var friendCell: RswiftResources.NibReference<FriendCell> { .init(name: "FriendCell", bundle: bundle) }

    /// Nib `FriendsController`.
    var friendsController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "FriendsController", bundle: bundle) }

    /// Nib `FriendsListCell`.
    var friendsListCell: RswiftResources.NibReference<FriendsListCell> { .init(name: "FriendsListCell", bundle: bundle) }

    /// Nib `FullImageController`.
    var fullImageController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "FullImageController", bundle: bundle) }

    /// Nib `FullScreenCallPopup`.
    var fullScreenCallPopup: RswiftResources.NibReference<UIKit.UIView> { .init(name: "FullScreenCallPopup", bundle: bundle) }

    /// Nib `GroupBlockedUsersController`.
    var groupBlockedUsersController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "GroupBlockedUsersController", bundle: bundle) }

    /// Nib `GroupCell`.
    var groupCell: RswiftResources.NibReference<GroupCell> { .init(name: "GroupCell", bundle: bundle) }

    /// Nib `GroupDetailCell`.
    var groupDetailCell: RswiftResources.NibReference<GroupDetailCell> { .init(name: "GroupDetailCell", bundle: bundle) }

    /// Nib `GroupDetailsController`.
    var groupDetailsController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "GroupDetailsController", bundle: bundle) }

    /// Nib `GroupFilterController`.
    var groupFilterController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "GroupFilterController", bundle: bundle) }

    /// Nib `GroupHeaderImageTableViewCell`.
    var groupHeaderImageTableViewCell: RswiftResources.NibReferenceReuseIdentifier<GroupHeaderImageTableViewCell, GroupHeaderImageTableViewCell> { .init(name: "GroupHeaderImageTableViewCell", bundle: bundle, identifier: "kGroupHeaderImageTableViewCell") }

    /// Nib `GroupManageOptionsController`.
    var groupManageOptionsController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "GroupManageOptionsController", bundle: bundle) }

    /// Nib `GroupMemberRequestsController`.
    var groupMemberRequestsController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "GroupMemberRequestsController", bundle: bundle) }

    /// Nib `GroupMembersController`.
    var groupMembersController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "GroupMembersController", bundle: bundle) }

    /// Nib `GroupTableCell`.
    var groupTableCell: RswiftResources.NibReference<GroupTableCell> { .init(name: "GroupTableCell", bundle: bundle) }

    /// Nib `GroupsController`.
    var groupsController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "GroupsController", bundle: bundle) }

    /// Nib `GroupsListController`.
    var groupsListController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "GroupsListController", bundle: bundle) }

    /// Nib `HidePostTableViewCell`.
    var hidePostTableViewCell: RswiftResources.NibReference<HidePostTableViewCell> { .init(name: "HidePostTableViewCell", bundle: bundle) }

    /// Nib `HistoryCell`.
    var historyCell: RswiftResources.NibReference<HistoryCell> { .init(name: "HistoryCell", bundle: bundle) }

    /// Nib `HomeController`.
    var homeController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "HomeController", bundle: bundle) }

    /// Nib `HomeDropDownController`.
    var homeDropDownController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "HomeDropDownController", bundle: bundle) }

    /// Nib `ImageCell`.
    var imageCell: RswiftResources.NibReference<ImageCell> { .init(name: "ImageCell", bundle: bundle) }

    /// Nib `ImagePostCell`.
    var imagePostCell: RswiftResources.NibReference<ImagePostCell> { .init(name: "ImagePostCell", bundle: bundle) }

    /// Nib `InviteCodeController`.
    var inviteCodeController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "InviteCodeController", bundle: bundle) }

    /// Nib `InviteController`.
    var inviteController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "InviteController", bundle: bundle) }

    /// Nib `InviteFriendViewController`.
    var inviteFriendViewController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "InviteFriendViewController", bundle: bundle) }

    /// Nib `InviteFriendsController`.
    var inviteFriendsController: RswiftResources.NibReference<IQKeyboardManagerSwift.IQPreviousNextView> { .init(name: "InviteFriendsController", bundle: bundle) }

    /// Nib `InviteFriendsToEventController`.
    var inviteFriendsToEventController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "InviteFriendsToEventController", bundle: bundle) }

    /// Nib `LeaderboardController`.
    var leaderboardController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "LeaderboardController", bundle: bundle) }

    /// Nib `LeaderboardTabCell`.
    var leaderboardTabCell: RswiftResources.NibReference<LeaderboardTabCell> { .init(name: "LeaderboardTabCell", bundle: bundle) }

    /// Nib `LoadingController`.
    var loadingController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "LoadingController", bundle: bundle) }

    /// Nib `LocationCell`.
    var locationCell: RswiftResources.NibReference<LocationCell> { .init(name: "LocationCell", bundle: bundle) }

    /// Nib `LoginController`.
    var loginController: RswiftResources.NibReference<IQKeyboardManagerSwift.IQPreviousNextView> { .init(name: "LoginController", bundle: bundle) }

    /// Nib `ManageGroupController`.
    var manageGroupController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "ManageGroupController", bundle: bundle) }

    /// Nib `MarketplaceController`.
    var marketplaceController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "MarketplaceController", bundle: bundle) }

    /// Nib `MarketplaceItemCell`.
    var marketplaceItemCell: RswiftResources.NibReference<MarketplaceItemCell> { .init(name: "MarketplaceItemCell", bundle: bundle) }

    /// Nib `MediaFilesCollectionViewCell`.
    var mediaFilesCollectionViewCell: RswiftResources.NibReferenceReuseIdentifier<MediaFilesCollectionViewCell, MediaFilesCollectionViewCell> { .init(name: "MediaFilesCollectionViewCell", bundle: bundle, identifier: "kMediaFilesCollectionViewCell") }

    /// Nib `MediaViewerCell`.
    var mediaViewerCell: RswiftResources.NibReference<MediaViewerCell> { .init(name: "MediaViewerCell", bundle: bundle) }

    /// Nib `MediaViewerController`.
    var mediaViewerController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "MediaViewerController", bundle: bundle) }

    /// Nib `MemberRequestCell`.
    var memberRequestCell: RswiftResources.NibReference<MemberRequestCell> { .init(name: "MemberRequestCell", bundle: bundle) }

    /// Nib `MembersSentTableViewCell`.
    var membersSentTableViewCell: RswiftResources.NibReferenceReuseIdentifier<MembersSentTableViewCell, MembersSentTableViewCell> { .init(name: "MembersSentTableViewCell", bundle: bundle, identifier: "kMembersSentTableViewCell") }

    /// Nib `MenuCell`.
    var menuCell: RswiftResources.NibReference<MenuCell> { .init(name: "MenuCell", bundle: bundle) }

    /// Nib `MenuController`.
    var menuController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "MenuController", bundle: bundle) }

    /// Nib `MenuHeaderView`.
    var menuHeaderView: RswiftResources.NibReference<MenuHeaderView> { .init(name: "MenuHeaderView", bundle: bundle) }

    /// Nib `MenuLogoCell`.
    var menuLogoCell: RswiftResources.NibReference<MenuLogoCell> { .init(name: "MenuLogoCell", bundle: bundle) }

    /// Nib `MyProfileController`.
    var myProfileController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "MyProfileController", bundle: bundle) }

    /// Nib `MyStoriesCell`.
    var myStoriesCell: RswiftResources.NibReference<MyStoriesCell> { .init(name: "MyStoriesCell", bundle: bundle) }

    /// Nib `NewChatController`.
    var newChatController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "NewChatController", bundle: bundle) }

    /// Nib `NewGroupCell`.
    var newGroupCell: RswiftResources.NibReference<NewGroupCell> { .init(name: "NewGroupCell", bundle: bundle) }

    /// Nib `NewPasswordController`.
    var newPasswordController: RswiftResources.NibReference<IQKeyboardManagerSwift.IQPreviousNextView> { .init(name: "NewPasswordController", bundle: bundle) }

    /// Nib `NewPostController`.
    var newPostController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "NewPostController", bundle: bundle) }

    /// Nib `NoMorePostCell`.
    var noMorePostCell: RswiftResources.NibReference<NoMorePostCell> { .init(name: "NoMorePostCell", bundle: bundle) }

    /// Nib `NoPostsCell`.
    var noPostsCell: RswiftResources.NibReference<NoPostsCell> { .init(name: "NoPostsCell", bundle: bundle) }

    /// Nib `NotificationCategoryCell`.
    var notificationCategoryCell: RswiftResources.NibReference<NotificationCategoryCell> { .init(name: "NotificationCategoryCell", bundle: bundle) }

    /// Nib `NotificationEnrollmentController`.
    var notificationEnrollmentController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "NotificationEnrollmentController", bundle: bundle) }

    /// Nib `NotificationFriendRequestCell`.
    var notificationFriendRequestCell: RswiftResources.NibReference<NotificationFriendRequestCell> { .init(name: "NotificationFriendRequestCell", bundle: bundle) }

    /// Nib `NotificationGeneralCell`.
    var notificationGeneralCell: RswiftResources.NibReference<NotificationGeneralCell> { .init(name: "NotificationGeneralCell", bundle: bundle) }

    /// Nib `NotificationSettingsCell`.
    var notificationSettingsCell: RswiftResources.NibReference<NotificationSettingsCell> { .init(name: "NotificationSettingsCell", bundle: bundle) }

    /// Nib `NotificationSettingsDescriptionCell`.
    var notificationSettingsDescriptionCell: RswiftResources.NibReference<NotificationSettingsDescriptionCell> { .init(name: "NotificationSettingsDescriptionCell", bundle: bundle) }

    /// Nib `NotificationSubSettingsController`.
    var notificationSubSettingsController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "NotificationSubSettingsController", bundle: bundle) }

    /// Nib `NotificationsController`.
    var notificationsController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "NotificationsController", bundle: bundle) }

    /// Nib `NotificationsSettingsController`.
    var notificationsSettingsController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "NotificationsSettingsController", bundle: bundle) }

    /// Nib `OnboardingController`.
    var onboardingController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "OnboardingController", bundle: bundle) }

    /// Nib `OnboardingViewController`.
    var onboardingViewController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "OnboardingViewController", bundle: bundle) }

    /// Nib `OngoingCallPopUP`.
    var ongoingCallPopUP: RswiftResources.NibReference<OngoingCallPopup> { .init(name: "OngoingCallPopUP", bundle: bundle) }

    /// Nib `PendingPostsController`.
    var pendingPostsController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "PendingPostsController", bundle: bundle) }

    /// Nib `PeopleTypeCollectionViewCell`.
    var peopleTypeCollectionViewCell: RswiftResources.NibReference<PeopleTypeCollectionViewCell> { .init(name: "PeopleTypeCollectionViewCell", bundle: bundle) }

    /// Nib `PhotosCollectionTableCell`.
    var photosCollectionTableCell: RswiftResources.NibReference<PhotosCollectionTableCell> { .init(name: "PhotosCollectionTableCell", bundle: bundle) }

    /// Nib `PhotosController`.
    var photosController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "PhotosController", bundle: bundle) }

    /// Nib `PhotosSegmentTableCell`.
    var photosSegmentTableCell: RswiftResources.NibReference<PhotosSegmentTableCell> { .init(name: "PhotosSegmentTableCell", bundle: bundle) }

    /// Nib `PinCodeTextField`.
    var pinCodeTextField: RswiftResources.NibReference<UIKit.UIView> { .init(name: "PinCodeTextField", bundle: bundle) }

    /// Nib `PostAllTagOptions`.
    var postAllTagOptions: RswiftResources.NibReference<UIKit.UIView> { .init(name: "PostAllTagOptions", bundle: bundle) }

    /// Nib `PostDetailsController`.
    var postDetailsController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "PostDetailsController", bundle: bundle) }

    /// Nib `PostDetailsImageCell`.
    var postDetailsImageCell: RswiftResources.NibReference<PostDetailsImageCell> { .init(name: "PostDetailsImageCell", bundle: bundle) }

    /// Nib `PostDetailsTextCell`.
    var postDetailsTextCell: RswiftResources.NibReference<PostDetailsTextCell> { .init(name: "PostDetailsTextCell", bundle: bundle) }

    /// Nib `PostDetailsTextWithBgCell`.
    var postDetailsTextWithBgCell: RswiftResources.NibReference<PostDetailsTextWithBgCell> { .init(name: "PostDetailsTextWithBgCell", bundle: bundle) }

    /// Nib `PostEventCell`.
    var postEventCell: RswiftResources.NibReference<PostEventCell> { .init(name: "PostEventCell", bundle: bundle) }

    /// Nib `PostEventTableViewCell`.
    var postEventTableViewCell: RswiftResources.NibReference<PostEventTableViewCell> { .init(name: "PostEventTableViewCell", bundle: bundle) }

    /// Nib `PostFileCell`.
    var postFileCell: RswiftResources.NibReference<PostFileCell> { .init(name: "PostFileCell", bundle: bundle) }

    /// Nib `PostImageCell`.
    var postImageCell: RswiftResources.NibReference<PostImageCell> { .init(name: "PostImageCell", bundle: bundle) }

    /// Nib `PostPrivacyCell`.
    var postPrivacyCell: RswiftResources.NibReference<PostPrivacyCell> { .init(name: "PostPrivacyCell", bundle: bundle) }

    /// Nib `PostPrivacyDropDownController`.
    var postPrivacyDropDownController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "PostPrivacyDropDownController", bundle: bundle) }

    /// Nib `PostSettingsCell`.
    var postSettingsCell: RswiftResources.NibReference<PostSettingsCell> { .init(name: "PostSettingsCell", bundle: bundle) }

    /// Nib `PostSettingsController`.
    var postSettingsController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "PostSettingsController", bundle: bundle) }

    /// Nib `PostSettingsDescriptionCell`.
    var postSettingsDescriptionCell: RswiftResources.NibReference<PostSettingsDescriptionCell> { .init(name: "PostSettingsDescriptionCell", bundle: bundle) }

    /// Nib `PostSettingsDropDownController`.
    var postSettingsDropDownController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "PostSettingsDropDownController", bundle: bundle) }

    /// Nib `PostTagsCell`.
    var postTagsCell: RswiftResources.NibReference<PostTagsCell> { .init(name: "PostTagsCell", bundle: bundle) }

    /// Nib `PostVideoCell`.
    var postVideoCell: RswiftResources.NibReference<PostVideoCell> { .init(name: "PostVideoCell", bundle: bundle) }

    /// Nib `PPImagePostCell`.
    var ppImagePostCell: RswiftResources.NibReference<PPImagePostCell> { .init(name: "PPImagePostCell", bundle: bundle) }

    /// Nib `PPTextPostCell`.
    var ppTextPostCell: RswiftResources.NibReference<PPTextPostCell> { .init(name: "PPTextPostCell", bundle: bundle) }

    /// Nib `PPTextWithBgPostCell`.
    var ppTextWithBgPostCell: RswiftResources.NibReference<PPTextWithBgPostCell> { .init(name: "PPTextWithBgPostCell", bundle: bundle) }

    /// Nib `PrivacyPolicyController`.
    var privacyPolicyController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "PrivacyPolicyController", bundle: bundle) }

    /// Nib `ProfessionalProfileController`.
    var professionalProfileController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "ProfessionalProfileController", bundle: bundle) }

    /// Nib `ProfileAboutHeader`.
    var profileAboutHeader: RswiftResources.NibReference<ProfileAboutHeader> { .init(name: "ProfileAboutHeader", bundle: bundle) }

    /// Nib `ProfileController`.
    var profileController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "ProfileController", bundle: bundle) }

    /// Nib `ProfileFriendsController`.
    var profileFriendsController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "ProfileFriendsController", bundle: bundle) }

    /// Nib `ProfileHeaderInfo`.
    var profileHeaderInfo: RswiftResources.NibReference<ProfileHeaderInfo> { .init(name: "ProfileHeaderInfo", bundle: bundle) }

    /// Nib `ProfileSocialLinks`.
    var profileSocialLinks: RswiftResources.NibReference<ProfileSocialLinks> { .init(name: "ProfileSocialLinks", bundle: bundle) }

    /// Nib `RankCell`.
    var rankCell: RswiftResources.NibReference<RankCell> { .init(name: "RankCell", bundle: bundle) }

    /// Nib `RankHeaderCell`.
    var rankHeaderCell: RswiftResources.NibReference<RankHeaderCell> { .init(name: "RankHeaderCell", bundle: bundle) }

    /// Nib `ReelCategoryTableViewCell`.
    var reelCategoryTableViewCell: RswiftResources.NibReference<ReelCategoryTableViewCell> { .init(name: "ReelCategoryTableViewCell", bundle: bundle) }

    /// Nib `ReelsCategoriesViewController`.
    var reelsCategoriesViewController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "ReelsCategoriesViewController", bundle: bundle) }

    /// Nib `ReelsCollectionViewCell`.
    var reelsCollectionViewCell: RswiftResources.NibReference<ReelsCollectionViewCell> { .init(name: "ReelsCollectionViewCell", bundle: bundle) }

    /// Nib `ReelsCommentsController`.
    var reelsCommentsController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "ReelsCommentsController", bundle: bundle) }

    /// Nib `ReelsPostViewController`.
    var reelsPostViewController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "ReelsPostViewController", bundle: bundle) }

    /// Nib `ReelsViewController`.
    var reelsViewController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "ReelsViewController", bundle: bundle) }

    /// Nib `remoteParticipantGroupCollectionViewCell`.
    var remoteParticipantGroupCollectionViewCell: RswiftResources.NibReference<remoteParticipantGroupCollectionViewCell> { .init(name: "remoteParticipantGroupCollectionViewCell", bundle: bundle) }

    /// Nib `ReportSubViewController`.
    var reportSubViewController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "ReportSubViewController", bundle: bundle) }

    /// Nib `ReportThanksViewController`.
    var reportThanksViewController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "ReportThanksViewController", bundle: bundle) }

    /// Nib `ReportViewController`.
    var reportViewController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "ReportViewController", bundle: bundle) }

    /// Nib `ReusableOptionsFilterViewController`.
    var reusableOptionsFilterViewController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "ReusableOptionsFilterViewController", bundle: bundle) }

    /// Nib `ReusbaleOptionSelectionController`.
    var reusbaleOptionSelectionController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "ReusbaleOptionSelectionController", bundle: bundle) }

    /// Nib `SavedMarketplaceItemsController`.
    var savedMarketplaceItemsController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "SavedMarketplaceItemsController", bundle: bundle) }

    /// Nib `SearchCategoryCell`.
    var searchCategoryCell: RswiftResources.NibReference<SearchCategoryCell> { .init(name: "SearchCategoryCell", bundle: bundle) }

    /// Nib `SearchController`.
    var searchController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "SearchController", bundle: bundle) }

    /// Nib `SearchDetailsController`.
    var searchDetailsController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "SearchDetailsController", bundle: bundle) }

    /// Nib `SeeAllCell`.
    var seeAllCell: RswiftResources.NibReference<SeeAllCell> { .init(name: "SeeAllCell", bundle: bundle) }

    /// Nib `SeeAllVC`.
    var seeAllVC: RswiftResources.NibReference<UIKit.UIView> { .init(name: "SeeAllVC", bundle: bundle) }

    /// Nib `SelectFriendsController`.
    var selectFriendsController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "SelectFriendsController", bundle: bundle) }

    /// Nib `SelectLocationController`.
    var selectLocationController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "SelectLocationController", bundle: bundle) }

    /// Nib `SelectPhotoController`.
    var selectPhotoController: RswiftResources.NibReference<IQKeyboardManagerSwift.IQPreviousNextView> { .init(name: "SelectPhotoController", bundle: bundle) }

    /// Nib `SelectUniversityController`.
    var selectUniversityController: RswiftResources.NibReference<IQKeyboardManagerSwift.IQPreviousNextView> { .init(name: "SelectUniversityController", bundle: bundle) }

    /// Nib `SetPasswordController`.
    var setPasswordController: RswiftResources.NibReference<IQKeyboardManagerSwift.IQPreviousNextView> { .init(name: "SetPasswordController", bundle: bundle) }

    /// Nib `SettingsController`.
    var settingsController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "SettingsController", bundle: bundle) }

    /// Nib `SettingsLogoCell`.
    var settingsLogoCell: RswiftResources.NibReference<SettingsLogoCell> { .init(name: "SettingsLogoCell", bundle: bundle) }

    /// Nib `ShowCommentsController`.
    var showCommentsController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "ShowCommentsController", bundle: bundle) }

    /// Nib `ShowStoriesController`.
    var showStoriesController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "ShowStoriesController", bundle: bundle) }

    /// Nib `SignupController`.
    var signupController: RswiftResources.NibReference<IQKeyboardManagerSwift.IQPreviousNextView> { .init(name: "SignupController", bundle: bundle) }

    /// Nib `SkillController`.
    var skillController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "SkillController", bundle: bundle) }

    /// Nib `SkillTableCell`.
    var skillTableCell: RswiftResources.NibReference<SkillTableCell> { .init(name: "SkillTableCell", bundle: bundle) }

    /// Nib `StoreController`.
    var storeController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "StoreController", bundle: bundle) }

    /// Nib `StoreItemCell`.
    var storeItemCell: RswiftResources.NibReference<StoreItemCell> { .init(name: "StoreItemCell", bundle: bundle) }

    /// Nib `StoriesCell`.
    var storiesCell: RswiftResources.NibReference<StoriesCell> { .init(name: "StoriesCell", bundle: bundle) }

    /// Nib `StoryCell`.
    var storyCell: RswiftResources.NibReference<StoryCell> { .init(name: "StoryCell", bundle: bundle) }

    /// Nib `StoryFontCell`.
    var storyFontCell: RswiftResources.NibReference<StoryFontCell> { .init(name: "StoryFontCell", bundle: bundle) }

    /// Nib `StoryItemCell`.
    var storyItemCell: RswiftResources.NibReference<StoryItemCell> { .init(name: "StoryItemCell", bundle: bundle) }

    /// Nib `StoryMediaFilesViewController`.
    var storyMediaFilesViewController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "StoryMediaFilesViewController", bundle: bundle) }

    /// Nib `StoryPageIndicatorCell`.
    var storyPageIndicatorCell: RswiftResources.NibReference<StoryPageIndicatorCell> { .init(name: "StoryPageIndicatorCell", bundle: bundle) }

    /// Nib `TagEvent`.
    var tagEvent: RswiftResources.NibReference<UIKit.UIView> { .init(name: "TagEvent", bundle: bundle) }

    /// Nib `TagGroup`.
    var tagGroup: RswiftResources.NibReference<UIKit.UIView> { .init(name: "TagGroup", bundle: bundle) }

    /// Nib `TagUserCell`.
    var tagUserCell: RswiftResources.NibReference<TagUserCell> { .init(name: "TagUserCell", bundle: bundle) }

    /// Nib `TextInputController`.
    var textInputController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "TextInputController", bundle: bundle) }

    /// Nib `TextPostCell`.
    var textPostCell: RswiftResources.NibReference<TextPostCell> { .init(name: "TextPostCell", bundle: bundle) }

    /// Nib `TextWithBgPostCell`.
    var textWithBgPostCell: RswiftResources.NibReference<TextWithBgPostCell> { .init(name: "TextWithBgPostCell", bundle: bundle) }

    /// Nib `TopHeaderV`.
    var topHeaderV: RswiftResources.NibReference<TopHeaderV> { .init(name: "TopHeaderV", bundle: bundle) }

    /// Nib `TopLeadersCell`.
    var topLeadersCell: RswiftResources.NibReference<TopLeadersCell> { .init(name: "TopLeadersCell", bundle: bundle) }

    /// Nib `TopMenuV`.
    var topMenuV: RswiftResources.NibReference<EDYOU.TopMenuV> { .init(name: "TopMenuV", bundle: bundle) }

    /// Nib `TrendingViewCell`.
    var trendingViewCell: RswiftResources.NibReference<TrendingViewCell> { .init(name: "TrendingViewCell", bundle: bundle) }

    /// Nib `UploadPostCell`.
    var uploadPostCell: RswiftResources.NibReference<UploadPostCell> { .init(name: "UploadPostCell", bundle: bundle) }

    /// Nib `UserCell`.
    var userCell: RswiftResources.NibReference<UserCell> { .init(name: "UserCell", bundle: bundle) }

    /// Nib `UserImageCell`.
    var userImageCell: RswiftResources.NibReference<UserImageCell> { .init(name: "UserImageCell", bundle: bundle) }

    /// Nib `UsersListController`.
    var usersListController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "UsersListController", bundle: bundle) }

    /// Nib `VerifyCodeController`.
    var verifyCodeController: RswiftResources.NibReference<IQKeyboardManagerSwift.IQPreviousNextView> { .init(name: "VerifyCodeController", bundle: bundle) }

    /// Nib `VerifyEmailController`.
    var verifyEmailController: RswiftResources.NibReference<IQKeyboardManagerSwift.IQPreviousNextView> { .init(name: "VerifyEmailController", bundle: bundle) }

    /// Nib `VideoCall`.
    var videoCall: RswiftResources.NibReference<UIKit.UIView> { .init(name: "VideoCall", bundle: bundle) }

    /// Nib `WebViewController`.
    var webViewController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "WebViewController", bundle: bundle) }

    /// Nib `WelcomeController`.
    var welcomeController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "WelcomeController", bundle: bundle) }

    /// Nib `WelcomeInviteController`.
    var welcomeInviteController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "WelcomeInviteController", bundle: bundle) }

    /// Nib `WorkDetailCell`.
    var workDetailCell: RswiftResources.NibReference<WorkDetailCell> { .init(name: "WorkDetailCell", bundle: bundle) }

    /// Nib `YPLibraryView`.
    var ypLibraryView: RswiftResources.NibReference<EDLibraryView> { .init(name: "YPLibraryView", bundle: bundle) }

    func validate() throws {
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "arrow.backward") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'arrow.backward' is used in nib 'AddEmailController', but couldn't be loaded.") } }
      if UIKit.UIImage(named: "mailIcon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'mailIcon' is used in nib 'AddEmailController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "background", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'background' is used in nib 'AddEmailController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "buttons_green", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'buttons_green' is used in nib 'AddEmailController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "profile_image_dummy", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'profile_image_dummy' is used in nib 'AddFriendTableViewCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "verified", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'verified' is used in nib 'AddFriendTableViewCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "CharcoalGrey", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'CharcoalGrey' is used in nib 'AddFriendTableViewCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "Down", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Down' is used in nib 'AddMajorViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "CharcoalGrey", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'CharcoalGrey' is used in nib 'AddMajorViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "buttons_green", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'buttons_green' is used in nib 'AddMajorViewController', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "arrow.backward") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'arrow.backward' is used in nib 'AddNameController', but couldn't be loaded.") } }
      if UIKit.UIImage(named: "userName", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'userName' is used in nib 'AddNameController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "background", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'background' is used in nib 'AddNameController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "buttons_green", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'buttons_green' is used in nib 'AddNameController', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "multiply") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'multiply' is used in nib 'AddStoryController', but couldn't be loaded.") } }
      if UIKit.UIImage(named: "story_camera_icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'story_camera_icon' is used in nib 'AddStoryController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "story_image_icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'story_image_icon' is used in nib 'AddStoryController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "story_text_icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'story_text_icon' is used in nib 'AddStoryController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "story_video_icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'story_video_icon' is used in nib 'AddStoryController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "buttons_green", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'buttons_green' is used in nib 'AddStoryController', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "multiply") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'multiply' is used in nib 'AddTextController', but couldn't be loaded.") } }
      if UIKit.UIColor(named: "buttons_green", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'buttons_green' is used in nib 'AddTextController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_cross", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_cross' is used in nib 'AllChatReactionsController', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "multiply.circle") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'multiply.circle' is used in nib 'AttachetImageCell', but couldn't be loaded.") } }
      if UIKit.UIImage(named: "post_image_dummy", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'post_image_dummy' is used in nib 'AttachetImageCell', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "arrow.backward") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'arrow.backward' is used in nib 'BirthInfoController', but couldn't be loaded.") } }
      if UIKit.UIImage(named: "birth_day_icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'birth_day_icon' is used in nib 'BirthInfoController', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "chevron.down") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'chevron.down' is used in nib 'BirthInfoController', but couldn't be loaded.") } }
      if UIKit.UIImage(named: "gender_icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'gender_icon' is used in nib 'BirthInfoController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "background", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'background' is used in nib 'BirthInfoController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "buttons_green", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'buttons_green' is used in nib 'BirthInfoController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "sub_title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'sub_title' is used in nib 'BirthInfoController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "Search", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Search' is used in nib 'BlockListController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "back_arrow_icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'back_arrow_icon' is used in nib 'BlockListController', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "multiply") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'multiply' is used in nib 'BlockListController', but couldn't be loaded.") } }
      if UIKit.UIColor(named: "separator", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'separator' is used in nib 'BlockListController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "sub_title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'sub_title' is used in nib 'BlockListController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "label_text_color", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'label_text_color' is used in nib 'BorderedTextField', but couldn't be loaded.") }
      if UIKit.UIImage(named: "add_icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'add_icon' is used in nib 'CalendarController', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "chevron.left") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'chevron.left' is used in nib 'CalendarController', but couldn't be loaded.") } }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "chevron.right") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'chevron.right' is used in nib 'CalendarController', but couldn't be loaded.") } }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "multiply") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'multiply' is used in nib 'CalendarController', but couldn't be loaded.") } }
      if UIKit.UIColor(named: "buttons_green", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'buttons_green' is used in nib 'CalendarController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "separator", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'separator' is used in nib 'CalendarController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "sub_title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'sub_title' is used in nib 'CalendarController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'title' is used in nib 'CalendarController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "calendar_icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'calendar_icon' is used in nib 'CalendarEventCell', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "chevron.right") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'chevron.right' is used in nib 'CalendarEventCell', but couldn't be loaded.") } }
      if UIKit.UIImage(named: "post_image_dummy", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'post_image_dummy' is used in nib 'CalendarEventCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "separator", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'separator' is used in nib 'CalendarEventCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "sub_title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'sub_title' is used in nib 'CalendarEventCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "acceptCallIcon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'acceptCallIcon' is used in nib 'CallPopUP', but couldn't be loaded.") }
      if UIKit.UIImage(named: "rejectCallIcon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'rejectCallIcon' is used in nib 'CallPopUP', but couldn't be loaded.") }
      if UIKit.UIImage(named: "Down", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Down' is used in nib 'CertificateController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "NavigationBack", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'NavigationBack' is used in nib 'CertificateController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "RoundCheck", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'RoundCheck' is used in nib 'CertificateController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "buttons_green", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'buttons_green' is used in nib 'CertificateController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "separator", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'separator' is used in nib 'CertificateController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'title' is used in nib 'CertificateController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "delete icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'delete icon' is used in nib 'CertificationTableCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "editPencil", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'editPencil' is used in nib 'CertificationTableCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "buttons_green", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'buttons_green' is used in nib 'CertificationTableCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "back_arrow_icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'back_arrow_icon' is used in nib 'ChangePasswordController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "buttons_green", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'buttons_green' is used in nib 'ChangePasswordController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "separator", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'separator' is used in nib 'ChangePasswordController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'title' is used in nib 'ChangePasswordController', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "arrow.backward") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'arrow.backward' is used in nib 'ChatAddParticipantsController', but couldn't be loaded.") } }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "chevron.left") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'chevron.left' is used in nib 'ChatAddParticipantsController', but couldn't be loaded.") } }
      if UIKit.UIImage(named: "group_image_placeholder", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'group_image_placeholder' is used in nib 'ChatAddParticipantsController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "location_picker_search", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'location_picker_search' is used in nib 'ChatAddParticipantsController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "background_light", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'background_light' is used in nib 'ChatAddParticipantsController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "border", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'border' is used in nib 'ChatAddParticipantsController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "buttons_bg_gray", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'buttons_bg_gray' is used in nib 'ChatAddParticipantsController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "buttons_green", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'buttons_green' is used in nib 'ChatAddParticipantsController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "separator", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'separator' is used in nib 'ChatAddParticipantsController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "sub_title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'sub_title' is used in nib 'ChatAddParticipantsController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'title' is used in nib 'ChatAddParticipantsController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "EdYouGreen", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'EdYouGreen' is used in nib 'ChatReactionEmojiCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "EdYouLightGreen", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'EdYouLightGreen' is used in nib 'ChatReactionEmojiCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "EdYouLightGreen", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'EdYouLightGreen' is used in nib 'ChatReactionUserCell', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "ellipsis") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'ellipsis' is used in nib 'CommentCell', but couldn't be loaded.") } }
      if UIKit.UIImage(named: "ic_heart_add", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_heart_add' is used in nib 'CommentCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "profile_image_dummy", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'profile_image_dummy' is used in nib 'CommentCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "AccentColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'AccentColor' is used in nib 'CommentCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "background", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'background' is used in nib 'CommentCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "buttons_green", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'buttons_green' is used in nib 'CommentCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "reaction_background", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'reaction_background' is used in nib 'CommentCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "sub_title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'sub_title' is used in nib 'CommentCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "close_black", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'close_black' is used in nib 'CommentsHeaderTableViewCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "text_color", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'text_color' is used in nib 'CommentsHeaderTableViewCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "EventUser1", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'EventUser1' is used in nib 'ContactCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "tick_icon_white", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'tick_icon_white' is used in nib 'ContactCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "separator", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'separator' is used in nib 'ContactCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "text_color", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'text_color' is used in nib 'ContactCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "textfield_placeholder", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'textfield_placeholder' is used in nib 'ContactCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "back_arrow_icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'back_arrow_icon' is used in nib 'ContactUsController', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "chevron.down") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'chevron.down' is used in nib 'ContactUsController', but couldn't be loaded.") } }
      if UIKit.UIImage(named: "user-invite", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'user-invite' is used in nib 'ContactUsController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "border", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'border' is used in nib 'ContactUsController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "buttons_green", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'buttons_green' is used in nib 'ContactUsController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "separator", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'separator' is used in nib 'ContactUsController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "sub_title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'sub_title' is used in nib 'ContactUsController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'title' is used in nib 'ContactUsController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "add_picture_icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'add_picture_icon' is used in nib 'CreateChatGroupController', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "chevron.left") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'chevron.left' is used in nib 'CreateChatGroupController', but couldn't be loaded.") } }
      if UIKit.UIImage(named: "private_group_icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'private_group_icon' is used in nib 'CreateChatGroupController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "profile_image_dummy", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'profile_image_dummy' is used in nib 'CreateChatGroupController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "public_group_icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'public_group_icon' is used in nib 'CreateChatGroupController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "background_light", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'background_light' is used in nib 'CreateChatGroupController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "border", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'border' is used in nib 'CreateChatGroupController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "buttons_bg_gray", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'buttons_bg_gray' is used in nib 'CreateChatGroupController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "buttons_green", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'buttons_green' is used in nib 'CreateChatGroupController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "separator", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'separator' is used in nib 'CreateChatGroupController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "sub_title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'sub_title' is used in nib 'CreateChatGroupController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'title' is used in nib 'CreateChatGroupController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "NavigationBack", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'NavigationBack' is used in nib 'CreateEventController', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "chevron.down") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'chevron.down' is used in nib 'CreateEventController', but couldn't be loaded.") } }
      if UIKit.UIImage(named: "edit_image", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'edit_image' is used in nib 'CreateEventController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_cross_rounded_filled", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_cross_rounded_filled' is used in nib 'CreateEventController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "photo_placeholder", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'photo_placeholder' is used in nib 'CreateEventController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "EdYouGreen", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'EdYouGreen' is used in nib 'CreateEventController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "border", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'border' is used in nib 'CreateEventController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "buttons_green", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'buttons_green' is used in nib 'CreateEventController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "reaction_background", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'reaction_background' is used in nib 'CreateEventController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "separator", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'separator' is used in nib 'CreateEventController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "sub_title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'sub_title' is used in nib 'CreateEventController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'title' is used in nib 'CreateEventController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "EventUser1", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'EventUser1' is used in nib 'CreateGroupController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "EventUser2", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'EventUser2' is used in nib 'CreateGroupController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "EventUser3", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'EventUser3' is used in nib 'CreateGroupController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "GroupSelected", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'GroupSelected' is used in nib 'CreateGroupController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "GroupUnSelected", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'GroupUnSelected' is used in nib 'CreateGroupController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "back_arrow_icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'back_arrow_icon' is used in nib 'CreateGroupController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "edit_image", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'edit_image' is used in nib 'CreateGroupController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "photo_placeholder", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'photo_placeholder' is used in nib 'CreateGroupController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "private_group_icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'private_group_icon' is used in nib 'CreateGroupController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "public_group_icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'public_group_icon' is used in nib 'CreateGroupController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "EdYouGreen", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'EdYouGreen' is used in nib 'CreateGroupController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "border", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'border' is used in nib 'CreateGroupController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "buttons_green", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'buttons_green' is used in nib 'CreateGroupController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "reaction_background", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'reaction_background' is used in nib 'CreateGroupController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "separator", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'separator' is used in nib 'CreateGroupController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "sub_title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'sub_title' is used in nib 'CreateGroupController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'title' is used in nib 'CreateGroupController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "clip_Icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'clip_Icon' is used in nib 'CreateNewController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "create_clip_black_Icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'create_clip_black_Icon' is used in nib 'CreateNewController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "create_post_Icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'create_post_Icon' is used in nib 'CreateNewController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_cross", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_cross' is used in nib 'CreateNewController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "story_Icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'story_Icon' is used in nib 'CreateNewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "EdYouGreen", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'EdYouGreen' is used in nib 'CreateNewController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "add_story_icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'add_story_icon' is used in nib 'CreatePostCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "attach_image_template", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'attach_image_template' is used in nib 'CreatePostCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "gray_add_picture_icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'gray_add_picture_icon' is used in nib 'CreatePostCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "next_icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'next_icon' is used in nib 'CreatePostCell', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "square.and.pencil") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'square.and.pencil' is used in nib 'CreatePostCell', but couldn't be loaded.") } }
      if UIKit.UIColor(named: "border", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'border' is used in nib 'CreatePostCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "buttons_green", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'buttons_green' is used in nib 'CreatePostCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "separator", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'separator' is used in nib 'CreatePostCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "sub_title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'sub_title' is used in nib 'CreatePostCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "reply_icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'reply_icon' is used in nib 'CustomAlertView', but couldn't be loaded.") }
      if UIKit.UIImage(named: "cornell_university_logo", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'cornell_university_logo' is used in nib 'DataPickerCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "selectedCheck", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'selectedCheck' is used in nib 'DataPickerCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "buttons_green", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'buttons_green' is used in nib 'DataPickerCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "separator", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'separator' is used in nib 'DataPickerCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'title' is used in nib 'DataPickerCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "Search", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Search' is used in nib 'DataPickerController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "close_black", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'close_black' is used in nib 'DataPickerController', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "multiply") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'multiply' is used in nib 'DataPickerController', but couldn't be loaded.") } }
      if UIKit.UIColor(named: "sub_title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'sub_title' is used in nib 'DataPickerController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'title' is used in nib 'DataPickerController', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "heart") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'heart' is used in nib 'DealItemCell', but couldn't be loaded.") } }
      if UIKit.UIImage(named: "post_image_dummy", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'post_image_dummy' is used in nib 'DealItemCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "buttons_green", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'buttons_green' is used in nib 'DealItemCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "sub_title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'sub_title' is used in nib 'DealItemCell', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "arrow.backward") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'arrow.backward' is used in nib 'DealItemDetailsController', but couldn't be loaded.") } }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "arrow.right") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'arrow.right' is used in nib 'DealItemDetailsController', but couldn't be loaded.") } }
      if UIKit.UIImage(named: "chat_white_icon_with_no_bg", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'chat_white_icon_with_no_bg' is used in nib 'DealItemDetailsController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "deal_sms_icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'deal_sms_icon' is used in nib 'DealItemDetailsController', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "ellipsis") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'ellipsis' is used in nib 'DealItemDetailsController', but couldn't be loaded.") } }
      if UIKit.UIImage(named: "heart_unselected", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'heart_unselected' is used in nib 'DealItemDetailsController', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "laptopcomputer") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'laptopcomputer' is used in nib 'DealItemDetailsController', but couldn't be loaded.") } }
      if UIKit.UIImage(named: "location_icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'location_icon' is used in nib 'DealItemDetailsController', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "phone.fill") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'phone.fill' is used in nib 'DealItemDetailsController', but couldn't be loaded.") } }
      if UIKit.UIImage(named: "profile_image_dummy", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'profile_image_dummy' is used in nib 'DealItemDetailsController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "buttons_green", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'buttons_green' is used in nib 'DealItemDetailsController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "separator", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'separator' is used in nib 'DealItemDetailsController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "sub_title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'sub_title' is used in nib 'DealItemDetailsController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "Search", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Search' is used in nib 'DealsController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "category_icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'category_icon' is used in nib 'DealsController', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "chevron.down") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'chevron.down' is used in nib 'DealsController', but couldn't be loaded.") } }
      if UIKit.UIImage(named: "filter_icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'filter_icon' is used in nib 'DealsController', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "multiply") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'multiply' is used in nib 'DealsController', but couldn't be loaded.") } }
      if UIKit.UIColor(named: "separator", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'separator' is used in nib 'DealsController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "sub_title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'sub_title' is used in nib 'DealsController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "DocumentRectangle", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'DocumentRectangle' is used in nib 'DocumentController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "NavigationBack", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'NavigationBack' is used in nib 'DocumentController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "UploadDocument", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'UploadDocument' is used in nib 'DocumentController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "buttons_green", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'buttons_green' is used in nib 'DocumentController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "separator", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'separator' is used in nib 'DocumentController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'title' is used in nib 'DocumentController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "PDF", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'PDF' is used in nib 'DocumentView', but couldn't be loaded.") }
      if UIKit.UIColor(named: "text_color", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'text_color' is used in nib 'DocumentView', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "multiply") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'multiply' is used in nib 'DocumentViewerController', but couldn't be loaded.") } }
      if UIKit.UIImage(named: "PDF", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'PDF' is used in nib 'DocumentsTableCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "delete icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'delete icon' is used in nib 'DocumentsTableCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "background", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'background' is used in nib 'DocumentsTableCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "buttons_green", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'buttons_green' is used in nib 'DocumentsTableCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "back_arrow_icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'back_arrow_icon' is used in nib 'EditGroupController', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "exclamationmark.shield") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'exclamationmark.shield' is used in nib 'EditGroupController', but couldn't be loaded.") } }
      if UIKit.UIImage(named: "group_image_placeholder", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'group_image_placeholder' is used in nib 'EditGroupController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "border", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'border' is used in nib 'EditGroupController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "buttons_green", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'buttons_green' is used in nib 'EditGroupController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "messageBG", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'messageBG' is used in nib 'EditGroupController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "separator", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'separator' is used in nib 'EditGroupController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "sub_title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'sub_title' is used in nib 'EditGroupController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "NavigationBack", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'NavigationBack' is used in nib 'EditProfileAbout', but couldn't be loaded.") }
      if UIKit.UIColor(named: "buttons_green", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'buttons_green' is used in nib 'EditProfileAbout', but couldn't be loaded.") }
      if UIKit.UIColor(named: "separator", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'separator' is used in nib 'EditProfileAbout', but couldn't be loaded.") }
      if UIKit.UIColor(named: "title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'title' is used in nib 'EditProfileAbout', but couldn't be loaded.") }
      if UIKit.UIImage(named: "Cover", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Cover' is used in nib 'EditProfileCoverPhotoCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "delete icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'delete icon' is used in nib 'EditProfileCoverPhotoCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "dark_gray_text", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'dark_gray_text' is used in nib 'EditProfileCoverPhotoCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "dm_profile_holder", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'dm_profile_holder' is used in nib 'EditProfileImageCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_pencil", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_pencil' is used in nib 'EditProfileImageCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "Round_Back ", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Round_Back ' is used in nib 'EditProfilePhoto', but couldn't be loaded.") }
      if UIKit.UIImage(named: "White_Crop", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'White_Crop' is used in nib 'EditProfilePhoto', but couldn't be loaded.") }
      if UIKit.UIImage(named: "White_Pencil", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'White_Pencil' is used in nib 'EditProfilePhoto', but couldn't be loaded.") }
      if UIKit.UIImage(named: "White_filter", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'White_filter' is used in nib 'EditProfilePhoto', but couldn't be loaded.") }
      if UIKit.UIImage(named: "dm_profile_holder", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'dm_profile_holder' is used in nib 'EditProfilePhoto', but couldn't be loaded.") }
      if UIKit.UIImage(named: "gry_more_option 64", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'gry_more_option 64' is used in nib 'EditProfilePhoto', but couldn't be loaded.") }
      if UIKit.UIImage(named: "story_camera_icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'story_camera_icon' is used in nib 'EditProfilePhoto', but couldn't be loaded.") }
      if UIKit.UIColor(named: "border", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'border' is used in nib 'EditProfilePhoto', but couldn't be loaded.") }
      if UIKit.UIColor(named: "buttons_green", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'buttons_green' is used in nib 'EditProfilePhoto', but couldn't be loaded.") }
      if UIKit.UIColor(named: "like_disable", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'like_disable' is used in nib 'EditProfilePhoto', but couldn't be loaded.") }
      if UIKit.UIColor(named: "sub_title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'sub_title' is used in nib 'EditProfilePhoto', but couldn't be loaded.") }
      if UIKit.UIImage(named: "NavigationBack", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'NavigationBack' is used in nib 'EditProfileViewController', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "chevron.down") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'chevron.down' is used in nib 'EditProfileViewController', but couldn't be loaded.") } }
      if UIKit.UIColor(named: "buttons_green", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'buttons_green' is used in nib 'EditProfileViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "separator", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'separator' is used in nib 'EditProfileViewController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "delete icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'delete icon' is used in nib 'EditSkillTableViewCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "editPencil", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'editPencil' is used in nib 'EditSkillTableViewCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "buttons_green", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'buttons_green' is used in nib 'EditSkillTableViewCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "Down", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Down' is used in nib 'EducationController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "NavigationBack", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'NavigationBack' is used in nib 'EducationController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "buttons_green", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'buttons_green' is used in nib 'EducationController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "separator", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'separator' is used in nib 'EducationController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'title' is used in nib 'EducationController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "delete icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'delete icon' is used in nib 'EducationTableCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "editPencil", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'editPencil' is used in nib 'EducationTableCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_calender", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_calender' is used in nib 'EducationTableCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_location_marker", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_location_marker' is used in nib 'EducationTableCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "buttons_green", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'buttons_green' is used in nib 'EducationTableCell', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "arrow.backward") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'arrow.backward' is used in nib 'EducationalInfoController', but couldn't be loaded.") } }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "chevron.down") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'chevron.down' is used in nib 'EducationalInfoController', but couldn't be loaded.") } }
      if UIKit.UIImage(named: "degree_icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'degree_icon' is used in nib 'EducationalInfoController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "field_of_study", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'field_of_study' is used in nib 'EducationalInfoController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "universityIcon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'universityIcon' is used in nib 'EducationalInfoController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "background", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'background' is used in nib 'EducationalInfoController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "buttons_green", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'buttons_green' is used in nib 'EducationalInfoController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "sub_title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'sub_title' is used in nib 'EducationalInfoController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "mailIcon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'mailIcon' is used in nib 'EmailCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "tick_icon_white", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'tick_icon_white' is used in nib 'EmailCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "separator", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'separator' is used in nib 'EmailCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "text_color", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'text_color' is used in nib 'EmailCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "textfield_placeholder", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'textfield_placeholder' is used in nib 'EmailCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "sub_title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'sub_title' is used in nib 'EmojisController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'title' is used in nib 'EmojisController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "EmptyEvent", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'EmptyEvent' is used in nib 'EmptyTableCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "dark_gray_text", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'dark_gray_text' is used in nib 'EmptyTableCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "text_color", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'text_color' is used in nib 'EmptyTableCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "EventUser1", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'EventUser1' is used in nib 'EventCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "EventUser2", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'EventUser2' is used in nib 'EventCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "EventUser3", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'EventUser3' is used in nib 'EventCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "calendar_icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'calendar_icon' is used in nib 'EventCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "event_placeholder_square", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'event_placeholder_square' is used in nib 'EventCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "map-pin", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'map-pin' is used in nib 'EventCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "background_light", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'background_light' is used in nib 'EventCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "separator", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'separator' is used in nib 'EventCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "sub_title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'sub_title' is used in nib 'EventCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "EventUser1", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'EventUser1' is used in nib 'EventDetailsController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "EventUser2", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'EventUser2' is used in nib 'EventDetailsController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "EventUser3", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'EventUser3' is used in nib 'EventDetailsController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "Event_placeholder_Rectangle", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Event_placeholder_Rectangle' is used in nib 'EventDetailsController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "arrow-right", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'arrow-right' is used in nib 'EventDetailsController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "chat_white_icon_with_no_bg", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'chat_white_icon_with_no_bg' is used in nib 'EventDetailsController', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "checkmark.circle") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'checkmark.circle' is used in nib 'EventDetailsController', but couldn't be loaded.") } }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "chevron.backward") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'chevron.backward' is used in nib 'EventDetailsController', but couldn't be loaded.") } }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "ellipsis") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'ellipsis' is used in nib 'EventDetailsController', but couldn't be loaded.") } }
      if UIKit.UIImage(named: "favourite_event", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'favourite_event' is used in nib 'EventDetailsController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "favourite_event_filled", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'favourite_event_filled' is used in nib 'EventDetailsController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "icon_calendar", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'icon_calendar' is used in nib 'EventDetailsController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "icon_fashion", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'icon_fashion' is used in nib 'EventDetailsController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "icon_video", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'icon_video' is used in nib 'EventDetailsController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "link", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'link' is used in nib 'EventDetailsController', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "star") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'star' is used in nib 'EventDetailsController', but couldn't be loaded.") } }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "xmark.circle") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'xmark.circle' is used in nib 'EventDetailsController', but couldn't be loaded.") } }
      if UIKit.UIColor(named: "EdYouGreen", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'EdYouGreen' is used in nib 'EventDetailsController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "buttons_green", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'buttons_green' is used in nib 'EventDetailsController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "separator", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'separator' is used in nib 'EventDetailsController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "sub_title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'sub_title' is used in nib 'EventDetailsController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "text_color", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'text_color' is used in nib 'EventDetailsController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'title' is used in nib 'EventDetailsController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "NavigationBack", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'NavigationBack' is used in nib 'EventGuestListController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "Search", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Search' is used in nib 'EventGuestListController', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "multiply") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'multiply' is used in nib 'EventGuestListController', but couldn't be loaded.") } }
      if UIKit.UIImage(named: "user-plus", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'user-plus' is used in nib 'EventGuestListController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "sub_title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'sub_title' is used in nib 'EventGuestListController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "EventUser1", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'EventUser1' is used in nib 'EventInviteController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "EventUser2", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'EventUser2' is used in nib 'EventInviteController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "EventUser3", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'EventUser3' is used in nib 'EventInviteController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "alert-circle", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'alert-circle' is used in nib 'EventInviteController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "check_circle_outline", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'check_circle_outline' is used in nib 'EventInviteController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "icon_calendar", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'icon_calendar' is used in nib 'EventInviteController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "icon_fashion", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'icon_fashion' is used in nib 'EventInviteController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "icon_video", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'icon_video' is used in nib 'EventInviteController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "link", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'link' is used in nib 'EventInviteController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "post_image_dummy", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'post_image_dummy' is used in nib 'EventInviteController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "users_green_icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'users_green_icon' is used in nib 'EventInviteController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "x-circle", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'x-circle' is used in nib 'EventInviteController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "EdYouGreen", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'EdYouGreen' is used in nib 'EventInviteController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "separator", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'separator' is used in nib 'EventInviteController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "sub_title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'sub_title' is used in nib 'EventInviteController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "text_color", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'text_color' is used in nib 'EventInviteController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "EventUser1", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'EventUser1' is used in nib 'EventTableCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "EventUser2", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'EventUser2' is used in nib 'EventTableCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "EventUser3", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'EventUser3' is used in nib 'EventTableCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "calendar_icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'calendar_icon' is used in nib 'EventTableCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "event_placeholder_square", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'event_placeholder_square' is used in nib 'EventTableCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "map-pin", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'map-pin' is used in nib 'EventTableCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "separator", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'separator' is used in nib 'EventTableCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "sub_title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'sub_title' is used in nib 'EventTableCell', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "arrow.backward") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'arrow.backward' is used in nib 'EventUsersController', but couldn't be loaded.") } }
      if UIKit.UIColor(named: "separator", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'separator' is used in nib 'EventUsersController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'title' is used in nib 'EventUsersController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "NavigationBack", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'NavigationBack' is used in nib 'EventsController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "Search", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Search' is used in nib 'EventsController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "add_icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'add_icon' is used in nib 'EventsController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_down", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_down' is used in nib 'EventsController', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "multiply") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'multiply' is used in nib 'EventsController', but couldn't be loaded.") } }
      if UIKit.UIColor(named: "buttons_green", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'buttons_green' is used in nib 'EventsController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "home_end", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'home_end' is used in nib 'EventsController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "sub_title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'sub_title' is used in nib 'EventsController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "NavigationBack", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'NavigationBack' is used in nib 'EventsFilterViewController', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "checkmark.circle.fill") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'checkmark.circle.fill' is used in nib 'EventsFilterViewController', but couldn't be loaded.") } }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "circle") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'circle' is used in nib 'EventsFilterViewController', but couldn't be loaded.") } }
      if UIKit.UIColor(named: "buttons_green", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'buttons_green' is used in nib 'EventsFilterViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "sub_title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'sub_title' is used in nib 'EventsFilterViewController', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "arrow.backward") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'arrow.backward' is used in nib 'EventsListController', but couldn't be loaded.") } }
      if UIKit.UIColor(named: "separator", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'separator' is used in nib 'EventsListController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'title' is used in nib 'EventsListController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "Down", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Down' is used in nib 'EventsSubNavBarCellItem', but couldn't be loaded.") }
      if UIKit.UIImage(named: "filter_icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'filter_icon' is used in nib 'EventsSubNavBarCellItem', but couldn't be loaded.") }
      if UIKit.UIColor(named: "messageBG", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'messageBG' is used in nib 'EventsSubNavBarCellItem', but couldn't be loaded.") }
      if UIKit.UIImage(named: "NavigationBack", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'NavigationBack' is used in nib 'EventsTimeFilterViewController', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "checkmark.circle.fill") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'checkmark.circle.fill' is used in nib 'EventsTimeFilterViewController', but couldn't be loaded.") } }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "chevron.forward") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'chevron.forward' is used in nib 'EventsTimeFilterViewController', but couldn't be loaded.") } }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "circle") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'circle' is used in nib 'EventsTimeFilterViewController', but couldn't be loaded.") } }
      if UIKit.UIColor(named: "buttons_green", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'buttons_green' is used in nib 'EventsTimeFilterViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "sub_title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'sub_title' is used in nib 'EventsTimeFilterViewController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "Down", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Down' is used in nib 'ExperienceController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "NavigationBack", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'NavigationBack' is used in nib 'ExperienceController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "RoundCheck", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'RoundCheck' is used in nib 'ExperienceController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "RoundUNCheck", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'RoundUNCheck' is used in nib 'ExperienceController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "buttons_green", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'buttons_green' is used in nib 'ExperienceController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "separator", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'separator' is used in nib 'ExperienceController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'title' is used in nib 'ExperienceController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "work", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'work' is used in nib 'ExperienceDetailCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "delete icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'delete icon' is used in nib 'ExperienceTableCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "editPencil", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'editPencil' is used in nib 'ExperienceTableCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_calender", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_calender' is used in nib 'ExperienceTableCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_clock", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_clock' is used in nib 'ExperienceTableCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_location_marker", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_location_marker' is used in nib 'ExperienceTableCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "buttons_green", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'buttons_green' is used in nib 'ExperienceTableCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "RoundCheck", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'RoundCheck' is used in nib 'ExperienceTypeTableViewCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "event_select", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'event_select' is used in nib 'ExperienceTypeTableViewCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "close_black", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'close_black' is used in nib 'ExperienceTypeViewController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "Search", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Search' is used in nib 'FavEventsController', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "multiply") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'multiply' is used in nib 'FavEventsController', but couldn't be loaded.") } }
      if UIKit.UIColor(named: "separator", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'separator' is used in nib 'FavEventsController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "sub_title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'sub_title' is used in nib 'FavEventsController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "Search", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Search' is used in nib 'FavFriendsController', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "multiply") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'multiply' is used in nib 'FavFriendsController', but couldn't be loaded.") } }
      if UIKit.UIColor(named: "separator", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'separator' is used in nib 'FavFriendsController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "sub_title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'sub_title' is used in nib 'FavFriendsController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "Search", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Search' is used in nib 'FavGroupsController', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "multiply") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'multiply' is used in nib 'FavGroupsController', but couldn't be loaded.") } }
      if UIKit.UIColor(named: "separator", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'separator' is used in nib 'FavGroupsController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "sub_title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'sub_title' is used in nib 'FavGroupsController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "Search", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Search' is used in nib 'FavPostsController', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "multiply") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'multiply' is used in nib 'FavPostsController', but couldn't be loaded.") } }
      if UIKit.UIColor(named: "separator", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'separator' is used in nib 'FavPostsController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "sub_title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'sub_title' is used in nib 'FavPostsController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "back_arrow_icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'back_arrow_icon' is used in nib 'FavoriteViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "separator", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'separator' is used in nib 'FavoriteViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'title' is used in nib 'FavoriteViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "buttons_green", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'buttons_green' is used in nib 'FilterReusableShowResultsTableViewCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "Arrow-Gray", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Arrow-Gray' is used in nib 'FilterReusableTableViewCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "Recent-Posts", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Recent-Posts' is used in nib 'FilterReusableTableViewCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "RoundCheck", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'RoundCheck' is used in nib 'FilterReusableTableViewCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "back_arrow_icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'back_arrow_icon' is used in nib 'ForgotPasswordController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "mailIcon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'mailIcon' is used in nib 'ForgotPasswordController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "background", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'background' is used in nib 'ForgotPasswordController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "buttons_green", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'buttons_green' is used in nib 'ForgotPasswordController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "post_image_dummy", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'post_image_dummy' is used in nib 'FriendCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "Search", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Search' is used in nib 'FriendsController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "add_icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'add_icon' is used in nib 'FriendsController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "back_arrow_icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'back_arrow_icon' is used in nib 'FriendsController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_cross_rounded_filled", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_cross_rounded_filled' is used in nib 'FriendsController', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "multiply") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'multiply' is used in nib 'FriendsController', but couldn't be loaded.") } }
      if UIKit.UIColor(named: "EdYouGreen", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'EdYouGreen' is used in nib 'FriendsController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "buttons_green", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'buttons_green' is used in nib 'FriendsController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "separator", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'separator' is used in nib 'FriendsController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "sub_title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'sub_title' is used in nib 'FriendsController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "friends_grey_icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'friends_grey_icon' is used in nib 'FriendsListCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "next_icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'next_icon' is used in nib 'FriendsListCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "buttons_green", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'buttons_green' is used in nib 'FriendsListCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "separator", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'separator' is used in nib 'FriendsListCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "sub_title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'sub_title' is used in nib 'FriendsListCell', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "multiply") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'multiply' is used in nib 'FullImageController', but couldn't be loaded.") } }
      if UIKit.UIImage(named: "CallChatIcon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'CallChatIcon' is used in nib 'FullScreenCallPopup', but couldn't be loaded.") }
      if UIKit.UIImage(named: "CallMinimizeIcon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'CallMinimizeIcon' is used in nib 'FullScreenCallPopup', but couldn't be loaded.") }
      if UIKit.UIImage(named: "acceptCallIcon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'acceptCallIcon' is used in nib 'FullScreenCallPopup', but couldn't be loaded.") }
      if UIKit.UIImage(named: "rejectCallIcon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'rejectCallIcon' is used in nib 'FullScreenCallPopup', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "arrow.backward") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'arrow.backward' is used in nib 'GroupBlockedUsersController', but couldn't be loaded.") } }
      if UIKit.UIColor(named: "separator", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'separator' is used in nib 'GroupBlockedUsersController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "sub_title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'sub_title' is used in nib 'GroupBlockedUsersController', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "checkmark.square.fill") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'checkmark.square.fill' is used in nib 'GroupCell', but couldn't be loaded.") } }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "ellipsis") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'ellipsis' is used in nib 'GroupCell', but couldn't be loaded.") } }
      if UIKit.UIImage(named: "group_placeHolder", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'group_placeHolder' is used in nib 'GroupCell', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "multiply") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'multiply' is used in nib 'GroupCell', but couldn't be loaded.") } }
      if UIKit.UIColor(named: "border", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'border' is used in nib 'GroupCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "buttons_green", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'buttons_green' is used in nib 'GroupCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "sub_title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'sub_title' is used in nib 'GroupCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "EventUser1", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'EventUser1' is used in nib 'GroupDetailCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "EventUser2", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'EventUser2' is used in nib 'GroupDetailCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "EventUser3", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'EventUser3' is used in nib 'GroupDetailCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "clock-red-icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'clock-red-icon' is used in nib 'GroupDetailCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "photo_unselect", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'photo_unselect' is used in nib 'GroupDetailCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "plus_icon_white", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'plus_icon_white' is used in nib 'GroupDetailCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "posts_tab_icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'posts_tab_icon' is used in nib 'GroupDetailCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "public_group_icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'public_group_icon' is used in nib 'GroupDetailCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "user-invite", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'user-invite' is used in nib 'GroupDetailCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "EdYouGreen", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'EdYouGreen' is used in nib 'GroupDetailCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "buttons_green", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'buttons_green' is used in nib 'GroupDetailCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "messageBG", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'messageBG' is used in nib 'GroupDetailCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "separator", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'separator' is used in nib 'GroupDetailCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "sub_title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'sub_title' is used in nib 'GroupDetailCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "text_color", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'text_color' is used in nib 'GroupDetailCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "NavigationBack", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'NavigationBack' is used in nib 'GroupFilterController', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "checkmark.circle.fill") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'checkmark.circle.fill' is used in nib 'GroupFilterController', but couldn't be loaded.") } }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "circle") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'circle' is used in nib 'GroupFilterController', but couldn't be loaded.") } }
      if UIKit.UIColor(named: "buttons_green", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'buttons_green' is used in nib 'GroupFilterController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "sub_title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'sub_title' is used in nib 'GroupFilterController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "back_arrow_icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'back_arrow_icon' is used in nib 'GroupHeaderImageTableViewCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "dots_icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'dots_icon' is used in nib 'GroupHeaderImageTableViewCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "group_cover_placeholder", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'group_cover_placeholder' is used in nib 'GroupHeaderImageTableViewCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "close_black", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'close_black' is used in nib 'GroupManageOptionsController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "back_arrow_icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'back_arrow_icon' is used in nib 'GroupMemberRequestsController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "separator", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'separator' is used in nib 'GroupMemberRequestsController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "sub_title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'sub_title' is used in nib 'GroupMemberRequestsController', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "arrow.backward") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'arrow.backward' is used in nib 'GroupMembersController', but couldn't be loaded.") } }
      if UIKit.UIColor(named: "separator", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'separator' is used in nib 'GroupMembersController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "sub_title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'sub_title' is used in nib 'GroupMembersController', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "multiply") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'multiply' is used in nib 'GroupTableCell', but couldn't be loaded.") } }
      if UIKit.UIImage(named: "profile_image_dummy", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'profile_image_dummy' is used in nib 'GroupTableCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "border", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'border' is used in nib 'GroupTableCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "buttons_green", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'buttons_green' is used in nib 'GroupTableCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "sub_title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'sub_title' is used in nib 'GroupTableCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "Search", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Search' is used in nib 'GroupsController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "add_icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'add_icon' is used in nib 'GroupsController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "back_arrow_icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'back_arrow_icon' is used in nib 'GroupsController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "filter_icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'filter_icon' is used in nib 'GroupsController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_down", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_down' is used in nib 'GroupsController', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "multiply") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'multiply' is used in nib 'GroupsController', but couldn't be loaded.") } }
      if UIKit.UIColor(named: "EdYouGreen", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'EdYouGreen' is used in nib 'GroupsController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "home_end", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'home_end' is used in nib 'GroupsController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "sub_title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'sub_title' is used in nib 'GroupsController', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "arrow.backward") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'arrow.backward' is used in nib 'GroupsListController', but couldn't be loaded.") } }
      if UIKit.UIColor(named: "separator", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'separator' is used in nib 'GroupsListController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'title' is used in nib 'GroupsListController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "post_hidden", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'post_hidden' is used in nib 'HidePostTableViewCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "report", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'report' is used in nib 'HidePostTableViewCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "undo", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'undo' is used in nib 'HidePostTableViewCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "mailIcon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'mailIcon' is used in nib 'HistoryCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "tick_icon_white", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'tick_icon_white' is used in nib 'HistoryCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "dark_gray_text", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'dark_gray_text' is used in nib 'HistoryCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "separator", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'separator' is used in nib 'HistoryCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "text_color", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'text_color' is used in nib 'HistoryCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "textfield_placeholder", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'textfield_placeholder' is used in nib 'HistoryCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "edyou_text_logo", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'edyou_text_logo' is used in nib 'HomeController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_down", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_down' is used in nib 'HomeController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "notification_bell_icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'notification_bell_icon' is used in nib 'HomeController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "profile_image_dummy", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'profile_image_dummy' is used in nib 'HomeController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "NavigationColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'NavigationColor' is used in nib 'HomeController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "buttons_green", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'buttons_green' is used in nib 'HomeController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "separator", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'separator' is used in nib 'HomeController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "sub_title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'sub_title' is used in nib 'HomeController', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "checkmark.square.fill") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'checkmark.square.fill' is used in nib 'HomeDropDownController', but couldn't be loaded.") } }
      if UIKit.UIImage(named: "home_favourite_icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'home_favourite_icon' is used in nib 'HomeDropDownController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "home_fire_icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'home_fire_icon' is used in nib 'HomeDropDownController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "home_friends_icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'home_friends_icon' is used in nib 'HomeDropDownController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "home_group_icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'home_group_icon' is used in nib 'HomeDropDownController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "buttons_green", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'buttons_green' is used in nib 'HomeDropDownController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'title' is used in nib 'HomeDropDownController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "play_icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'play_icon' is used in nib 'ImageCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "post_image_dummy", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'post_image_dummy' is used in nib 'ImageCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "add_emoji_template", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'add_emoji_template' is used in nib 'ImagePostCell', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "arrowtriangle.right.fill") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'arrowtriangle.right.fill' is used in nib 'ImagePostCell', but couldn't be loaded.") } }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "ellipsis") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'ellipsis' is used in nib 'ImagePostCell', but couldn't be loaded.") } }
      if UIKit.UIImage(named: "favourite_event", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'favourite_event' is used in nib 'ImagePostCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "favourite_event_filled", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'favourite_event_filled' is used in nib 'ImagePostCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "heart_unselected", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'heart_unselected' is used in nib 'ImagePostCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "profile_image_dummy", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'profile_image_dummy' is used in nib 'ImagePostCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "verified", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'verified' is used in nib 'ImagePostCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "AccentColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'AccentColor' is used in nib 'ImagePostCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "background", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'background' is used in nib 'ImagePostCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "buttons_green", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'buttons_green' is used in nib 'ImagePostCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "reaction_background", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'reaction_background' is used in nib 'ImagePostCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "sub_title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'sub_title' is used in nib 'ImagePostCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "text_color", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'text_color' is used in nib 'ImagePostCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "NavigationBack", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'NavigationBack' is used in nib 'InviteCodeController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "buttons_green", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'buttons_green' is used in nib 'InviteCodeController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "separator", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'separator' is used in nib 'InviteCodeController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'title' is used in nib 'InviteCodeController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "Invite-bro 1", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Invite-bro 1' is used in nib 'InviteController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "NavigationBack", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'NavigationBack' is used in nib 'InviteController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "Search", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Search' is used in nib 'InviteController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "Send-white", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Send-white' is used in nib 'InviteController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "mailIcon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'mailIcon' is used in nib 'InviteController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "separator", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'separator' is used in nib 'InviteController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "sub_title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'sub_title' is used in nib 'InviteController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "text_color", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'text_color' is used in nib 'InviteController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'title' is used in nib 'InviteController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "CharcoalGrey", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'CharcoalGrey' is used in nib 'InviteFriendViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "buttons_green", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'buttons_green' is used in nib 'InviteFriendViewController', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "arrow.backward") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'arrow.backward' is used in nib 'InviteFriendsController', but couldn't be loaded.") } }
      if UIKit.UIImage(named: "copy_icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'copy_icon' is used in nib 'InviteFriendsController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "facebook_icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'facebook_icon' is used in nib 'InviteFriendsController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "gmail_icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'gmail_icon' is used in nib 'InviteFriendsController', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "qrcode") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'qrcode' is used in nib 'InviteFriendsController', but couldn't be loaded.") } }
      if UIKit.UIImage(named: "sms_icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'sms_icon' is used in nib 'InviteFriendsController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "twitter_icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'twitter_icon' is used in nib 'InviteFriendsController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "whatsapp_icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'whatsapp_icon' is used in nib 'InviteFriendsController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "background", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'background' is used in nib 'InviteFriendsController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "buttons_green", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'buttons_green' is used in nib 'InviteFriendsController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "sub_title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'sub_title' is used in nib 'InviteFriendsController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "Search", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Search' is used in nib 'InviteFriendsToEventController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "back_arrow_icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'back_arrow_icon' is used in nib 'InviteFriendsToEventController', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "multiply") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'multiply' is used in nib 'InviteFriendsToEventController', but couldn't be loaded.") } }
      if UIKit.UIColor(named: "buttons_green", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'buttons_green' is used in nib 'InviteFriendsToEventController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "separator", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'separator' is used in nib 'InviteFriendsToEventController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "sub_title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'sub_title' is used in nib 'InviteFriendsToEventController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'title' is used in nib 'InviteFriendsToEventController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "Filter", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Filter' is used in nib 'LeaderboardController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "NavigationBack", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'NavigationBack' is used in nib 'LeaderboardController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "users_icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'users_icon' is used in nib 'LeaderboardController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "buttons_green", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'buttons_green' is used in nib 'LeaderboardController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "separator", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'separator' is used in nib 'LeaderboardController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "sub_title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'sub_title' is used in nib 'LeaderboardController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'title' is used in nib 'LeaderboardController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "Down", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Down' is used in nib 'LeaderboardTabCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "buttons_green", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'buttons_green' is used in nib 'LeaderboardTabCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "sub_title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'sub_title' is used in nib 'LeaderboardTabCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "location_picker_pin", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'location_picker_pin' is used in nib 'LocationCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "edyou_logo_2", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'edyou_logo_2' is used in nib 'LoginController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "mailIcon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'mailIcon' is used in nib 'LoginController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "passwordIcon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'passwordIcon' is used in nib 'LoginController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "CharcoalGrey", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'CharcoalGrey' is used in nib 'LoginController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "EdYouGreen", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'EdYouGreen' is used in nib 'LoginController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "buttons_green", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'buttons_green' is used in nib 'LoginController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "back_arrow_icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'back_arrow_icon' is used in nib 'ManageGroupController', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "chevron.right") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'chevron.right' is used in nib 'ManageGroupController', but couldn't be loaded.") } }
      if UIKit.UIImage(named: "delete-group-icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'delete-group-icon' is used in nib 'ManageGroupController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "invite-people-icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'invite-people-icon' is used in nib 'ManageGroupController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "member-request-icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'member-request-icon' is used in nib 'ManageGroupController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "pending-post-icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'pending-post-icon' is used in nib 'ManageGroupController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "messageBG", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'messageBG' is used in nib 'ManageGroupController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "sub_title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'sub_title' is used in nib 'ManageGroupController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'title' is used in nib 'ManageGroupController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "Search", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Search' is used in nib 'MarketplaceController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "category_icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'category_icon' is used in nib 'MarketplaceController', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "chevron.down") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'chevron.down' is used in nib 'MarketplaceController', but couldn't be loaded.") } }
      if UIKit.UIImage(named: "filter_icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'filter_icon' is used in nib 'MarketplaceController', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "multiply") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'multiply' is used in nib 'MarketplaceController', but couldn't be loaded.") } }
      if UIKit.UIColor(named: "separator", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'separator' is used in nib 'MarketplaceController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "sub_title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'sub_title' is used in nib 'MarketplaceController', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "heart") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'heart' is used in nib 'MarketplaceItemCell', but couldn't be loaded.") } }
      if UIKit.UIImage(named: "location_icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'location_icon' is used in nib 'MarketplaceItemCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "post_image_dummy", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'post_image_dummy' is used in nib 'MarketplaceItemCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "sub_title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'sub_title' is used in nib 'MarketplaceItemCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "play_icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'play_icon' is used in nib 'MediaViewerCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "post_image_dummy", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'post_image_dummy' is used in nib 'MediaViewerCell', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "multiply") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'multiply' is used in nib 'MediaViewerController', but couldn't be loaded.") } }
      if UIKit.UIImage(named: "profile_image_dummy", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'profile_image_dummy' is used in nib 'MemberRequestCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "messageBG", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'messageBG' is used in nib 'MemberRequestCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "sub_title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'sub_title' is used in nib 'MemberRequestCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "profile_image_dummy", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'profile_image_dummy' is used in nib 'MembersSentTableViewCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "sub_title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'sub_title' is used in nib 'MembersSentTableViewCell', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "chevron.right") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'chevron.right' is used in nib 'MenuCell', but couldn't be loaded.") } }
      if UIKit.UIColor(named: "separator", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'separator' is used in nib 'MenuCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "sub_title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'sub_title' is used in nib 'MenuCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "Search", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Search' is used in nib 'MenuController', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "chevron.right") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'chevron.right' is used in nib 'MenuController', but couldn't be loaded.") } }
      if UIKit.UIImage(named: "edyou_text_logo", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'edyou_text_logo' is used in nib 'MenuController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "menu_classes_icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'menu_classes_icon' is used in nib 'MenuController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "menu_contactus", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'menu_contactus' is used in nib 'MenuController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "menu_deals_icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'menu_deals_icon' is used in nib 'MenuController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "menu_edyou_store_icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'menu_edyou_store_icon' is used in nib 'MenuController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "menu_events", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'menu_events' is used in nib 'MenuController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "menu_favourite", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'menu_favourite' is used in nib 'MenuController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "menu_friends", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'menu_friends' is used in nib 'MenuController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "menu_groups", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'menu_groups' is used in nib 'MenuController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "menu_invite", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'menu_invite' is used in nib 'MenuController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "menu_leaderboard", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'menu_leaderboard' is used in nib 'MenuController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "menu_marketplace_icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'menu_marketplace_icon' is used in nib 'MenuController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "menu_settings", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'menu_settings' is used in nib 'MenuController', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "multiply") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'multiply' is used in nib 'MenuController', but couldn't be loaded.") } }
      if UIKit.UIColor(named: "NavigationColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'NavigationColor' is used in nib 'MenuController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "border", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'border' is used in nib 'MenuController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "separator", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'separator' is used in nib 'MenuController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "sub_title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'sub_title' is used in nib 'MenuController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "background", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'background' is used in nib 'MenuHeaderView', but couldn't be loaded.") }
      if UIKit.UIImage(named: "edyou_text_logo", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'edyou_text_logo' is used in nib 'MenuLogoCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "add_new_story", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'add_new_story' is used in nib 'MyStoriesCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "profile_image_dummy", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'profile_image_dummy' is used in nib 'MyStoriesCell', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "chevron.left") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'chevron.left' is used in nib 'NewChatController', but couldn't be loaded.") } }
      if UIKit.UIImage(named: "groupChatAddIcon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'groupChatAddIcon' is used in nib 'NewChatController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "location_picker_search", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'location_picker_search' is used in nib 'NewChatController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "buttons_bg_gray", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'buttons_bg_gray' is used in nib 'NewChatController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "separator", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'separator' is used in nib 'NewChatController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'title' is used in nib 'NewChatController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "EventUser1", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'EventUser1' is used in nib 'NewGroupCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "EventUser2", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'EventUser2' is used in nib 'NewGroupCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "EventUser3", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'EventUser3' is used in nib 'NewGroupCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "add_icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'add_icon' is used in nib 'NewGroupCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "group_placeHolder", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'group_placeHolder' is used in nib 'NewGroupCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "icon_eye", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'icon_eye' is used in nib 'NewGroupCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "more_icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'more_icon' is used in nib 'NewGroupCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "private_lock_icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'private_lock_icon' is used in nib 'NewGroupCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "EdYouGreen", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'EdYouGreen' is used in nib 'NewGroupCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "sub_title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'sub_title' is used in nib 'NewGroupCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "back_arrow_icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'back_arrow_icon' is used in nib 'NewPasswordController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "new_password_logo", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'new_password_logo' is used in nib 'NewPasswordController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "passwordIcon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'passwordIcon' is used in nib 'NewPasswordController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "background", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'background' is used in nib 'NewPasswordController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "buttons_green", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'buttons_green' is used in nib 'NewPasswordController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "Bin_Icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Bin_Icon' is used in nib 'NewPostController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "Emoji", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Emoji' is used in nib 'NewPostController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "at-sign", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'at-sign' is used in nib 'NewPostController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "attach_image_icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'attach_image_icon' is used in nib 'NewPostController', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "chevron.down") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'chevron.down' is used in nib 'NewPostController', but couldn't be loaded.") } }
      if UIKit.UIImage(named: "close_grey", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'close_grey' is used in nib 'NewPostController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "edyou_text_logo", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'edyou_text_logo' is used in nib 'NewPostController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_cross", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_cross' is used in nib 'NewPostController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "post_background_colors_Icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'post_background_colors_Icon' is used in nib 'NewPostController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "post_friends_privacy_Icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'post_friends_privacy_Icon' is used in nib 'NewPostController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "post_location_Icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'post_location_Icon' is used in nib 'NewPostController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "post_more_options_Icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'post_more_options_Icon' is used in nib 'NewPostController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "post_videos_Icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'post_videos_Icon' is used in nib 'NewPostController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "profile_image_dummy", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'profile_image_dummy' is used in nib 'NewPostController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "NavigationColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'NavigationColor' is used in nib 'NewPostController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "background_light", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'background_light' is used in nib 'NewPostController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "border", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'border' is used in nib 'NewPostController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "buttons_green", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'buttons_green' is used in nib 'NewPostController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "like_disable", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'like_disable' is used in nib 'NewPostController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "separator", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'separator' is used in nib 'NewPostController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "sub_title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'sub_title' is used in nib 'NewPostController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'title' is used in nib 'NewPostController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "separator", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'separator' is used in nib 'NoMorePostCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "no_post_icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'no_post_icon' is used in nib 'NoPostsCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "separator", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'separator' is used in nib 'NoPostsCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "buttons_green", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'buttons_green' is used in nib 'NotificationCategoryCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "sub_title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'sub_title' is used in nib 'NotificationCategoryCell', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "arrow.backward") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'arrow.backward' is used in nib 'NotificationEnrollmentController', but couldn't be loaded.") } }
      if UIKit.UIImage(named: "notificationImg", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'notificationImg' is used in nib 'NotificationEnrollmentController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "background", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'background' is used in nib 'NotificationEnrollmentController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "buttons_green", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'buttons_green' is used in nib 'NotificationEnrollmentController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "sub_title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'sub_title' is used in nib 'NotificationEnrollmentController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "profile_image_dummy", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'profile_image_dummy' is used in nib 'NotificationFriendRequestCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "EdYouGreen", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'EdYouGreen' is used in nib 'NotificationFriendRequestCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "buttons_green", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'buttons_green' is used in nib 'NotificationFriendRequestCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "sub_title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'sub_title' is used in nib 'NotificationFriendRequestCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "profile_image_dummy", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'profile_image_dummy' is used in nib 'NotificationGeneralCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "EdYouGreen", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'EdYouGreen' is used in nib 'NotificationGeneralCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "separator", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'separator' is used in nib 'NotificationGeneralCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "sub_title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'sub_title' is used in nib 'NotificationGeneralCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "sub_title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'sub_title' is used in nib 'NotificationSettingsDescriptionCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "back_arrow_icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'back_arrow_icon' is used in nib 'NotificationSubSettingsController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "mailIcon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'mailIcon' is used in nib 'NotificationSubSettingsController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "push_ico", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'push_ico' is used in nib 'NotificationSubSettingsController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "separator", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'separator' is used in nib 'NotificationSubSettingsController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "sub_title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'sub_title' is used in nib 'NotificationSubSettingsController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'title' is used in nib 'NotificationSubSettingsController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "back_arrow_icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'back_arrow_icon' is used in nib 'NotificationsController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "EdYouGreen", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'EdYouGreen' is used in nib 'NotificationsController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "separator", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'separator' is used in nib 'NotificationsController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'title' is used in nib 'NotificationsController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "back_arrow_icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'back_arrow_icon' is used in nib 'NotificationsSettingsController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "separator", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'separator' is used in nib 'NotificationsSettingsController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "sub_title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'sub_title' is used in nib 'NotificationsSettingsController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'title' is used in nib 'NotificationsSettingsController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "onboarding_3", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'onboarding_3' is used in nib 'OnboardingController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "Onboarding_3", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'Onboarding_3' is used in nib 'OnboardingController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "Mobile logo Style", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Mobile logo Style' is used in nib 'OnboardingViewController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "WELCOME ILLUSTRATION", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'WELCOME ILLUSTRATION' is used in nib 'OnboardingViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "CharcoalGrey", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'CharcoalGrey' is used in nib 'OnboardingViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "EdYouGreen", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'EdYouGreen' is used in nib 'OnboardingViewController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "CallSpeakerIcon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'CallSpeakerIcon' is used in nib 'OngoingCallPopUP', but couldn't be loaded.") }
      if UIKit.UIImage(named: "rejectCallIcon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'rejectCallIcon' is used in nib 'OngoingCallPopUP', but couldn't be loaded.") }
      if UIKit.UIImage(named: "profile_image_dummy", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'profile_image_dummy' is used in nib 'PPImagePostCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "AccentColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'AccentColor' is used in nib 'PPImagePostCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "buttons_green", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'buttons_green' is used in nib 'PPImagePostCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "messageBG", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'messageBG' is used in nib 'PPImagePostCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "sub_title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'sub_title' is used in nib 'PPImagePostCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "profile_image_dummy", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'profile_image_dummy' is used in nib 'PPTextPostCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "AccentColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'AccentColor' is used in nib 'PPTextPostCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "buttons_green", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'buttons_green' is used in nib 'PPTextPostCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "messageBG", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'messageBG' is used in nib 'PPTextPostCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "sub_title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'sub_title' is used in nib 'PPTextPostCell', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "ellipsis") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'ellipsis' is used in nib 'PPTextWithBgPostCell', but couldn't be loaded.") } }
      if UIKit.UIImage(named: "profile_image_dummy", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'profile_image_dummy' is used in nib 'PPTextWithBgPostCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "AccentColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'AccentColor' is used in nib 'PPTextWithBgPostCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "buttons_green", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'buttons_green' is used in nib 'PPTextWithBgPostCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "messageBG", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'messageBG' is used in nib 'PPTextWithBgPostCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "sub_title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'sub_title' is used in nib 'PPTextWithBgPostCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "back_arrow_icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'back_arrow_icon' is used in nib 'PendingPostsController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "separator", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'separator' is used in nib 'PendingPostsController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'title' is used in nib 'PendingPostsController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "sub_title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'sub_title' is used in nib 'PeopleTypeCollectionViewCell', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "arrow.backward") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'arrow.backward' is used in nib 'PhotosController', but couldn't be loaded.") } }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "ellipsis") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'ellipsis' is used in nib 'PhotosController', but couldn't be loaded.") } }
      if UIKit.UIColor(named: "buttons_green", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'buttons_green' is used in nib 'PhotosController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "separator", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'separator' is used in nib 'PhotosController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "sub_title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'sub_title' is used in nib 'PhotosController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'title' is used in nib 'PhotosController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "background_dark", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'background_dark' is used in nib 'PhotosSegmentTableCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "buttons_green", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'buttons_green' is used in nib 'PhotosSegmentTableCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "calendar_icon_templateable", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'calendar_icon_templateable' is used in nib 'PostAllTagOptions', but couldn't be loaded.") }
      if UIKit.UIImage(named: "map-pin-icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'map-pin-icon' is used in nib 'PostAllTagOptions', but couldn't be loaded.") }
      if UIKit.UIImage(named: "photo_placeholder", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'photo_placeholder' is used in nib 'PostAllTagOptions', but couldn't be loaded.") }
      if UIKit.UIImage(named: "post_emoji_Icon_template", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'post_emoji_Icon_template' is used in nib 'PostAllTagOptions', but couldn't be loaded.") }
      if UIKit.UIImage(named: "post_files_Icon_template", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'post_files_Icon_template' is used in nib 'PostAllTagOptions', but couldn't be loaded.") }
      if UIKit.UIImage(named: "post_videos_Icon_template", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'post_videos_Icon_template' is used in nib 'PostAllTagOptions', but couldn't be loaded.") }
      if UIKit.UIImage(named: "DELETE", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'DELETE' is used in nib 'PostDetailsController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "Mobile logo Style", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Mobile logo Style' is used in nib 'PostDetailsController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "NavigationBack", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'NavigationBack' is used in nib 'PostDetailsController', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "arrowtriangle.right.fill") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'arrowtriangle.right.fill' is used in nib 'PostDetailsController', but couldn't be loaded.") } }
      if UIKit.UIImage(named: "attach_image_icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'attach_image_icon' is used in nib 'PostDetailsController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "dm_profile_holder", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'dm_profile_holder' is used in nib 'PostDetailsController', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "ellipsis") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'ellipsis' is used in nib 'PostDetailsController', but couldn't be loaded.") } }
      if UIKit.UIImage(named: "ic_heart_add", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_heart_add' is used in nib 'PostDetailsController', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "plus") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'plus' is used in nib 'PostDetailsController', but couldn't be loaded.") } }
      if UIKit.UIImage(named: "profile_image_dummy", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'profile_image_dummy' is used in nib 'PostDetailsController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "sendIcon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'sendIcon' is used in nib 'PostDetailsController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "AccentColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'AccentColor' is used in nib 'PostDetailsController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "background", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'background' is used in nib 'PostDetailsController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "buttons_green", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'buttons_green' is used in nib 'PostDetailsController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "reaction_background", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'reaction_background' is used in nib 'PostDetailsController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "separator", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'separator' is used in nib 'PostDetailsController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "sub_title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'sub_title' is used in nib 'PostDetailsController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'title' is used in nib 'PostDetailsController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "add_emoji_template", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'add_emoji_template' is used in nib 'PostDetailsImageCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "favourite_event", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'favourite_event' is used in nib 'PostDetailsImageCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "favourite_event_filled", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'favourite_event_filled' is used in nib 'PostDetailsImageCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "heart_unselected", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'heart_unselected' is used in nib 'PostDetailsImageCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "AccentColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'AccentColor' is used in nib 'PostDetailsImageCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "background", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'background' is used in nib 'PostDetailsImageCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "buttons_green", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'buttons_green' is used in nib 'PostDetailsImageCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "reaction_background", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'reaction_background' is used in nib 'PostDetailsImageCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "sub_title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'sub_title' is used in nib 'PostDetailsImageCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "add_emoji_template", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'add_emoji_template' is used in nib 'PostDetailsTextCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "favourite_event", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'favourite_event' is used in nib 'PostDetailsTextCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "favourite_event_filled", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'favourite_event_filled' is used in nib 'PostDetailsTextCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "heart_unselected", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'heart_unselected' is used in nib 'PostDetailsTextCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "AccentColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'AccentColor' is used in nib 'PostDetailsTextCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "background", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'background' is used in nib 'PostDetailsTextCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "buttons_green", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'buttons_green' is used in nib 'PostDetailsTextCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "reaction_background", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'reaction_background' is used in nib 'PostDetailsTextCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "sub_title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'sub_title' is used in nib 'PostDetailsTextCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "add_emoji_template", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'add_emoji_template' is used in nib 'PostDetailsTextWithBgCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "favourite_event", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'favourite_event' is used in nib 'PostDetailsTextWithBgCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "favourite_event_filled", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'favourite_event_filled' is used in nib 'PostDetailsTextWithBgCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "heart_unselected", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'heart_unselected' is used in nib 'PostDetailsTextWithBgCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "AccentColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'AccentColor' is used in nib 'PostDetailsTextWithBgCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "background", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'background' is used in nib 'PostDetailsTextWithBgCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "buttons_green", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'buttons_green' is used in nib 'PostDetailsTextWithBgCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "reaction_background", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'reaction_background' is used in nib 'PostDetailsTextWithBgCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "sub_title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'sub_title' is used in nib 'PostDetailsTextWithBgCell', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "arrowtriangle.right.fill") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'arrowtriangle.right.fill' is used in nib 'PostEventCell', but couldn't be loaded.") } }
      if UIKit.UIImage(named: "calendar_icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'calendar_icon' is used in nib 'PostEventCell', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "ellipsis") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'ellipsis' is used in nib 'PostEventCell', but couldn't be loaded.") } }
      if UIKit.UIImage(named: "event_add_to_calender", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'event_add_to_calender' is used in nib 'PostEventCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "event_share_icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'event_share_icon' is used in nib 'PostEventCell', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "heart") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'heart' is used in nib 'PostEventCell', but couldn't be loaded.") } }
      if UIKit.UIImage(named: "post_image_dummy", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'post_image_dummy' is used in nib 'PostEventCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "profile_image_dummy", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'profile_image_dummy' is used in nib 'PostEventCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "AccentColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'AccentColor' is used in nib 'PostEventCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "separator", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'separator' is used in nib 'PostEventCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "sub_title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'sub_title' is used in nib 'PostEventCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "EventUser1", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'EventUser1' is used in nib 'PostEventTableViewCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "EventUser2", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'EventUser2' is used in nib 'PostEventTableViewCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "EventUser3", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'EventUser3' is used in nib 'PostEventTableViewCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "calendar_icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'calendar_icon' is used in nib 'PostEventTableViewCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "map-pin", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'map-pin' is used in nib 'PostEventTableViewCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "post_image_dummy", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'post_image_dummy' is used in nib 'PostEventTableViewCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "sub_title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'sub_title' is used in nib 'PostEventTableViewCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_cross", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_cross' is used in nib 'PostFileCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "pdf_icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'pdf_icon' is used in nib 'PostFileCell', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "backward.fill") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'backward.fill' is used in nib 'PostImageCell', but couldn't be loaded.") } }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "forward.fill") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'forward.fill' is used in nib 'PostImageCell', but couldn't be loaded.") } }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "play.fill") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'play.fill' is used in nib 'PostImageCell', but couldn't be loaded.") } }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "speaker.wave.2.fill") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'speaker.wave.2.fill' is used in nib 'PostImageCell', but couldn't be loaded.") } }
      if UIKit.UIColor(named: "buttons_blue", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'buttons_blue' is used in nib 'PostImageCell', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "checkmark.circle.fill") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'checkmark.circle.fill' is used in nib 'PostPrivacyCell', but couldn't be loaded.") } }
      if UIKit.UIImage(named: "userName", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'userName' is used in nib 'PostPrivacyCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "buttons_green", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'buttons_green' is used in nib 'PostPrivacyCell', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "checkmark.circle.fill") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'checkmark.circle.fill' is used in nib 'PostSettingsCell', but couldn't be loaded.") } }
      if UIKit.UIColor(named: "buttons_green", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'buttons_green' is used in nib 'PostSettingsCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "separator", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'separator' is used in nib 'PostSettingsCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "back_arrow_icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'back_arrow_icon' is used in nib 'PostSettingsController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "separator", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'separator' is used in nib 'PostSettingsController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'title' is used in nib 'PostSettingsController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_cross", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_cross' is used in nib 'PostSettingsDescriptionCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "sub_title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'sub_title' is used in nib 'PostSettingsDescriptionCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_cross", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_cross' is used in nib 'PostTagsCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "map-pin-icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'map-pin-icon' is used in nib 'PostTagsCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: " ", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named ' ' is used in nib 'PostVideoCell', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "play.fill") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'play.fill' is used in nib 'PostVideoCell', but couldn't be loaded.") } }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "speaker.wave.2.fill") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'speaker.wave.2.fill' is used in nib 'PostVideoCell', but couldn't be loaded.") } }
      if UIKit.UIImage(named: "back_arrow_icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'back_arrow_icon' is used in nib 'PrivacyPolicyController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "blurBg", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'blurBg' is used in nib 'PrivacyPolicyController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "buttons_blue", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'buttons_blue' is used in nib 'PrivacyPolicyController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "buttons_green", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'buttons_green' is used in nib 'PrivacyPolicyController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "separator", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'separator' is used in nib 'PrivacyPolicyController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'title' is used in nib 'PrivacyPolicyController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "NavigationBack", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'NavigationBack' is used in nib 'ProfessionalProfileController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "separator", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'separator' is used in nib 'ProfessionalProfileController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'title' is used in nib 'ProfessionalProfileController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "Add", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Add' is used in nib 'ProfileAboutHeader', but couldn't be loaded.") }
      if UIKit.UIImage(named: "editPencil", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'editPencil' is used in nib 'ProfileAboutHeader', but couldn't be loaded.") }
      if UIKit.UIImage(named: "NavigationBack", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'NavigationBack' is used in nib 'ProfileController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "separator", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'separator' is used in nib 'ProfileController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'title' is used in nib 'ProfileController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "back_arrow_icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'back_arrow_icon' is used in nib 'ProfileFriendsController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "separator", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'separator' is used in nib 'ProfileFriendsController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'title' is used in nib 'ProfileFriendsController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "Send", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Send' is used in nib 'ProfileHeaderInfo', but couldn't be loaded.") }
      if UIKit.UIImage(named: "button:Kpj-8p-ubl:image", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'button:Kpj-8p-ubl:image' is used in nib 'ProfileHeaderInfo', but couldn't be loaded.") }
      if UIKit.UIImage(named: "dm_profile_holder", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'dm_profile_holder' is used in nib 'ProfileHeaderInfo', but couldn't be loaded.") }
      if UIKit.UIImage(named: "event_select", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'event_select' is used in nib 'ProfileHeaderInfo', but couldn't be loaded.") }
      if UIKit.UIImage(named: "event_unselect", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'event_unselect' is used in nib 'ProfileHeaderInfo', but couldn't be loaded.") }
      if UIKit.UIImage(named: "feed_select", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'feed_select' is used in nib 'ProfileHeaderInfo', but couldn't be loaded.") }
      if UIKit.UIImage(named: "feed_unselect", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'feed_unselect' is used in nib 'ProfileHeaderInfo', but couldn't be loaded.") }
      if UIKit.UIImage(named: "group_select", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'group_select' is used in nib 'ProfileHeaderInfo', but couldn't be loaded.") }
      if UIKit.UIImage(named: "group_unselect", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'group_unselect' is used in nib 'ProfileHeaderInfo', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_cover_photo_placeholder", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_cover_photo_placeholder' is used in nib 'ProfileHeaderInfo', but couldn't be loaded.") }
      if UIKit.UIImage(named: "more_option", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'more_option' is used in nib 'ProfileHeaderInfo', but couldn't be loaded.") }
      if UIKit.UIImage(named: "photo_select", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'photo_select' is used in nib 'ProfileHeaderInfo', but couldn't be loaded.") }
      if UIKit.UIImage(named: "photo_unselect", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'photo_unselect' is used in nib 'ProfileHeaderInfo', but couldn't be loaded.") }
      if UIKit.UIImage(named: "profile_select", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'profile_select' is used in nib 'ProfileHeaderInfo', but couldn't be loaded.") }
      if UIKit.UIImage(named: "profile_unselect", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'profile_unselect' is used in nib 'ProfileHeaderInfo', but couldn't be loaded.") }
      if UIKit.UIImage(named: "telephone", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'telephone' is used in nib 'ProfileHeaderInfo', but couldn't be loaded.") }
      if UIKit.UIImage(named: "verified", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'verified' is used in nib 'ProfileHeaderInfo', but couldn't be loaded.") }
      if UIKit.UIImage(named: "work", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'work' is used in nib 'ProfileHeaderInfo', but couldn't be loaded.") }
      if UIKit.UIColor(named: "background", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'background' is used in nib 'ProfileHeaderInfo', but couldn't be loaded.") }
      if UIKit.UIColor(named: "background_dark", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'background_dark' is used in nib 'ProfileHeaderInfo', but couldn't be loaded.") }
      if UIKit.UIColor(named: "background_light", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'background_light' is used in nib 'ProfileHeaderInfo', but couldn't be loaded.") }
      if UIKit.UIColor(named: "buttons_green", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'buttons_green' is used in nib 'ProfileHeaderInfo', but couldn't be loaded.") }
      if UIKit.UIColor(named: "sub_title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'sub_title' is used in nib 'ProfileHeaderInfo', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_3bars", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_3bars' is used in nib 'ProfileSocialLinks', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_cross_rounded_filled", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_cross_rounded_filled' is used in nib 'ProfileSocialLinks', but couldn't be loaded.") }
      if UIKit.UIImage(named: "insta", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'insta' is used in nib 'ProfileSocialLinks', but couldn't be loaded.") }
      if UIKit.UIImage(named: "CrownEmpty", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'CrownEmpty' is used in nib 'RankCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "Gold1", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Gold1' is used in nib 'RankCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "RankBG", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'RankBG' is used in nib 'RankCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "EdYouGreen", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'EdYouGreen' is used in nib 'RankCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "background_dark", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'background_dark' is used in nib 'RankCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "borderColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'borderColor' is used in nib 'RankCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "separator", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'separator' is used in nib 'RankCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "buttons_blue", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'buttons_blue' is used in nib 'RankHeaderCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_category_close", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_category_close' is used in nib 'ReelsCategoriesViewController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "comment_icon_white", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'comment_icon_white' is used in nib 'ReelsCollectionViewCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_add_reels", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_add_reels' is used in nib 'ReelsCollectionViewCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_emoji_count", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_emoji_count' is used in nib 'ReelsCollectionViewCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_music", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_music' is used in nib 'ReelsCollectionViewCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_reel_video_bg", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_reel_video_bg' is used in nib 'ReelsCollectionViewCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "profile_image_dummy", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'profile_image_dummy' is used in nib 'ReelsCollectionViewCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "attach_image_icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'attach_image_icon' is used in nib 'ReelsCommentsController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "close_black", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'close_black' is used in nib 'ReelsCommentsController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "dm_profile_holder", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'dm_profile_holder' is used in nib 'ReelsCommentsController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "sendIcon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'sendIcon' is used in nib 'ReelsCommentsController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "background", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'background' is used in nib 'ReelsCommentsController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "buttons_green", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'buttons_green' is used in nib 'ReelsCommentsController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "reaction_background", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'reaction_background' is used in nib 'ReelsCommentsController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "separator", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'separator' is used in nib 'ReelsCommentsController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "sub_title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'sub_title' is used in nib 'ReelsCommentsController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'title' is used in nib 'ReelsCommentsController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "NavigationBack", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'NavigationBack' is used in nib 'ReelsPostViewController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_preview_play", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_preview_play' is used in nib 'ReelsPostViewController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_send_reel", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_send_reel' is used in nib 'ReelsPostViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "background", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'background' is used in nib 'ReelsPostViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "buttons_green", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'buttons_green' is used in nib 'ReelsPostViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "separator", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'separator' is used in nib 'ReelsPostViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'title' is used in nib 'ReelsPostViewController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_create_reels", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_create_reels' is used in nib 'ReelsViewController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_cross_tinted", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_cross_tinted' is used in nib 'ReelsViewController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_down_white", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_down_white' is used in nib 'ReelsViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "background", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'background' is used in nib 'ReelsViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "background_dark", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'background_dark' is used in nib 'ReelsViewController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "back_arrow_icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'back_arrow_icon' is used in nib 'ReportSubViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "NavigationColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'NavigationColor' is used in nib 'ReportSubViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "buttons_green", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'buttons_green' is used in nib 'ReportSubViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "separator", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'separator' is used in nib 'ReportSubViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'title' is used in nib 'ReportSubViewController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "RoundCheck", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'RoundCheck' is used in nib 'ReportThanksViewController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "block_user", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'block_user' is used in nib 'ReportThanksViewController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "empty_cirle", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'empty_cirle' is used in nib 'ReportThanksViewController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "unfollow_user", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'unfollow_user' is used in nib 'ReportThanksViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "buttons_green", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'buttons_green' is used in nib 'ReportThanksViewController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "back_arrow_icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'back_arrow_icon' is used in nib 'ReportViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "NavigationColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'NavigationColor' is used in nib 'ReportViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "separator", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'separator' is used in nib 'ReportViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'title' is used in nib 'ReportViewController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "close_black", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'close_black' is used in nib 'ReusableOptionsFilterViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "buttons_green", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'buttons_green' is used in nib 'ReusableOptionsFilterViewController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "close_black", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'close_black' is used in nib 'ReusbaleOptionSelectionController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "filter_icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'filter_icon' is used in nib 'SavedMarketplaceItemsController', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "multiply") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'multiply' is used in nib 'SavedMarketplaceItemsController', but couldn't be loaded.") } }
      if UIKit.UIColor(named: "separator", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'separator' is used in nib 'SavedMarketplaceItemsController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "sub_title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'sub_title' is used in nib 'SavedMarketplaceItemsController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "next_icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'next_icon' is used in nib 'SearchCategoryCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "Search", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Search' is used in nib 'SearchController', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "multiply") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'multiply' is used in nib 'SearchController', but couldn't be loaded.") } }
      if UIKit.UIColor(named: "separator", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'separator' is used in nib 'SearchController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "sub_title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'sub_title' is used in nib 'SearchController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "Search", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Search' is used in nib 'SearchDetailsController', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "circle.fill") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'circle.fill' is used in nib 'SearchDetailsController', but couldn't be loaded.") } }
      if UIKit.UIImage(named: "filter_icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'filter_icon' is used in nib 'SearchDetailsController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "CharcoalGrey", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'CharcoalGrey' is used in nib 'SearchDetailsController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "buttons_green", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'buttons_green' is used in nib 'SearchDetailsController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "separator", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'separator' is used in nib 'SearchDetailsController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "sub_title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'sub_title' is used in nib 'SearchDetailsController', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "multiply") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'multiply' is used in nib 'SeeAllCell', but couldn't be loaded.") } }
      if UIKit.UIImage(named: "NavigationBack", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'NavigationBack' is used in nib 'SeeAllVC', but couldn't be loaded.") }
      if UIKit.UIColor(named: "title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'title' is used in nib 'SeeAllVC', but couldn't be loaded.") }
      if UIKit.UIImage(named: "Search", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Search' is used in nib 'SelectFriendsController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "back_arrow_icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'back_arrow_icon' is used in nib 'SelectFriendsController', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "multiply") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'multiply' is used in nib 'SelectFriendsController', but couldn't be loaded.") } }
      if UIKit.UIColor(named: "background_light", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'background_light' is used in nib 'SelectFriendsController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "buttons_green", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'buttons_green' is used in nib 'SelectFriendsController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "messageBG", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'messageBG' is used in nib 'SelectFriendsController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "separator", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'separator' is used in nib 'SelectFriendsController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "sub_title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'sub_title' is used in nib 'SelectFriendsController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'title' is used in nib 'SelectFriendsController', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "arrow.backward") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'arrow.backward' is used in nib 'SelectLocationController', but couldn't be loaded.") } }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "ellipsis") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'ellipsis' is used in nib 'SelectLocationController', but couldn't be loaded.") } }
      if UIKit.UIImage(named: "location_picker_search", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'location_picker_search' is used in nib 'SelectLocationController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "buttons_green", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'buttons_green' is used in nib 'SelectLocationController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "separator", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'separator' is used in nib 'SelectLocationController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "sub_title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'sub_title' is used in nib 'SelectLocationController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'title' is used in nib 'SelectLocationController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "addIcon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'addIcon' is used in nib 'SelectPhotoController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "cameraIcon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'cameraIcon' is used in nib 'SelectPhotoController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "profile_image_dummy", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'profile_image_dummy' is used in nib 'SelectPhotoController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "border", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'border' is used in nib 'SelectPhotoController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "buttons_green", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'buttons_green' is used in nib 'SelectPhotoController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "sub_title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'sub_title' is used in nib 'SelectPhotoController', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "chevron.down") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'chevron.down' is used in nib 'SelectUniversityController', but couldn't be loaded.") } }
      if UIKit.UIImage(named: "edyou_logo_2", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'edyou_logo_2' is used in nib 'SelectUniversityController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "universityIcon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'universityIcon' is used in nib 'SelectUniversityController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "background", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'background' is used in nib 'SelectUniversityController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "buttons_green", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'buttons_green' is used in nib 'SelectUniversityController', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "arrow.backward") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'arrow.backward' is used in nib 'SetPasswordController', but couldn't be loaded.") } }
      if UIKit.UIImage(named: "passwordIcon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'passwordIcon' is used in nib 'SetPasswordController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "background", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'background' is used in nib 'SetPasswordController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "buttons_green", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'buttons_green' is used in nib 'SetPasswordController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "back_arrow_icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'back_arrow_icon' is used in nib 'SettingsController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "NavigationColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'NavigationColor' is used in nib 'SettingsController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "separator", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'separator' is used in nib 'SettingsController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'title' is used in nib 'SettingsController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "edyou_logo_2", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'edyou_logo_2' is used in nib 'SettingsLogoCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "attach_image_icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'attach_image_icon' is used in nib 'ShowCommentsController', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "ellipsis") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'ellipsis' is used in nib 'ShowCommentsController', but couldn't be loaded.") } }
      if UIKit.UIImage(named: "ic_heart_add", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_heart_add' is used in nib 'ShowCommentsController', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "plus") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'plus' is used in nib 'ShowCommentsController', but couldn't be loaded.") } }
      if UIKit.UIImage(named: "profile_image_dummy", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'profile_image_dummy' is used in nib 'ShowCommentsController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "sendIcon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'sendIcon' is used in nib 'ShowCommentsController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "AccentColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'AccentColor' is used in nib 'ShowCommentsController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "background", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'background' is used in nib 'ShowCommentsController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "buttons_green", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'buttons_green' is used in nib 'ShowCommentsController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "reaction_background", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'reaction_background' is used in nib 'ShowCommentsController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "separator", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'separator' is used in nib 'ShowCommentsController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "sub_title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'sub_title' is used in nib 'ShowCommentsController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "add_emoji_template", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'add_emoji_template' is used in nib 'ShowStoriesController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "close_grey", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'close_grey' is used in nib 'ShowStoriesController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "comment1", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'comment1' is used in nib 'ShowStoriesController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "eye1", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'eye1' is used in nib 'ShowStoriesController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "heart11", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'heart11' is used in nib 'ShowStoriesController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "menu1", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'menu1' is used in nib 'ShowStoriesController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "reaction1", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'reaction1' is used in nib 'ShowStoriesController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "background", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'background' is used in nib 'ShowStoriesController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "buttons_green", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'buttons_green' is used in nib 'ShowStoriesController', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "chevron.down") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'chevron.down' is used in nib 'SignupController', but couldn't be loaded.") } }
      if UIKit.UIImage(named: "edyou_logo_2", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'edyou_logo_2' is used in nib 'SignupController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "gender_icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'gender_icon' is used in nib 'SignupController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "mailIcon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'mailIcon' is used in nib 'SignupController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "passwordIcon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'passwordIcon' is used in nib 'SignupController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "showPasswordOff", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'showPasswordOff' is used in nib 'SignupController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "universityIcon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'universityIcon' is used in nib 'SignupController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "unselectedCheck", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'unselectedCheck' is used in nib 'SignupController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "userName", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'userName' is used in nib 'SignupController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "CharcoalGrey", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'CharcoalGrey' is used in nib 'SignupController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "EdYouGreen", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'EdYouGreen' is used in nib 'SignupController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "buttons_green", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'buttons_green' is used in nib 'SignupController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "NavigationBack", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'NavigationBack' is used in nib 'SkillController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_cross", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_cross' is used in nib 'SkillController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "buttons_green", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'buttons_green' is used in nib 'SkillController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "separator", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'separator' is used in nib 'SkillController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'title' is used in nib 'SkillController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "Search", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Search' is used in nib 'StoreController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "filter_icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'filter_icon' is used in nib 'StoreController', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "multiply") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'multiply' is used in nib 'StoreController', but couldn't be loaded.") } }
      if UIKit.UIColor(named: "separator", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'separator' is used in nib 'StoreController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "sub_title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'sub_title' is used in nib 'StoreController', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "heart") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'heart' is used in nib 'StoreItemCell', but couldn't be loaded.") } }
      if UIKit.UIImage(named: "post_image_dummy", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'post_image_dummy' is used in nib 'StoreItemCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "sub_title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'sub_title' is used in nib 'StoreItemCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "add_new_story", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'add_new_story' is used in nib 'StoriesCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "profile_image_dummy", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'profile_image_dummy' is used in nib 'StoriesCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "profile_image_dummy", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'profile_image_dummy' is used in nib 'StoryCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "profile_image_dummy", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'profile_image_dummy' is used in nib 'StoryItemCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "Story-Back", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Story-Back' is used in nib 'StoryMediaFilesViewController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "Story-Play", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Story-Play' is used in nib 'StoryMediaFilesViewController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "Story-menu", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Story-menu' is used in nib 'StoryMediaFilesViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "buttons_green", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'buttons_green' is used in nib 'StoryMediaFilesViewController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_cross", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_cross' is used in nib 'TagEvent', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_cross", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_cross' is used in nib 'TagGroup', but couldn't be loaded.") }
      if UIKit.UIImage(named: "profile_image_dummy", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'profile_image_dummy' is used in nib 'TagUserCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "home_start", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'home_start' is used in nib 'TagUserCell', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "arrow.backward") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'arrow.backward' is used in nib 'TextInputController', but couldn't be loaded.") } }
      if UIKit.UIColor(named: "buttons_green", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'buttons_green' is used in nib 'TextInputController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "sub_title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'sub_title' is used in nib 'TextInputController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'title' is used in nib 'TextInputController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "add_emoji_template", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'add_emoji_template' is used in nib 'TextPostCell', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "arrowtriangle.right.fill") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'arrowtriangle.right.fill' is used in nib 'TextPostCell', but couldn't be loaded.") } }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "ellipsis") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'ellipsis' is used in nib 'TextPostCell', but couldn't be loaded.") } }
      if UIKit.UIImage(named: "favourite_event", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'favourite_event' is used in nib 'TextPostCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "favourite_event_filled", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'favourite_event_filled' is used in nib 'TextPostCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "heart_unselected", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'heart_unselected' is used in nib 'TextPostCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "profile_image_dummy", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'profile_image_dummy' is used in nib 'TextPostCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "verified", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'verified' is used in nib 'TextPostCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "AccentColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'AccentColor' is used in nib 'TextPostCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "background", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'background' is used in nib 'TextPostCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "buttons_green", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'buttons_green' is used in nib 'TextPostCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "reaction_background", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'reaction_background' is used in nib 'TextPostCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "sub_title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'sub_title' is used in nib 'TextPostCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "add_emoji_template", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'add_emoji_template' is used in nib 'TextWithBgPostCell', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "arrowtriangle.right.fill") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'arrowtriangle.right.fill' is used in nib 'TextWithBgPostCell', but couldn't be loaded.") } }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "ellipsis") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'ellipsis' is used in nib 'TextWithBgPostCell', but couldn't be loaded.") } }
      if UIKit.UIImage(named: "favourite_event", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'favourite_event' is used in nib 'TextWithBgPostCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "favourite_event_filled", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'favourite_event_filled' is used in nib 'TextWithBgPostCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "heart_unselected", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'heart_unselected' is used in nib 'TextWithBgPostCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "profile_image_dummy", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'profile_image_dummy' is used in nib 'TextWithBgPostCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "verified", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'verified' is used in nib 'TextWithBgPostCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "AccentColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'AccentColor' is used in nib 'TextWithBgPostCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "background", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'background' is used in nib 'TextWithBgPostCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "buttons_green", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'buttons_green' is used in nib 'TextWithBgPostCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "reaction_background", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'reaction_background' is used in nib 'TextWithBgPostCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "sub_title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'sub_title' is used in nib 'TextWithBgPostCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "notification_bell_icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'notification_bell_icon' is used in nib 'TopHeaderV', but couldn't be loaded.") }
      if UIKit.UIColor(named: "NavigationColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'NavigationColor' is used in nib 'TopHeaderV', but couldn't be loaded.") }
      if UIKit.UIColor(named: "like_enable", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'like_enable' is used in nib 'TopHeaderV', but couldn't be loaded.") }
      if UIKit.UIImage(named: " ", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named ' ' is used in nib 'TopLeadersCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "RankTop", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'RankTop' is used in nib 'TopLeadersCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "Rectangle", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Rectangle' is used in nib 'TopLeadersCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "placeholder", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'placeholder' is used in nib 'TopLeadersCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "EdYouGreen", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'EdYouGreen' is used in nib 'TopLeadersCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_down", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_down' is used in nib 'TopMenuV', but couldn't be loaded.") }
      if UIKit.UIColor(named: "NavigationColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'NavigationColor' is used in nib 'TopMenuV', but couldn't be loaded.") }
      if UIKit.UIColor(named: "buttons_green", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'buttons_green' is used in nib 'TopMenuV', but couldn't be loaded.") }
      if UIKit.UIColor(named: "separator", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'separator' is used in nib 'TopMenuV', but couldn't be loaded.") }
      if UIKit.UIColor(named: "sub_title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'sub_title' is used in nib 'TopMenuV', but couldn't be loaded.") }
      if UIKit.UIImage(named: "reelIcon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'reelIcon' is used in nib 'TrendingViewCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: " ", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named ' ' is used in nib 'UploadPostCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_cross", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_cross' is used in nib 'UploadPostCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "rotateRight", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'rotateRight' is used in nib 'UploadPostCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "buttons_green", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'buttons_green' is used in nib 'UploadPostCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "CallButton", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'CallButton' is used in nib 'UserCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "MessageButton", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'MessageButton' is used in nib 'UserCell', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "checkmark.circle.fill") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'checkmark.circle.fill' is used in nib 'UserCell', but couldn't be loaded.") } }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "ellipsis") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'ellipsis' is used in nib 'UserCell', but couldn't be loaded.") } }
      if UIKit.UIImage(named: "profile_image_dummy", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'profile_image_dummy' is used in nib 'UserCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "verified", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'verified' is used in nib 'UserCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "border", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'border' is used in nib 'UserCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "buttons_green", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'buttons_green' is used in nib 'UserCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "separator", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'separator' is used in nib 'UserCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "sub_title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'sub_title' is used in nib 'UserCell', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "multiply.circle.fill") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'multiply.circle.fill' is used in nib 'UserImageCell', but couldn't be loaded.") } }
      if UIKit.UIImage(named: "profile_image_dummy", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'profile_image_dummy' is used in nib 'UserImageCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "sub_title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'sub_title' is used in nib 'UserImageCell', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "arrow.backward") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'arrow.backward' is used in nib 'UsersListController', but couldn't be loaded.") } }
      if UIKit.UIColor(named: "separator", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'separator' is used in nib 'UsersListController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'title' is used in nib 'UsersListController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "back_arrow_icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'back_arrow_icon' is used in nib 'VerifyCodeController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "verifyPassword", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'verifyPassword' is used in nib 'VerifyCodeController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "background", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'background' is used in nib 'VerifyCodeController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "buttons_green", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'buttons_green' is used in nib 'VerifyCodeController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "sub_title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'sub_title' is used in nib 'VerifyCodeController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'title' is used in nib 'VerifyCodeController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "back_arrow_icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'back_arrow_icon' is used in nib 'VerifyEmailController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "background", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'background' is used in nib 'VerifyEmailController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "buttons_green", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'buttons_green' is used in nib 'VerifyEmailController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "sub_title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'sub_title' is used in nib 'VerifyEmailController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "text_color", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'text_color' is used in nib 'VerifyEmailController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'title' is used in nib 'VerifyEmailController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "BottomTransparentView", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'BottomTransparentView' is used in nib 'VideoCall', but couldn't be loaded.") }
      if UIKit.UIImage(named: "CallChatIcon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'CallChatIcon' is used in nib 'VideoCall', but couldn't be loaded.") }
      if UIKit.UIImage(named: "CallMicUnMuteIcon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'CallMicUnMuteIcon' is used in nib 'VideoCall', but couldn't be loaded.") }
      if UIKit.UIImage(named: "addMemberGroupCall", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'addMemberGroupCall' is used in nib 'VideoCall', but couldn't be loaded.") }
      if UIKit.UIImage(named: "backButtonCall", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'backButtonCall' is used in nib 'VideoCall', but couldn't be loaded.") }
      if UIKit.UIImage(named: "enabledVideoIcon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'enabledVideoIcon' is used in nib 'VideoCall', but couldn't be loaded.") }
      if UIKit.UIImage(named: "fullScreenIcon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'fullScreenIcon' is used in nib 'VideoCall', but couldn't be loaded.") }
      if UIKit.UIImage(named: "profile_image_dummy", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'profile_image_dummy' is used in nib 'VideoCall', but couldn't be loaded.") }
      if UIKit.UIImage(named: "rejectCallIcon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'rejectCallIcon' is used in nib 'VideoCall', but couldn't be loaded.") }
      if UIKit.UIImage(named: "speakerButtonIcon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'speakerButtonIcon' is used in nib 'VideoCall', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "arrow.backward") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'arrow.backward' is used in nib 'WebViewController', but couldn't be loaded.") } }
      if UIKit.UIColor(named: "separator", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'separator' is used in nib 'WebViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'title' is used in nib 'WebViewController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "emailwhiteIcon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'emailwhiteIcon' is used in nib 'WelcomeController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "welcomeBg", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'welcomeBg' is used in nib 'WelcomeController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "welcomeImg", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'welcomeImg' is used in nib 'WelcomeController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "welcomeLogo", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'welcomeLogo' is used in nib 'WelcomeController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "buttons_blue", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'buttons_blue' is used in nib 'WelcomeController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "buttons_green", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'buttons_green' is used in nib 'WelcomeController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "Invite-cuate 1", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Invite-cuate 1' is used in nib 'WelcomeInviteController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "NavigationBack", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'NavigationBack' is used in nib 'WelcomeInviteController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "share", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'share' is used in nib 'WelcomeInviteController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "separator", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'separator' is used in nib 'WelcomeInviteController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "text_color", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'text_color' is used in nib 'WelcomeInviteController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'title' is used in nib 'WelcomeInviteController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "work", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'work' is used in nib 'WorkDetailCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "switchCameraCall", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'switchCameraCall' is used in nib 'remoteParticipantGroupCollectionViewCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "unMuteGroupCall", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'unMuteGroupCall' is used in nib 'remoteParticipantGroupCollectionViewCell', but couldn't be loaded.") }
    }
  }

  /// This `_R.reuseIdentifier` struct is generated, and contains static references to 86 reuse identifiers.
  struct reuseIdentifier {

    /// Reuse identifier `AboutSettingsViewCell`.
    let aboutSettingsViewCell: RswiftResources.ReuseIdentifier<UIKit.UITableViewCell> = .init(identifier: "AboutSettingsViewCell")

    /// Reuse identifier `AccountName`.
    let accountName: RswiftResources.ReuseIdentifier<UIKit.UITableViewCell> = .init(identifier: "AccountName")

    /// Reuse identifier `AccountTableViewCell`.
    let accountTableViewCell: RswiftResources.ReuseIdentifier<AccountTableViewCell> = .init(identifier: "AccountTableViewCell")

    /// Reuse identifier `AddressAddCell`.
    let addressAddCell: RswiftResources.ReuseIdentifier<UIKit.UITableViewCell> = .init(identifier: "AddressAddCell")

    /// Reuse identifier `AddressCell`.
    let addressCell: RswiftResources.ReuseIdentifier<ContactFormTableViewCell> = .init(identifier: "AddressCell")

    /// Reuse identifier `AddressEditCell`.
    let addressEditCell: RswiftResources.ReuseIdentifier<VCardEditAddressTableViewCell> = .init(identifier: "AddressEditCell")

    /// Reuse identifier `AppIconCellView`.
    let appIconCellView: RswiftResources.ReuseIdentifier<EnumTableViewCell> = .init(identifier: "AppIconCellView")

    /// Reuse identifier `AppearanceViewCell`.
    let appearanceViewCell: RswiftResources.ReuseIdentifier<EnumTableViewCell> = .init(identifier: "AppearanceViewCell")

    /// Reuse identifier `AttachmentCellView`.
    let attachmentCellView: RswiftResources.ReuseIdentifier<ChatAttachmentsCellView> = .init(identifier: "AttachmentCellView")

    /// Reuse identifier `AttachmentsCell`.
    let attachmentsCell: RswiftResources.ReuseIdentifier<UIKit.UITableViewCell> = .init(identifier: "AttachmentsCell")

    /// Reuse identifier `AutoSubscribeOnAcceptedSubscriptionRequestTableViewCell`.
    let autoSubscribeOnAcceptedSubscriptionRequestTableViewCell: RswiftResources.ReuseIdentifier<SwitchTableViewCell> = .init(identifier: "AutoSubscribeOnAcceptedSubscriptionRequestTableViewCell")

    /// Reuse identifier `AvatarEditCell`.
    let avatarEditCell: RswiftResources.ReuseIdentifier<VCardAvatarEditCell> = .init(identifier: "AvatarEditCell")

    /// Reuse identifier `BasicInfoCell`.
    let basicInfoCell: RswiftResources.ReuseIdentifier<ContactBasicTableViewCell> = .init(identifier: "BasicInfoCell")

    /// Reuse identifier `BlockContactCell`.
    let blockContactCell: RswiftResources.ReuseIdentifier<UIKit.UITableViewCell> = .init(identifier: "BlockContactCell")

    /// Reuse identifier `BlockedContactTableViewCell`.
    let blockedContactTableViewCell: RswiftResources.ReuseIdentifier<UIKit.UITableViewCell> = .init(identifier: "BlockedContactTableViewCell")

    /// Reuse identifier `BlockedContactTableViewEmptyCell`.
    let blockedContactTableViewEmptyCell: RswiftResources.ReuseIdentifier<UIKit.UITableViewCell> = .init(identifier: "BlockedContactTableViewEmptyCell")

    /// Reuse identifier `BlockedContactsTableViewCell`.
    let blockedContactsTableViewCell: RswiftResources.ReuseIdentifier<SwitchTableViewCell> = .init(identifier: "BlockedContactsTableViewCell")

    /// Reuse identifier `ChannelBlockedCellView`.
    let channelBlockedCellView: RswiftResources.ReuseIdentifier<UIKit.UITableViewCell> = .init(identifier: "ChannelBlockedCellView")

    /// Reuse identifier `ChannelInviteViewCell`.
    let channelInviteViewCell: RswiftResources.ReuseIdentifier<UIKit.UITableViewCell> = .init(identifier: "ChannelInviteViewCell")

    /// Reuse identifier `ChannelJoinCellView`.
    let channelJoinCellView: RswiftResources.ReuseIdentifier<UIKit.UITableViewCell> = .init(identifier: "ChannelJoinCellView")

    /// Reuse identifier `ChannelParticipantTableViewCell`.
    let channelParticipantTableViewCell: RswiftResources.ReuseIdentifier<ChannelParticipantTableViewCell> = .init(identifier: "ChannelParticipantTableViewCell")

    /// Reuse identifier `ChatSettingsViewCell`.
    let chatSettingsViewCell: RswiftResources.ReuseIdentifier<UIKit.UITableViewCell> = .init(identifier: "ChatSettingsViewCell")

    /// Reuse identifier `ChatTableViewAttachmentCell`.
    let chatTableViewAttachmentCell: RswiftResources.ReuseIdentifier<AttachmentChatTableViewCell> = .init(identifier: "ChatTableViewAttachmentCell")

    /// Reuse identifier `ChatTableViewAttachmentContinuationCell`.
    let chatTableViewAttachmentContinuationCell: RswiftResources.ReuseIdentifier<AttachmentChatTableViewCell> = .init(identifier: "ChatTableViewAttachmentContinuationCell")

    /// Reuse identifier `ChatTableViewInvitationCell`.
    let chatTableViewInvitationCell: RswiftResources.ReuseIdentifier<InvitationChatTableViewCell> = .init(identifier: "ChatTableViewInvitationCell")

    /// Reuse identifier `ChatTableViewLinkPreviewCell`.
    let chatTableViewLinkPreviewCell: RswiftResources.ReuseIdentifier<LinkPreviewChatTableViewCell> = .init(identifier: "ChatTableViewLinkPreviewCell")

    /// Reuse identifier `ChatTableViewLocationCell`.
    let chatTableViewLocationCell: RswiftResources.ReuseIdentifier<LocationChatTableViewCell> = .init(identifier: "ChatTableViewLocationCell")

    /// Reuse identifier `ChatTableViewMarkerCell`.
    let chatTableViewMarkerCell: RswiftResources.ReuseIdentifier<ChatTableViewMarkerCell> = .init(identifier: "ChatTableViewMarkerCell")

    /// Reuse identifier `ChatTableViewMeCell`.
    let chatTableViewMeCell: RswiftResources.ReuseIdentifier<ChatTableViewMeCell> = .init(identifier: "ChatTableViewMeCell")

    /// Reuse identifier `ChatTableViewMessageCell`.
    let chatTableViewMessageCell: RswiftResources.ReuseIdentifier<ChatTableViewCell> = .init(identifier: "ChatTableViewMessageCell")

    /// Reuse identifier `ChatTableViewMessageContinuationCell`.
    let chatTableViewMessageContinuationCell: RswiftResources.ReuseIdentifier<ChatTableViewCell> = .init(identifier: "ChatTableViewMessageContinuationCell")

    /// Reuse identifier `ChatTableViewSystemCell`.
    let chatTableViewSystemCell: RswiftResources.ReuseIdentifier<ChatTableViewSystemCell> = .init(identifier: "ChatTableViewSystemCell")

    /// Reuse identifier `ChatsListTableViewCellNew`.
    let chatsListTableViewCellNew: RswiftResources.ReuseIdentifier<ChatsListTableViewCell> = .init(identifier: "ChatsListTableViewCellNew")

    /// Reuse identifier `ClearDownloadStoreTableViewCell`.
    let clearDownloadStoreTableViewCell: RswiftResources.ReuseIdentifier<UIKit.UITableViewCell> = .init(identifier: "ClearDownloadStoreTableViewCell")

    /// Reuse identifier `ClearMetadataStoreTableViewCell`.
    let clearMetadataStoreTableViewCell: RswiftResources.ReuseIdentifier<UIKit.UITableViewCell> = .init(identifier: "ClearMetadataStoreTableViewCell")

    /// Reuse identifier `ContactFormCell`.
    let contactFormCell: RswiftResources.ReuseIdentifier<ContactFormTableViewCell> = .init(identifier: "ContactFormCell")

    /// Reuse identifier `ContactsSettingsViewCell`.
    let contactsSettingsViewCell: RswiftResources.ReuseIdentifier<UIKit.UITableViewCell> = .init(identifier: "ContactsSettingsViewCell")

    /// Reuse identifier `DeviceMemoryUsageTableViewCell`.
    let deviceMemoryUsageTableViewCell: RswiftResources.ReuseIdentifier<DeviceMemoryUsageTableViewCell> = .init(identifier: "DeviceMemoryUsageTableViewCell")

    /// Reuse identifier `EmailAddCell`.
    let emailAddCell: RswiftResources.ReuseIdentifier<UIKit.UITableViewCell> = .init(identifier: "EmailAddCell")

    /// Reuse identifier `EmailEditCell`.
    let emailEditCell: RswiftResources.ReuseIdentifier<VCardEditEmailTableViewCell> = .init(identifier: "EmailEditCell")

    /// Reuse identifier `EnableBookmarksSyncTableViewCell`.
    let enableBookmarksSyncTableViewCell: RswiftResources.ReuseIdentifier<SwitchTableViewCell> = .init(identifier: "EnableBookmarksSyncTableViewCell")

    /// Reuse identifier `EnableEmoticonsTableViewCell`.
    let enableEmoticonsTableViewCell: RswiftResources.ReuseIdentifier<SwitchTableViewCell> = .init(identifier: "EnableEmoticonsTableViewCell")

    /// Reuse identifier `EnableMarkdownTableViewCell`.
    let enableMarkdownTableViewCell: RswiftResources.ReuseIdentifier<SwitchTableViewCell> = .init(identifier: "EnableMarkdownTableViewCell")

    /// Reuse identifier `EnableMessageCarbonsTableViewCell`.
    let enableMessageCarbonsTableViewCell: RswiftResources.ReuseIdentifier<SwitchTableViewCell> = .init(identifier: "EnableMessageCarbonsTableViewCell")

    /// Reuse identifier `ExperimentalSettingsViewCell`.
    let experimentalSettingsViewCell: RswiftResources.ReuseIdentifier<UIKit.UITableViewCell> = .init(identifier: "ExperimentalSettingsViewCell")

    /// Reuse identifier `GetInTouchSettingsViewCell`.
    let getInTouchSettingsViewCell: RswiftResources.ReuseIdentifier<UIKit.UITableViewCell> = .init(identifier: "GetInTouchSettingsViewCell")

    /// Reuse identifier `ImageQualityTableViewCell`.
    let imageQualityTableViewCell: RswiftResources.ReuseIdentifier<EnumTableViewCell> = .init(identifier: "ImageQualityTableViewCell")

    /// Reuse identifier `kFilterReusableShowResultsTableViewCell`.
    let kFilterReusableShowResultsTableViewCell: RswiftResources.ReuseIdentifier<FilterReusableShowResultsTableViewCell> = .init(identifier: "kFilterReusableShowResultsTableViewCell")

    /// Reuse identifier `kFilterReusableTableViewCell`.
    let kFilterReusableTableViewCell: RswiftResources.ReuseIdentifier<FilterReusableTableViewCell> = .init(identifier: "kFilterReusableTableViewCell")

    /// Reuse identifier `kGroupHeaderImageTableViewCell`.
    let kGroupHeaderImageTableViewCell: RswiftResources.ReuseIdentifier<GroupHeaderImageTableViewCell> = .init(identifier: "kGroupHeaderImageTableViewCell")

    /// Reuse identifier `kMediaFilesCollectionViewCell`.
    let kMediaFilesCollectionViewCell: RswiftResources.ReuseIdentifier<MediaFilesCollectionViewCell> = .init(identifier: "kMediaFilesCollectionViewCell")

    /// Reuse identifier `kMembersSentTableViewCell`.
    let kMembersSentTableViewCell: RswiftResources.ReuseIdentifier<MembersSentTableViewCell> = .init(identifier: "kMembersSentTableViewCell")

    /// Reuse identifier `LinkPreviewsTableViewCell`.
    let linkPreviewsTableViewCell: RswiftResources.ReuseIdentifier<SwitchTableViewCell> = .init(identifier: "LinkPreviewsTableViewCell")

    /// Reuse identifier `MAMEnable`.
    let mamEnable: RswiftResources.ReuseIdentifier<MAMEnable> = .init(identifier: "MAMEnable")

    /// Reuse identifier `MAMInitialSync`.
    let mamInitialSync: RswiftResources.ReuseIdentifier<MAMInitialSync> = .init(identifier: "MAMInitialSync")

    /// Reuse identifier `MaxImagePreviewSizeTableViewCell`.
    let maxImagePreviewSizeTableViewCell: RswiftResources.ReuseIdentifier<EnumTableViewCell> = .init(identifier: "MaxImagePreviewSizeTableViewCell")

    /// Reuse identifier `MediaSettingsViewCell`.
    let mediaSettingsViewCell: RswiftResources.ReuseIdentifier<UIKit.UITableViewCell> = .init(identifier: "MediaSettingsViewCell")

    /// Reuse identifier `MessageDeliveryReceiptsTableViewCell`.
    let messageDeliveryReceiptsTableViewCell: RswiftResources.ReuseIdentifier<SwitchTableViewCell> = .init(identifier: "MessageDeliveryReceiptsTableViewCell")

    /// Reuse identifier `MessageEncryptionTableViewCell`.
    let messageEncryptionTableViewCell: RswiftResources.ReuseIdentifier<EnumTableViewCell> = .init(identifier: "MessageEncryptionTableViewCell")

    /// Reuse identifier `MucChatOccupantsTableViewCell`.
    let mucChatOccupantsTableViewCell: RswiftResources.ReuseIdentifier<MucChatOccupantsTableViewCell> = .init(identifier: "MucChatOccupantsTableViewCell")

    /// Reuse identifier `MuteContactCell`.
    let muteContactCell: RswiftResources.ReuseIdentifier<UIKit.UITableViewCell> = .init(identifier: "MuteContactCell")

    /// Reuse identifier `NotificationSettingsViewCell`.
    let notificationSettingsViewCell: RswiftResources.ReuseIdentifier<UIKit.UITableViewCell> = .init(identifier: "NotificationSettingsViewCell")

    /// Reuse identifier `NotificationsFromUnknownTableViewCell`.
    let notificationsFromUnknownTableViewCell: RswiftResources.ReuseIdentifier<SwitchTableViewCell> = .init(identifier: "NotificationsFromUnknownTableViewCell")

    /// Reuse identifier `OMEMOEncryptionCell`.
    let omemoEncryptionCell: RswiftResources.ReuseIdentifier<EnumTableViewCell> = .init(identifier: "OMEMOEncryptionCell")

    /// Reuse identifier `OMEMOIdentityCell`.
    let omemoIdentityCell: RswiftResources.ReuseIdentifier<OMEMOIdentityTableViewCell> = .init(identifier: "OMEMOIdentityCell")

    /// Reuse identifier `OMEMOLocalIdentityCell`.
    let omemoLocalIdentityCell: RswiftResources.ReuseIdentifier<UIKit.UITableViewCell> = .init(identifier: "OMEMOLocalIdentityCell")

    /// Reuse identifier `OMEMORemoteIdentityCell`.
    let omemoRemoteIdentityCell: RswiftResources.ReuseIdentifier<OMEMOIdentityTableViewCell> = .init(identifier: "OMEMORemoteIdentityCell")

    /// Reuse identifier `PhoneAddCell`.
    let phoneAddCell: RswiftResources.ReuseIdentifier<UIKit.UITableViewCell> = .init(identifier: "PhoneAddCell")

    /// Reuse identifier `PhoneEditCell`.
    let phoneEditCell: RswiftResources.ReuseIdentifier<VCardEditPhoneTableViewCell> = .init(identifier: "PhoneEditCell")

    /// Reuse identifier `PublicStunServersTableViewCell`.
    let publicStunServersTableViewCell: RswiftResources.ReuseIdentifier<SwitchTableViewCell> = .init(identifier: "PublicStunServersTableViewCell")

    /// Reuse identifier `PushNotificationsTableViewCell`.
    let pushNotificationsTableViewCell: RswiftResources.ReuseIdentifier<SwitchTableViewCell> = .init(identifier: "PushNotificationsTableViewCell")

    /// Reuse identifier `RChatTableViewAttachmentCell`.
    let rChatTableViewAttachmentCell: RswiftResources.ReuseIdentifier<AttachmentChatTableViewCell> = .init(identifier: "RChatTableViewAttachmentCell")

    /// Reuse identifier `RChatTableViewMessageCell`.
    let rChatTableViewMessageCell: RswiftResources.ReuseIdentifier<ChatTableViewCell> = .init(identifier: "RChatTableViewMessageCell")

    /// Reuse identifier `RChatTableViewMessageContinuationCell`.
    let rChatTableViewMessageContinuationCell: RswiftResources.ReuseIdentifier<ChatTableViewCell> = .init(identifier: "RChatTableViewMessageContinuationCell")

    /// Reuse identifier `RecentsMessageLinesNoTableViewCell`.
    let recentsMessageLinesNoTableViewCell: RswiftResources.ReuseIdentifier<StepperTableViewCell> = .init(identifier: "RecentsMessageLinesNoTableViewCell")

    /// Reuse identifier `RecentsSortTypeTableViewCell`.
    let recentsSortTypeTableViewCell: RswiftResources.ReuseIdentifier<UIKit.UITableViewCell> = .init(identifier: "RecentsSortTypeTableViewCell")

    /// Reuse identifier `RosterHiddenGroupTableViewCell`.
    let rosterHiddenGroupTableViewCell: RswiftResources.ReuseIdentifier<SwitchTableViewCell> = .init(identifier: "RosterHiddenGroupTableViewCell")

    /// Reuse identifier `RosterItemTableViewCell`.
    let rosterItemTableViewCell: RswiftResources.ReuseIdentifier<RosterItemTableViewCell> = .init(identifier: "RosterItemTableViewCell")

    /// Reuse identifier `RosterTypeTableViewCell`.
    let rosterTypeTableViewCell: RswiftResources.ReuseIdentifier<SwitchTableViewCell> = .init(identifier: "RosterTypeTableViewCell")

    /// Reuse identifier `SendMessageOnReturnTableViewCell`.
    let sendMessageOnReturnTableViewCell: RswiftResources.ReuseIdentifier<SwitchTableViewCell> = .init(identifier: "SendMessageOnReturnTableViewCell")

    /// Reuse identifier `SharingViaHttpUploadTableViewCell`.
    let sharingViaHttpUploadTableViewCell: RswiftResources.ReuseIdentifier<SwitchTableViewCell> = .init(identifier: "SharingViaHttpUploadTableViewCell")

    /// Reuse identifier `StatusTableViewCell`.
    let statusTableViewCell: RswiftResources.ReuseIdentifier<UIKit.UITableViewCell> = .init(identifier: "StatusTableViewCell")

    /// Reuse identifier `StatusTypeSettingsViewCell`.
    let statusTypeSettingsViewCell: RswiftResources.ReuseIdentifier<UIKit.UITableViewCell> = .init(identifier: "StatusTypeSettingsViewCell")

    /// Reuse identifier `TextEditCell`.
    let textEditCell: RswiftResources.ReuseIdentifier<VCardTextEditCell> = .init(identifier: "TextEditCell")

    /// Reuse identifier `VideoQualityTableViewCell`.
    let videoQualityTableViewCell: RswiftResources.ReuseIdentifier<EnumTableViewCell> = .init(identifier: "VideoQualityTableViewCell")

    /// Reuse identifier `XmppPipeliningTableViewCell`.
    let xmppPipeliningTableViewCell: RswiftResources.ReuseIdentifier<SwitchTableViewCell> = .init(identifier: "XmppPipeliningTableViewCell")
  }

  /// This `_R.storyboard` struct is generated, and contains static references to 7 storyboards.
  struct storyboard {
    let bundle: Foundation.Bundle
    var account: account { .init(bundle: bundle) }
    var chat: chat { .init(bundle: bundle) }
    var conversation: conversation { .init(bundle: bundle) }
    var groupchat: groupchat { .init(bundle: bundle) }
    var launchScreen: launchScreen { .init(bundle: bundle) }
    var miX: miX { .init(bundle: bundle) }
    var settings: settings { .init(bundle: bundle) }

    func account(bundle: Foundation.Bundle) -> account {
      .init(bundle: bundle)
    }
    func chat(bundle: Foundation.Bundle) -> chat {
      .init(bundle: bundle)
    }
    func conversation(bundle: Foundation.Bundle) -> conversation {
      .init(bundle: bundle)
    }
    func groupchat(bundle: Foundation.Bundle) -> groupchat {
      .init(bundle: bundle)
    }
    func launchScreen(bundle: Foundation.Bundle) -> launchScreen {
      .init(bundle: bundle)
    }
    func miX(bundle: Foundation.Bundle) -> miX {
      .init(bundle: bundle)
    }
    func settings(bundle: Foundation.Bundle) -> settings {
      .init(bundle: bundle)
    }
    func validate() throws {
      try self.account.validate()
      try self.chat.validate()
      try self.conversation.validate()
      try self.groupchat.validate()
      try self.launchScreen.validate()
      try self.miX.validate()
      try self.settings.validate()
    }


    /// Storyboard `Account`.
    struct account: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "Account"

      var accountSettingsNavigationController: RswiftResources.StoryboardViewControllerIdentifier<UIKit.UINavigationController> { .init(identifier: "AccountSettingsNavigationController", storyboard: name, bundle: bundle) }
      var accountSettingsViewController: RswiftResources.StoryboardViewControllerIdentifier<AccountSettingsViewController> { .init(identifier: "AccountSettingsViewController", storyboard: name, bundle: bundle) }
      var setAccountSettingsController: RswiftResources.StoryboardViewControllerIdentifier<SetAccountSettingsController> { .init(identifier: "SetAccountSettingsController", storyboard: name, bundle: bundle) }
      var setAccountSettingsNavController: RswiftResources.StoryboardViewControllerIdentifier<UIKit.UINavigationController> { .init(identifier: "SetAccountSettingsNavController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIColor(named: "chatslistSemiBackground", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'chatslistSemiBackground' is used in storyboard 'Account', but couldn't be loaded.") }
        if accountSettingsNavigationController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'accountSettingsNavigationController' could not be loaded from storyboard 'Account' as 'UIKit.UINavigationController'.") }
        if accountSettingsViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'accountSettingsViewController' could not be loaded from storyboard 'Account' as 'AccountSettingsViewController'.") }
        if setAccountSettingsController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'setAccountSettingsController' could not be loaded from storyboard 'Account' as 'SetAccountSettingsController'.") }
        if setAccountSettingsNavController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'setAccountSettingsNavController' could not be loaded from storyboard 'Account' as 'UIKit.UINavigationController'.") }
      }
    }

    /// Storyboard `Chat`.
    struct chat: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = UIKit.UINavigationController

      let bundle: Foundation.Bundle

      let name = "Chat"

      var chatAttachmentsController: RswiftResources.StoryboardViewControllerIdentifier<ChatAttachmentsController> { .init(identifier: "ChatAttachmentsController", storyboard: name, bundle: bundle) }
      var chatViewController: RswiftResources.StoryboardViewControllerIdentifier<ChatViewController> { .init(identifier: "ChatViewController", storyboard: name, bundle: bundle) }
      var chatsListViewController: RswiftResources.StoryboardViewControllerIdentifier<ChatsListViewController> { .init(identifier: "ChatsListViewController", storyboard: name, bundle: bundle) }
      var chatsListViewNavigationController: RswiftResources.StoryboardViewControllerIdentifier<UIKit.UINavigationController> { .init(identifier: "ChatsListViewNavigationController", storyboard: name, bundle: bundle) }
      var contactViewController: RswiftResources.StoryboardViewControllerIdentifier<ContactViewController> { .init(identifier: "ContactViewController", storyboard: name, bundle: bundle) }
      var rosterItemEditNavigationController: RswiftResources.StoryboardViewControllerIdentifier<UIKit.UINavigationController> { .init(identifier: "RosterItemEditNavigationController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "appLogo", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'appLogo' is used in storyboard 'Chat', but couldn't be loaded.") }
        if UIKit.UIImage(named: "defaultAvatar", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'defaultAvatar' is used in storyboard 'Chat', but couldn't be loaded.") }
        if UIKit.UIImage(named: "first", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'first' is used in storyboard 'Chat', but couldn't be loaded.") }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "gear") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'gear' is used in storyboard 'Chat', but couldn't be loaded.") } }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "message.fill") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'message.fill' is used in storyboard 'Chat', but couldn't be loaded.") } }
        if UIKit.UIImage(named: "saved_chat_icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'saved_chat_icon' is used in storyboard 'Chat', but couldn't be loaded.") }
        if UIKit.UIImage(named: "searchChatRoom", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'searchChatRoom' is used in storyboard 'Chat', but couldn't be loaded.") }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "square.and.pencil") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'square.and.pencil' is used in storyboard 'Chat', but couldn't be loaded.") } }
        if UIKit.UIColor(named: "buttons_green", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'buttons_green' is used in storyboard 'Chat', but couldn't be loaded.") }
        if UIKit.UIColor(named: "chatslistBackground", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'chatslistBackground' is used in storyboard 'Chat', but couldn't be loaded.") }
        if UIKit.UIColor(named: "chatslistItemSecondaryLabel", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'chatslistItemSecondaryLabel' is used in storyboard 'Chat', but couldn't be loaded.") }
        if UIKit.UIColor(named: "home_end", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'home_end' is used in storyboard 'Chat', but couldn't be loaded.") }
        if UIKit.UIColor(named: "messageBG", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'messageBG' is used in storyboard 'Chat', but couldn't be loaded.") }
        if UIKit.UIColor(named: "separator", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'separator' is used in storyboard 'Chat', but couldn't be loaded.") }
        if UIKit.UIColor(named: "sub_title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'sub_title' is used in storyboard 'Chat', but couldn't be loaded.") }
        if UIKit.UIColor(named: "tintColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'tintColor' is used in storyboard 'Chat', but couldn't be loaded.") }
        if UIKit.UIColor(named: "title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'title' is used in storyboard 'Chat', but couldn't be loaded.") }
        if chatAttachmentsController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'chatAttachmentsController' could not be loaded from storyboard 'Chat' as 'ChatAttachmentsController'.") }
        if chatViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'chatViewController' could not be loaded from storyboard 'Chat' as 'ChatViewController'.") }
        if chatsListViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'chatsListViewController' could not be loaded from storyboard 'Chat' as 'ChatsListViewController'.") }
        if chatsListViewNavigationController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'chatsListViewNavigationController' could not be loaded from storyboard 'Chat' as 'UIKit.UINavigationController'.") }
        if contactViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'contactViewController' could not be loaded from storyboard 'Chat' as 'ContactViewController'.") }
        if rosterItemEditNavigationController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'rosterItemEditNavigationController' could not be loaded from storyboard 'Chat' as 'UIKit.UINavigationController'.") }
      }
    }

    /// Storyboard `Conversation`.
    struct conversation: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "Conversation"

      var conversationLogController: RswiftResources.StoryboardViewControllerIdentifier<ConversationLogController> { .init(identifier: "ConversationLogController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "sendingStamp", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'sendingStamp' is used in storyboard 'Conversation', but couldn't be loaded.") }
        if UIKit.UIColor(named: "AccentColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'AccentColor' is used in storyboard 'Conversation', but couldn't be loaded.") }
        if UIKit.UIColor(named: "ChatReceivedBackgroundColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'ChatReceivedBackgroundColor' is used in storyboard 'Conversation', but couldn't be loaded.") }
        if UIKit.UIColor(named: "buttons_green", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'buttons_green' is used in storyboard 'Conversation', but couldn't be loaded.") }
        if UIKit.UIColor(named: "chatMessageText", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'chatMessageText' is used in storyboard 'Conversation', but couldn't be loaded.") }
        if UIKit.UIColor(named: "tintColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'tintColor' is used in storyboard 'Conversation', but couldn't be loaded.") }
        if conversationLogController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'conversationLogController' could not be loaded from storyboard 'Conversation' as 'ConversationLogController'.") }
      }
    }

    /// Storyboard `Groupchat`.
    struct groupchat: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "Groupchat"

      var inviteViewController: RswiftResources.StoryboardViewControllerIdentifier<InviteViewController> { .init(identifier: "InviteViewController", storyboard: name, bundle: bundle) }
      var mucChatSettingsViewController: RswiftResources.StoryboardViewControllerIdentifier<MucChatSettingsViewController> { .init(identifier: "MucChatSettingsViewController", storyboard: name, bundle: bundle) }
      var mucChatViewController: RswiftResources.StoryboardViewControllerIdentifier<MucChatViewController> { .init(identifier: "MucChatViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "appLogo", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'appLogo' is used in storyboard 'Groupchat', but couldn't be loaded.") }
        if UIKit.UIImage(named: "defaultGroupchatAvatarDark", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'defaultGroupchatAvatarDark' is used in storyboard 'Groupchat', but couldn't be loaded.") }
        if UIKit.UIImage(named: "first", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'first' is used in storyboard 'Groupchat', but couldn't be loaded.") }
        if UIKit.UIColor(named: "chatslistItemSecondaryLabel", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'chatslistItemSecondaryLabel' is used in storyboard 'Groupchat', but couldn't be loaded.") }
        if inviteViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'inviteViewController' could not be loaded from storyboard 'Groupchat' as 'InviteViewController'.") }
        if mucChatSettingsViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'mucChatSettingsViewController' could not be loaded from storyboard 'Groupchat' as 'MucChatSettingsViewController'.") }
        if mucChatViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'mucChatViewController' could not be loaded from storyboard 'Groupchat' as 'MucChatViewController'.") }
      }
    }

    /// Storyboard `LaunchScreen`.
    struct launchScreen: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = UIKit.UIViewController

      let bundle: Foundation.Bundle

      let name = "LaunchScreen"
      func validate() throws {
        if UIKit.UIImage(named: "splash_bg", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'splash_bg' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if UIKit.UIImage(named: "splash_logo", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'splash_logo' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if UIKit.UIImage(named: "splash_pattern", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'splash_pattern' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
      }
    }

    /// Storyboard `MIX`.
    struct miX: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "MIX"

      var channelCreateNavigationViewController: RswiftResources.StoryboardViewControllerIdentifier<UIKit.UINavigationController> { .init(identifier: "ChannelCreateNavigationViewController", storyboard: name, bundle: bundle) }
      var channelJoinNavigationViewController: RswiftResources.StoryboardViewControllerIdentifier<UIKit.UINavigationController> { .init(identifier: "ChannelJoinNavigationViewController", storyboard: name, bundle: bundle) }
      var channelJoinViewController: RswiftResources.StoryboardViewControllerIdentifier<ChannelJoinViewController> { .init(identifier: "ChannelJoinViewController", storyboard: name, bundle: bundle) }
      var channelParticipantsController: RswiftResources.StoryboardViewControllerIdentifier<ChannelParticipantsController> { .init(identifier: "ChannelParticipantsController", storyboard: name, bundle: bundle) }
      var channelSelectNewOwnerViewNavController: RswiftResources.StoryboardViewControllerIdentifier<UIKit.UINavigationController> { .init(identifier: "ChannelSelectNewOwnerViewNavController", storyboard: name, bundle: bundle) }
      var channelSettingsViewController: RswiftResources.StoryboardViewControllerIdentifier<ChannelSettingsViewController> { .init(identifier: "ChannelSettingsViewController", storyboard: name, bundle: bundle) }
      var channelViewController: RswiftResources.StoryboardViewControllerIdentifier<ChannelViewController> { .init(identifier: "ChannelViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "appLogo", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'appLogo' is used in storyboard 'MIX', but couldn't be loaded.") }
        if UIKit.UIImage(named: "defaultAvatar", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'defaultAvatar' is used in storyboard 'MIX', but couldn't be loaded.") }
        if UIKit.UIImage(named: "defaultGroupchatAvatarDark", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'defaultGroupchatAvatarDark' is used in storyboard 'MIX', but couldn't be loaded.") }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "trash") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'trash' is used in storyboard 'MIX', but couldn't be loaded.") } }
        if UIKit.UIColor(named: "chatslistItemSecondaryLabel", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'chatslistItemSecondaryLabel' is used in storyboard 'MIX', but couldn't be loaded.") }
        if UIKit.UIColor(named: "tintColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'tintColor' is used in storyboard 'MIX', but couldn't be loaded.") }
        if channelCreateNavigationViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'channelCreateNavigationViewController' could not be loaded from storyboard 'MIX' as 'UIKit.UINavigationController'.") }
        if channelJoinNavigationViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'channelJoinNavigationViewController' could not be loaded from storyboard 'MIX' as 'UIKit.UINavigationController'.") }
        if channelJoinViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'channelJoinViewController' could not be loaded from storyboard 'MIX' as 'ChannelJoinViewController'.") }
        if channelParticipantsController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'channelParticipantsController' could not be loaded from storyboard 'MIX' as 'ChannelParticipantsController'.") }
        if channelSelectNewOwnerViewNavController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'channelSelectNewOwnerViewNavController' could not be loaded from storyboard 'MIX' as 'UIKit.UINavigationController'.") }
        if channelSettingsViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'channelSettingsViewController' could not be loaded from storyboard 'MIX' as 'ChannelSettingsViewController'.") }
        if channelViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'channelViewController' could not be loaded from storyboard 'MIX' as 'ChannelViewController'.") }
      }
    }

    /// Storyboard `Settings`.
    struct settings: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = UIKit.UINavigationController

      let bundle: Foundation.Bundle

      let name = "Settings"

      var settingsNavigationController: RswiftResources.StoryboardViewControllerIdentifier<UIKit.UINavigationController> { .init(identifier: "SettingsNavigationController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if settingsNavigationController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'settingsNavigationController' could not be loaded from storyboard 'Settings' as 'UIKit.UINavigationController'.") }
      }
    }
  }
}